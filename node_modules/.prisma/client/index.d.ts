
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Attendance_user
 * 
 */
export type Attendance_user = $Result.DefaultSelection<Prisma.$Attendance_userPayload>
/**
 * Model School
 * 
 */
export type School = $Result.DefaultSelection<Prisma.$SchoolPayload>
/**
 * Model Classes
 * 
 */
export type Classes = $Result.DefaultSelection<Prisma.$ClassesPayload>
/**
 * Model Holidays
 * 
 */
export type Holidays = $Result.DefaultSelection<Prisma.$HolidaysPayload>
/**
 * Model Staff
 * 
 */
export type Staff = $Result.DefaultSelection<Prisma.$StaffPayload>
/**
 * Model StaffAttendance
 * 
 */
export type StaffAttendance = $Result.DefaultSelection<Prisma.$StaffAttendancePayload>
/**
 * Model Student
 * 
 */
export type Student = $Result.DefaultSelection<Prisma.$StudentPayload>
/**
 * Model StudentAttendance
 * 
 */
export type StudentAttendance = $Result.DefaultSelection<Prisma.$StudentAttendancePayload>
/**
 * Model ClassTimetable
 * 
 */
export type ClassTimetable = $Result.DefaultSelection<Prisma.$ClassTimetablePayload>
/**
 * Model Feedback
 * 
 */
export type Feedback = $Result.DefaultSelection<Prisma.$FeedbackPayload>
/**
 * Model Admin
 * 
 */
export type Admin = $Result.DefaultSelection<Prisma.$AdminPayload>
/**
 * Model Messages
 * 
 */
export type Messages = $Result.DefaultSelection<Prisma.$MessagesPayload>
/**
 * Model LeaveRequest
 * 
 */
export type LeaveRequest = $Result.DefaultSelection<Prisma.$LeaveRequestPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const Gender: {
  M: 'M',
  F: 'F',
  O: 'O'
};

export type Gender = (typeof Gender)[keyof typeof Gender]


export const DayOfWeek: {
  Mon: 'Mon',
  Tue: 'Tue',
  Wed: 'Wed',
  Thu: 'Thu',
  Fri: 'Fri',
  Sat: 'Sat'
};

export type DayOfWeek = (typeof DayOfWeek)[keyof typeof DayOfWeek]


export const Role: {
  admin: 'admin',
  staff: 'staff',
  student: 'student'
};

export type Role = (typeof Role)[keyof typeof Role]

}

export type Gender = $Enums.Gender

export const Gender: typeof $Enums.Gender

export type DayOfWeek = $Enums.DayOfWeek

export const DayOfWeek: typeof $Enums.DayOfWeek

export type Role = $Enums.Role

export const Role: typeof $Enums.Role

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Attendance_users
 * const attendance_users = await prisma.attendance_user.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Attendance_users
   * const attendance_users = await prisma.attendance_user.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.attendance_user`: Exposes CRUD operations for the **Attendance_user** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Attendance_users
    * const attendance_users = await prisma.attendance_user.findMany()
    * ```
    */
  get attendance_user(): Prisma.Attendance_userDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.school`: Exposes CRUD operations for the **School** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Schools
    * const schools = await prisma.school.findMany()
    * ```
    */
  get school(): Prisma.SchoolDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.classes`: Exposes CRUD operations for the **Classes** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Classes
    * const classes = await prisma.classes.findMany()
    * ```
    */
  get classes(): Prisma.ClassesDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.holidays`: Exposes CRUD operations for the **Holidays** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Holidays
    * const holidays = await prisma.holidays.findMany()
    * ```
    */
  get holidays(): Prisma.HolidaysDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.staff`: Exposes CRUD operations for the **Staff** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Staff
    * const staff = await prisma.staff.findMany()
    * ```
    */
  get staff(): Prisma.StaffDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.staffAttendance`: Exposes CRUD operations for the **StaffAttendance** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more StaffAttendances
    * const staffAttendances = await prisma.staffAttendance.findMany()
    * ```
    */
  get staffAttendance(): Prisma.StaffAttendanceDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.student`: Exposes CRUD operations for the **Student** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Students
    * const students = await prisma.student.findMany()
    * ```
    */
  get student(): Prisma.StudentDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.studentAttendance`: Exposes CRUD operations for the **StudentAttendance** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more StudentAttendances
    * const studentAttendances = await prisma.studentAttendance.findMany()
    * ```
    */
  get studentAttendance(): Prisma.StudentAttendanceDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.classTimetable`: Exposes CRUD operations for the **ClassTimetable** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ClassTimetables
    * const classTimetables = await prisma.classTimetable.findMany()
    * ```
    */
  get classTimetable(): Prisma.ClassTimetableDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.feedback`: Exposes CRUD operations for the **Feedback** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Feedbacks
    * const feedbacks = await prisma.feedback.findMany()
    * ```
    */
  get feedback(): Prisma.FeedbackDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.admin`: Exposes CRUD operations for the **Admin** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Admins
    * const admins = await prisma.admin.findMany()
    * ```
    */
  get admin(): Prisma.AdminDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.messages`: Exposes CRUD operations for the **Messages** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Messages
    * const messages = await prisma.messages.findMany()
    * ```
    */
  get messages(): Prisma.MessagesDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.leaveRequest`: Exposes CRUD operations for the **LeaveRequest** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more LeaveRequests
    * const leaveRequests = await prisma.leaveRequest.findMany()
    * ```
    */
  get leaveRequest(): Prisma.LeaveRequestDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.10.1
   * Query Engine version: 9b628578b3b7cae625e8c927178f15a170e74a9c
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Attendance_user: 'Attendance_user',
    School: 'School',
    Classes: 'Classes',
    Holidays: 'Holidays',
    Staff: 'Staff',
    StaffAttendance: 'StaffAttendance',
    Student: 'Student',
    StudentAttendance: 'StudentAttendance',
    ClassTimetable: 'ClassTimetable',
    Feedback: 'Feedback',
    Admin: 'Admin',
    Messages: 'Messages',
    LeaveRequest: 'LeaveRequest'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "attendance_user" | "school" | "classes" | "holidays" | "staff" | "staffAttendance" | "student" | "studentAttendance" | "classTimetable" | "feedback" | "admin" | "messages" | "leaveRequest"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Attendance_user: {
        payload: Prisma.$Attendance_userPayload<ExtArgs>
        fields: Prisma.Attendance_userFieldRefs
        operations: {
          findUnique: {
            args: Prisma.Attendance_userFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Attendance_userPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.Attendance_userFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Attendance_userPayload>
          }
          findFirst: {
            args: Prisma.Attendance_userFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Attendance_userPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.Attendance_userFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Attendance_userPayload>
          }
          findMany: {
            args: Prisma.Attendance_userFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Attendance_userPayload>[]
          }
          create: {
            args: Prisma.Attendance_userCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Attendance_userPayload>
          }
          createMany: {
            args: Prisma.Attendance_userCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.Attendance_userDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Attendance_userPayload>
          }
          update: {
            args: Prisma.Attendance_userUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Attendance_userPayload>
          }
          deleteMany: {
            args: Prisma.Attendance_userDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.Attendance_userUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.Attendance_userUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Attendance_userPayload>
          }
          aggregate: {
            args: Prisma.Attendance_userAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAttendance_user>
          }
          groupBy: {
            args: Prisma.Attendance_userGroupByArgs<ExtArgs>
            result: $Utils.Optional<Attendance_userGroupByOutputType>[]
          }
          count: {
            args: Prisma.Attendance_userCountArgs<ExtArgs>
            result: $Utils.Optional<Attendance_userCountAggregateOutputType> | number
          }
        }
      }
      School: {
        payload: Prisma.$SchoolPayload<ExtArgs>
        fields: Prisma.SchoolFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SchoolFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SchoolPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SchoolFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SchoolPayload>
          }
          findFirst: {
            args: Prisma.SchoolFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SchoolPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SchoolFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SchoolPayload>
          }
          findMany: {
            args: Prisma.SchoolFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SchoolPayload>[]
          }
          create: {
            args: Prisma.SchoolCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SchoolPayload>
          }
          createMany: {
            args: Prisma.SchoolCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.SchoolDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SchoolPayload>
          }
          update: {
            args: Prisma.SchoolUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SchoolPayload>
          }
          deleteMany: {
            args: Prisma.SchoolDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SchoolUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.SchoolUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SchoolPayload>
          }
          aggregate: {
            args: Prisma.SchoolAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSchool>
          }
          groupBy: {
            args: Prisma.SchoolGroupByArgs<ExtArgs>
            result: $Utils.Optional<SchoolGroupByOutputType>[]
          }
          count: {
            args: Prisma.SchoolCountArgs<ExtArgs>
            result: $Utils.Optional<SchoolCountAggregateOutputType> | number
          }
        }
      }
      Classes: {
        payload: Prisma.$ClassesPayload<ExtArgs>
        fields: Prisma.ClassesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ClassesFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ClassesFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassesPayload>
          }
          findFirst: {
            args: Prisma.ClassesFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ClassesFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassesPayload>
          }
          findMany: {
            args: Prisma.ClassesFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassesPayload>[]
          }
          create: {
            args: Prisma.ClassesCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassesPayload>
          }
          createMany: {
            args: Prisma.ClassesCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.ClassesDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassesPayload>
          }
          update: {
            args: Prisma.ClassesUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassesPayload>
          }
          deleteMany: {
            args: Prisma.ClassesDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ClassesUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ClassesUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassesPayload>
          }
          aggregate: {
            args: Prisma.ClassesAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateClasses>
          }
          groupBy: {
            args: Prisma.ClassesGroupByArgs<ExtArgs>
            result: $Utils.Optional<ClassesGroupByOutputType>[]
          }
          count: {
            args: Prisma.ClassesCountArgs<ExtArgs>
            result: $Utils.Optional<ClassesCountAggregateOutputType> | number
          }
        }
      }
      Holidays: {
        payload: Prisma.$HolidaysPayload<ExtArgs>
        fields: Prisma.HolidaysFieldRefs
        operations: {
          findUnique: {
            args: Prisma.HolidaysFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HolidaysPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.HolidaysFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HolidaysPayload>
          }
          findFirst: {
            args: Prisma.HolidaysFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HolidaysPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.HolidaysFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HolidaysPayload>
          }
          findMany: {
            args: Prisma.HolidaysFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HolidaysPayload>[]
          }
          create: {
            args: Prisma.HolidaysCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HolidaysPayload>
          }
          createMany: {
            args: Prisma.HolidaysCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.HolidaysDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HolidaysPayload>
          }
          update: {
            args: Prisma.HolidaysUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HolidaysPayload>
          }
          deleteMany: {
            args: Prisma.HolidaysDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.HolidaysUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.HolidaysUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HolidaysPayload>
          }
          aggregate: {
            args: Prisma.HolidaysAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateHolidays>
          }
          groupBy: {
            args: Prisma.HolidaysGroupByArgs<ExtArgs>
            result: $Utils.Optional<HolidaysGroupByOutputType>[]
          }
          count: {
            args: Prisma.HolidaysCountArgs<ExtArgs>
            result: $Utils.Optional<HolidaysCountAggregateOutputType> | number
          }
        }
      }
      Staff: {
        payload: Prisma.$StaffPayload<ExtArgs>
        fields: Prisma.StaffFieldRefs
        operations: {
          findUnique: {
            args: Prisma.StaffFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StaffPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.StaffFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StaffPayload>
          }
          findFirst: {
            args: Prisma.StaffFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StaffPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.StaffFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StaffPayload>
          }
          findMany: {
            args: Prisma.StaffFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StaffPayload>[]
          }
          create: {
            args: Prisma.StaffCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StaffPayload>
          }
          createMany: {
            args: Prisma.StaffCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.StaffDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StaffPayload>
          }
          update: {
            args: Prisma.StaffUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StaffPayload>
          }
          deleteMany: {
            args: Prisma.StaffDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.StaffUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.StaffUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StaffPayload>
          }
          aggregate: {
            args: Prisma.StaffAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateStaff>
          }
          groupBy: {
            args: Prisma.StaffGroupByArgs<ExtArgs>
            result: $Utils.Optional<StaffGroupByOutputType>[]
          }
          count: {
            args: Prisma.StaffCountArgs<ExtArgs>
            result: $Utils.Optional<StaffCountAggregateOutputType> | number
          }
        }
      }
      StaffAttendance: {
        payload: Prisma.$StaffAttendancePayload<ExtArgs>
        fields: Prisma.StaffAttendanceFieldRefs
        operations: {
          findUnique: {
            args: Prisma.StaffAttendanceFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StaffAttendancePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.StaffAttendanceFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StaffAttendancePayload>
          }
          findFirst: {
            args: Prisma.StaffAttendanceFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StaffAttendancePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.StaffAttendanceFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StaffAttendancePayload>
          }
          findMany: {
            args: Prisma.StaffAttendanceFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StaffAttendancePayload>[]
          }
          create: {
            args: Prisma.StaffAttendanceCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StaffAttendancePayload>
          }
          createMany: {
            args: Prisma.StaffAttendanceCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.StaffAttendanceDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StaffAttendancePayload>
          }
          update: {
            args: Prisma.StaffAttendanceUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StaffAttendancePayload>
          }
          deleteMany: {
            args: Prisma.StaffAttendanceDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.StaffAttendanceUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.StaffAttendanceUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StaffAttendancePayload>
          }
          aggregate: {
            args: Prisma.StaffAttendanceAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateStaffAttendance>
          }
          groupBy: {
            args: Prisma.StaffAttendanceGroupByArgs<ExtArgs>
            result: $Utils.Optional<StaffAttendanceGroupByOutputType>[]
          }
          count: {
            args: Prisma.StaffAttendanceCountArgs<ExtArgs>
            result: $Utils.Optional<StaffAttendanceCountAggregateOutputType> | number
          }
        }
      }
      Student: {
        payload: Prisma.$StudentPayload<ExtArgs>
        fields: Prisma.StudentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.StudentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.StudentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentPayload>
          }
          findFirst: {
            args: Prisma.StudentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.StudentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentPayload>
          }
          findMany: {
            args: Prisma.StudentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentPayload>[]
          }
          create: {
            args: Prisma.StudentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentPayload>
          }
          createMany: {
            args: Prisma.StudentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.StudentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentPayload>
          }
          update: {
            args: Prisma.StudentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentPayload>
          }
          deleteMany: {
            args: Prisma.StudentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.StudentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.StudentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentPayload>
          }
          aggregate: {
            args: Prisma.StudentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateStudent>
          }
          groupBy: {
            args: Prisma.StudentGroupByArgs<ExtArgs>
            result: $Utils.Optional<StudentGroupByOutputType>[]
          }
          count: {
            args: Prisma.StudentCountArgs<ExtArgs>
            result: $Utils.Optional<StudentCountAggregateOutputType> | number
          }
        }
      }
      StudentAttendance: {
        payload: Prisma.$StudentAttendancePayload<ExtArgs>
        fields: Prisma.StudentAttendanceFieldRefs
        operations: {
          findUnique: {
            args: Prisma.StudentAttendanceFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentAttendancePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.StudentAttendanceFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentAttendancePayload>
          }
          findFirst: {
            args: Prisma.StudentAttendanceFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentAttendancePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.StudentAttendanceFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentAttendancePayload>
          }
          findMany: {
            args: Prisma.StudentAttendanceFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentAttendancePayload>[]
          }
          create: {
            args: Prisma.StudentAttendanceCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentAttendancePayload>
          }
          createMany: {
            args: Prisma.StudentAttendanceCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.StudentAttendanceDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentAttendancePayload>
          }
          update: {
            args: Prisma.StudentAttendanceUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentAttendancePayload>
          }
          deleteMany: {
            args: Prisma.StudentAttendanceDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.StudentAttendanceUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.StudentAttendanceUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentAttendancePayload>
          }
          aggregate: {
            args: Prisma.StudentAttendanceAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateStudentAttendance>
          }
          groupBy: {
            args: Prisma.StudentAttendanceGroupByArgs<ExtArgs>
            result: $Utils.Optional<StudentAttendanceGroupByOutputType>[]
          }
          count: {
            args: Prisma.StudentAttendanceCountArgs<ExtArgs>
            result: $Utils.Optional<StudentAttendanceCountAggregateOutputType> | number
          }
        }
      }
      ClassTimetable: {
        payload: Prisma.$ClassTimetablePayload<ExtArgs>
        fields: Prisma.ClassTimetableFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ClassTimetableFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassTimetablePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ClassTimetableFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassTimetablePayload>
          }
          findFirst: {
            args: Prisma.ClassTimetableFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassTimetablePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ClassTimetableFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassTimetablePayload>
          }
          findMany: {
            args: Prisma.ClassTimetableFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassTimetablePayload>[]
          }
          create: {
            args: Prisma.ClassTimetableCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassTimetablePayload>
          }
          createMany: {
            args: Prisma.ClassTimetableCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.ClassTimetableDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassTimetablePayload>
          }
          update: {
            args: Prisma.ClassTimetableUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassTimetablePayload>
          }
          deleteMany: {
            args: Prisma.ClassTimetableDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ClassTimetableUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ClassTimetableUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassTimetablePayload>
          }
          aggregate: {
            args: Prisma.ClassTimetableAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateClassTimetable>
          }
          groupBy: {
            args: Prisma.ClassTimetableGroupByArgs<ExtArgs>
            result: $Utils.Optional<ClassTimetableGroupByOutputType>[]
          }
          count: {
            args: Prisma.ClassTimetableCountArgs<ExtArgs>
            result: $Utils.Optional<ClassTimetableCountAggregateOutputType> | number
          }
        }
      }
      Feedback: {
        payload: Prisma.$FeedbackPayload<ExtArgs>
        fields: Prisma.FeedbackFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FeedbackFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedbackPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FeedbackFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedbackPayload>
          }
          findFirst: {
            args: Prisma.FeedbackFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedbackPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FeedbackFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedbackPayload>
          }
          findMany: {
            args: Prisma.FeedbackFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedbackPayload>[]
          }
          create: {
            args: Prisma.FeedbackCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedbackPayload>
          }
          createMany: {
            args: Prisma.FeedbackCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.FeedbackDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedbackPayload>
          }
          update: {
            args: Prisma.FeedbackUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedbackPayload>
          }
          deleteMany: {
            args: Prisma.FeedbackDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.FeedbackUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.FeedbackUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedbackPayload>
          }
          aggregate: {
            args: Prisma.FeedbackAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFeedback>
          }
          groupBy: {
            args: Prisma.FeedbackGroupByArgs<ExtArgs>
            result: $Utils.Optional<FeedbackGroupByOutputType>[]
          }
          count: {
            args: Prisma.FeedbackCountArgs<ExtArgs>
            result: $Utils.Optional<FeedbackCountAggregateOutputType> | number
          }
        }
      }
      Admin: {
        payload: Prisma.$AdminPayload<ExtArgs>
        fields: Prisma.AdminFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AdminFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AdminFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>
          }
          findFirst: {
            args: Prisma.AdminFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AdminFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>
          }
          findMany: {
            args: Prisma.AdminFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>[]
          }
          create: {
            args: Prisma.AdminCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>
          }
          createMany: {
            args: Prisma.AdminCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.AdminDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>
          }
          update: {
            args: Prisma.AdminUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>
          }
          deleteMany: {
            args: Prisma.AdminDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AdminUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.AdminUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>
          }
          aggregate: {
            args: Prisma.AdminAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAdmin>
          }
          groupBy: {
            args: Prisma.AdminGroupByArgs<ExtArgs>
            result: $Utils.Optional<AdminGroupByOutputType>[]
          }
          count: {
            args: Prisma.AdminCountArgs<ExtArgs>
            result: $Utils.Optional<AdminCountAggregateOutputType> | number
          }
        }
      }
      Messages: {
        payload: Prisma.$MessagesPayload<ExtArgs>
        fields: Prisma.MessagesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MessagesFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MessagesFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagesPayload>
          }
          findFirst: {
            args: Prisma.MessagesFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MessagesFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagesPayload>
          }
          findMany: {
            args: Prisma.MessagesFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagesPayload>[]
          }
          create: {
            args: Prisma.MessagesCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagesPayload>
          }
          createMany: {
            args: Prisma.MessagesCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.MessagesDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagesPayload>
          }
          update: {
            args: Prisma.MessagesUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagesPayload>
          }
          deleteMany: {
            args: Prisma.MessagesDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MessagesUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.MessagesUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagesPayload>
          }
          aggregate: {
            args: Prisma.MessagesAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMessages>
          }
          groupBy: {
            args: Prisma.MessagesGroupByArgs<ExtArgs>
            result: $Utils.Optional<MessagesGroupByOutputType>[]
          }
          count: {
            args: Prisma.MessagesCountArgs<ExtArgs>
            result: $Utils.Optional<MessagesCountAggregateOutputType> | number
          }
        }
      }
      LeaveRequest: {
        payload: Prisma.$LeaveRequestPayload<ExtArgs>
        fields: Prisma.LeaveRequestFieldRefs
        operations: {
          findUnique: {
            args: Prisma.LeaveRequestFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeaveRequestPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.LeaveRequestFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeaveRequestPayload>
          }
          findFirst: {
            args: Prisma.LeaveRequestFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeaveRequestPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.LeaveRequestFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeaveRequestPayload>
          }
          findMany: {
            args: Prisma.LeaveRequestFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeaveRequestPayload>[]
          }
          create: {
            args: Prisma.LeaveRequestCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeaveRequestPayload>
          }
          createMany: {
            args: Prisma.LeaveRequestCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.LeaveRequestDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeaveRequestPayload>
          }
          update: {
            args: Prisma.LeaveRequestUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeaveRequestPayload>
          }
          deleteMany: {
            args: Prisma.LeaveRequestDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.LeaveRequestUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.LeaveRequestUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeaveRequestPayload>
          }
          aggregate: {
            args: Prisma.LeaveRequestAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateLeaveRequest>
          }
          groupBy: {
            args: Prisma.LeaveRequestGroupByArgs<ExtArgs>
            result: $Utils.Optional<LeaveRequestGroupByOutputType>[]
          }
          count: {
            args: Prisma.LeaveRequestCountArgs<ExtArgs>
            result: $Utils.Optional<LeaveRequestCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    attendance_user?: Attendance_userOmit
    school?: SchoolOmit
    classes?: ClassesOmit
    holidays?: HolidaysOmit
    staff?: StaffOmit
    staffAttendance?: StaffAttendanceOmit
    student?: StudentOmit
    studentAttendance?: StudentAttendanceOmit
    classTimetable?: ClassTimetableOmit
    feedback?: FeedbackOmit
    admin?: AdminOmit
    messages?: MessagesOmit
    leaveRequest?: LeaveRequestOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type Attendance_userCountOutputType
   */

  export type Attendance_userCountOutputType = {
    students: number
  }

  export type Attendance_userCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    students?: boolean | Attendance_userCountOutputTypeCountStudentsArgs
  }

  // Custom InputTypes
  /**
   * Attendance_userCountOutputType without action
   */
  export type Attendance_userCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attendance_userCountOutputType
     */
    select?: Attendance_userCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * Attendance_userCountOutputType without action
   */
  export type Attendance_userCountOutputTypeCountStudentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StudentWhereInput
  }


  /**
   * Count Type SchoolCountOutputType
   */

  export type SchoolCountOutputType = {
    users: number
    staff: number
    classes: number
    holidays: number
    students: number
    feedbacks: number
    classTimetables: number
    staffAttendances: number
    studentAttendances: number
    admins: number
    Messages: number
  }

  export type SchoolCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | SchoolCountOutputTypeCountUsersArgs
    staff?: boolean | SchoolCountOutputTypeCountStaffArgs
    classes?: boolean | SchoolCountOutputTypeCountClassesArgs
    holidays?: boolean | SchoolCountOutputTypeCountHolidaysArgs
    students?: boolean | SchoolCountOutputTypeCountStudentsArgs
    feedbacks?: boolean | SchoolCountOutputTypeCountFeedbacksArgs
    classTimetables?: boolean | SchoolCountOutputTypeCountClassTimetablesArgs
    staffAttendances?: boolean | SchoolCountOutputTypeCountStaffAttendancesArgs
    studentAttendances?: boolean | SchoolCountOutputTypeCountStudentAttendancesArgs
    admins?: boolean | SchoolCountOutputTypeCountAdminsArgs
    Messages?: boolean | SchoolCountOutputTypeCountMessagesArgs
  }

  // Custom InputTypes
  /**
   * SchoolCountOutputType without action
   */
  export type SchoolCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SchoolCountOutputType
     */
    select?: SchoolCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * SchoolCountOutputType without action
   */
  export type SchoolCountOutputTypeCountUsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: Attendance_userWhereInput
  }

  /**
   * SchoolCountOutputType without action
   */
  export type SchoolCountOutputTypeCountStaffArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StaffWhereInput
  }

  /**
   * SchoolCountOutputType without action
   */
  export type SchoolCountOutputTypeCountClassesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ClassesWhereInput
  }

  /**
   * SchoolCountOutputType without action
   */
  export type SchoolCountOutputTypeCountHolidaysArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: HolidaysWhereInput
  }

  /**
   * SchoolCountOutputType without action
   */
  export type SchoolCountOutputTypeCountStudentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StudentWhereInput
  }

  /**
   * SchoolCountOutputType without action
   */
  export type SchoolCountOutputTypeCountFeedbacksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FeedbackWhereInput
  }

  /**
   * SchoolCountOutputType without action
   */
  export type SchoolCountOutputTypeCountClassTimetablesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ClassTimetableWhereInput
  }

  /**
   * SchoolCountOutputType without action
   */
  export type SchoolCountOutputTypeCountStaffAttendancesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StaffAttendanceWhereInput
  }

  /**
   * SchoolCountOutputType without action
   */
  export type SchoolCountOutputTypeCountStudentAttendancesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StudentAttendanceWhereInput
  }

  /**
   * SchoolCountOutputType without action
   */
  export type SchoolCountOutputTypeCountAdminsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AdminWhereInput
  }

  /**
   * SchoolCountOutputType without action
   */
  export type SchoolCountOutputTypeCountMessagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MessagesWhereInput
  }


  /**
   * Count Type ClassesCountOutputType
   */

  export type ClassesCountOutputType = {
    holidays: number
    students: number
    studentAttendance: number
    classTimetables: number
    feedbacks: number
  }

  export type ClassesCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    holidays?: boolean | ClassesCountOutputTypeCountHolidaysArgs
    students?: boolean | ClassesCountOutputTypeCountStudentsArgs
    studentAttendance?: boolean | ClassesCountOutputTypeCountStudentAttendanceArgs
    classTimetables?: boolean | ClassesCountOutputTypeCountClassTimetablesArgs
    feedbacks?: boolean | ClassesCountOutputTypeCountFeedbacksArgs
  }

  // Custom InputTypes
  /**
   * ClassesCountOutputType without action
   */
  export type ClassesCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClassesCountOutputType
     */
    select?: ClassesCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ClassesCountOutputType without action
   */
  export type ClassesCountOutputTypeCountHolidaysArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: HolidaysWhereInput
  }

  /**
   * ClassesCountOutputType without action
   */
  export type ClassesCountOutputTypeCountStudentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StudentWhereInput
  }

  /**
   * ClassesCountOutputType without action
   */
  export type ClassesCountOutputTypeCountStudentAttendanceArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StudentAttendanceWhereInput
  }

  /**
   * ClassesCountOutputType without action
   */
  export type ClassesCountOutputTypeCountClassTimetablesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ClassTimetableWhereInput
  }

  /**
   * ClassesCountOutputType without action
   */
  export type ClassesCountOutputTypeCountFeedbacksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FeedbackWhereInput
  }


  /**
   * Count Type HolidaysCountOutputType
   */

  export type HolidaysCountOutputType = {
    classes: number
  }

  export type HolidaysCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    classes?: boolean | HolidaysCountOutputTypeCountClassesArgs
  }

  // Custom InputTypes
  /**
   * HolidaysCountOutputType without action
   */
  export type HolidaysCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HolidaysCountOutputType
     */
    select?: HolidaysCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * HolidaysCountOutputType without action
   */
  export type HolidaysCountOutputTypeCountClassesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ClassesWhereInput
  }


  /**
   * Count Type StaffCountOutputType
   */

  export type StaffCountOutputType = {
    attendances: number
  }

  export type StaffCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    attendances?: boolean | StaffCountOutputTypeCountAttendancesArgs
  }

  // Custom InputTypes
  /**
   * StaffCountOutputType without action
   */
  export type StaffCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StaffCountOutputType
     */
    select?: StaffCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * StaffCountOutputType without action
   */
  export type StaffCountOutputTypeCountAttendancesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StaffAttendanceWhereInput
  }


  /**
   * Count Type StudentCountOutputType
   */

  export type StudentCountOutputType = {
    attendance: number
  }

  export type StudentCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    attendance?: boolean | StudentCountOutputTypeCountAttendanceArgs
  }

  // Custom InputTypes
  /**
   * StudentCountOutputType without action
   */
  export type StudentCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentCountOutputType
     */
    select?: StudentCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * StudentCountOutputType without action
   */
  export type StudentCountOutputTypeCountAttendanceArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StudentAttendanceWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Attendance_user
   */

  export type AggregateAttendance_user = {
    _count: Attendance_userCountAggregateOutputType | null
    _avg: Attendance_userAvgAggregateOutputType | null
    _sum: Attendance_userSumAggregateOutputType | null
    _min: Attendance_userMinAggregateOutputType | null
    _max: Attendance_userMaxAggregateOutputType | null
  }

  export type Attendance_userAvgAggregateOutputType = {
    id: number | null
    school_id: number | null
  }

  export type Attendance_userSumAggregateOutputType = {
    id: number | null
    school_id: number | null
  }

  export type Attendance_userMinAggregateOutputType = {
    id: number | null
    username: string | null
    password: string | null
    role: string | null
    school_id: number | null
  }

  export type Attendance_userMaxAggregateOutputType = {
    id: number | null
    username: string | null
    password: string | null
    role: string | null
    school_id: number | null
  }

  export type Attendance_userCountAggregateOutputType = {
    id: number
    username: number
    password: number
    role: number
    school_id: number
    _all: number
  }


  export type Attendance_userAvgAggregateInputType = {
    id?: true
    school_id?: true
  }

  export type Attendance_userSumAggregateInputType = {
    id?: true
    school_id?: true
  }

  export type Attendance_userMinAggregateInputType = {
    id?: true
    username?: true
    password?: true
    role?: true
    school_id?: true
  }

  export type Attendance_userMaxAggregateInputType = {
    id?: true
    username?: true
    password?: true
    role?: true
    school_id?: true
  }

  export type Attendance_userCountAggregateInputType = {
    id?: true
    username?: true
    password?: true
    role?: true
    school_id?: true
    _all?: true
  }

  export type Attendance_userAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Attendance_user to aggregate.
     */
    where?: Attendance_userWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Attendance_users to fetch.
     */
    orderBy?: Attendance_userOrderByWithRelationInput | Attendance_userOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: Attendance_userWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Attendance_users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Attendance_users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Attendance_users
    **/
    _count?: true | Attendance_userCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Attendance_userAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Attendance_userSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Attendance_userMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Attendance_userMaxAggregateInputType
  }

  export type GetAttendance_userAggregateType<T extends Attendance_userAggregateArgs> = {
        [P in keyof T & keyof AggregateAttendance_user]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAttendance_user[P]>
      : GetScalarType<T[P], AggregateAttendance_user[P]>
  }




  export type Attendance_userGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: Attendance_userWhereInput
    orderBy?: Attendance_userOrderByWithAggregationInput | Attendance_userOrderByWithAggregationInput[]
    by: Attendance_userScalarFieldEnum[] | Attendance_userScalarFieldEnum
    having?: Attendance_userScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Attendance_userCountAggregateInputType | true
    _avg?: Attendance_userAvgAggregateInputType
    _sum?: Attendance_userSumAggregateInputType
    _min?: Attendance_userMinAggregateInputType
    _max?: Attendance_userMaxAggregateInputType
  }

  export type Attendance_userGroupByOutputType = {
    id: number
    username: string
    password: string
    role: string
    school_id: number
    _count: Attendance_userCountAggregateOutputType | null
    _avg: Attendance_userAvgAggregateOutputType | null
    _sum: Attendance_userSumAggregateOutputType | null
    _min: Attendance_userMinAggregateOutputType | null
    _max: Attendance_userMaxAggregateOutputType | null
  }

  type GetAttendance_userGroupByPayload<T extends Attendance_userGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Attendance_userGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Attendance_userGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Attendance_userGroupByOutputType[P]>
            : GetScalarType<T[P], Attendance_userGroupByOutputType[P]>
        }
      >
    >


  export type Attendance_userSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    username?: boolean
    password?: boolean
    role?: boolean
    school_id?: boolean
    school?: boolean | SchoolDefaultArgs<ExtArgs>
    staff?: boolean | Attendance_user$staffArgs<ExtArgs>
    students?: boolean | Attendance_user$studentsArgs<ExtArgs>
    admin?: boolean | Attendance_user$adminArgs<ExtArgs>
    _count?: boolean | Attendance_userCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["attendance_user"]>



  export type Attendance_userSelectScalar = {
    id?: boolean
    username?: boolean
    password?: boolean
    role?: boolean
    school_id?: boolean
  }

  export type Attendance_userOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "username" | "password" | "role" | "school_id", ExtArgs["result"]["attendance_user"]>
  export type Attendance_userInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    school?: boolean | SchoolDefaultArgs<ExtArgs>
    staff?: boolean | Attendance_user$staffArgs<ExtArgs>
    students?: boolean | Attendance_user$studentsArgs<ExtArgs>
    admin?: boolean | Attendance_user$adminArgs<ExtArgs>
    _count?: boolean | Attendance_userCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $Attendance_userPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Attendance_user"
    objects: {
      school: Prisma.$SchoolPayload<ExtArgs>
      staff: Prisma.$StaffPayload<ExtArgs> | null
      students: Prisma.$StudentPayload<ExtArgs>[]
      admin: Prisma.$AdminPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      username: string
      password: string
      role: string
      school_id: number
    }, ExtArgs["result"]["attendance_user"]>
    composites: {}
  }

  type Attendance_userGetPayload<S extends boolean | null | undefined | Attendance_userDefaultArgs> = $Result.GetResult<Prisma.$Attendance_userPayload, S>

  type Attendance_userCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<Attendance_userFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: Attendance_userCountAggregateInputType | true
    }

  export interface Attendance_userDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Attendance_user'], meta: { name: 'Attendance_user' } }
    /**
     * Find zero or one Attendance_user that matches the filter.
     * @param {Attendance_userFindUniqueArgs} args - Arguments to find a Attendance_user
     * @example
     * // Get one Attendance_user
     * const attendance_user = await prisma.attendance_user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends Attendance_userFindUniqueArgs>(args: SelectSubset<T, Attendance_userFindUniqueArgs<ExtArgs>>): Prisma__Attendance_userClient<$Result.GetResult<Prisma.$Attendance_userPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Attendance_user that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {Attendance_userFindUniqueOrThrowArgs} args - Arguments to find a Attendance_user
     * @example
     * // Get one Attendance_user
     * const attendance_user = await prisma.attendance_user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends Attendance_userFindUniqueOrThrowArgs>(args: SelectSubset<T, Attendance_userFindUniqueOrThrowArgs<ExtArgs>>): Prisma__Attendance_userClient<$Result.GetResult<Prisma.$Attendance_userPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Attendance_user that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Attendance_userFindFirstArgs} args - Arguments to find a Attendance_user
     * @example
     * // Get one Attendance_user
     * const attendance_user = await prisma.attendance_user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends Attendance_userFindFirstArgs>(args?: SelectSubset<T, Attendance_userFindFirstArgs<ExtArgs>>): Prisma__Attendance_userClient<$Result.GetResult<Prisma.$Attendance_userPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Attendance_user that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Attendance_userFindFirstOrThrowArgs} args - Arguments to find a Attendance_user
     * @example
     * // Get one Attendance_user
     * const attendance_user = await prisma.attendance_user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends Attendance_userFindFirstOrThrowArgs>(args?: SelectSubset<T, Attendance_userFindFirstOrThrowArgs<ExtArgs>>): Prisma__Attendance_userClient<$Result.GetResult<Prisma.$Attendance_userPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Attendance_users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Attendance_userFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Attendance_users
     * const attendance_users = await prisma.attendance_user.findMany()
     * 
     * // Get first 10 Attendance_users
     * const attendance_users = await prisma.attendance_user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const attendance_userWithIdOnly = await prisma.attendance_user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends Attendance_userFindManyArgs>(args?: SelectSubset<T, Attendance_userFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$Attendance_userPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Attendance_user.
     * @param {Attendance_userCreateArgs} args - Arguments to create a Attendance_user.
     * @example
     * // Create one Attendance_user
     * const Attendance_user = await prisma.attendance_user.create({
     *   data: {
     *     // ... data to create a Attendance_user
     *   }
     * })
     * 
     */
    create<T extends Attendance_userCreateArgs>(args: SelectSubset<T, Attendance_userCreateArgs<ExtArgs>>): Prisma__Attendance_userClient<$Result.GetResult<Prisma.$Attendance_userPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Attendance_users.
     * @param {Attendance_userCreateManyArgs} args - Arguments to create many Attendance_users.
     * @example
     * // Create many Attendance_users
     * const attendance_user = await prisma.attendance_user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends Attendance_userCreateManyArgs>(args?: SelectSubset<T, Attendance_userCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Attendance_user.
     * @param {Attendance_userDeleteArgs} args - Arguments to delete one Attendance_user.
     * @example
     * // Delete one Attendance_user
     * const Attendance_user = await prisma.attendance_user.delete({
     *   where: {
     *     // ... filter to delete one Attendance_user
     *   }
     * })
     * 
     */
    delete<T extends Attendance_userDeleteArgs>(args: SelectSubset<T, Attendance_userDeleteArgs<ExtArgs>>): Prisma__Attendance_userClient<$Result.GetResult<Prisma.$Attendance_userPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Attendance_user.
     * @param {Attendance_userUpdateArgs} args - Arguments to update one Attendance_user.
     * @example
     * // Update one Attendance_user
     * const attendance_user = await prisma.attendance_user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends Attendance_userUpdateArgs>(args: SelectSubset<T, Attendance_userUpdateArgs<ExtArgs>>): Prisma__Attendance_userClient<$Result.GetResult<Prisma.$Attendance_userPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Attendance_users.
     * @param {Attendance_userDeleteManyArgs} args - Arguments to filter Attendance_users to delete.
     * @example
     * // Delete a few Attendance_users
     * const { count } = await prisma.attendance_user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends Attendance_userDeleteManyArgs>(args?: SelectSubset<T, Attendance_userDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Attendance_users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Attendance_userUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Attendance_users
     * const attendance_user = await prisma.attendance_user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends Attendance_userUpdateManyArgs>(args: SelectSubset<T, Attendance_userUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Attendance_user.
     * @param {Attendance_userUpsertArgs} args - Arguments to update or create a Attendance_user.
     * @example
     * // Update or create a Attendance_user
     * const attendance_user = await prisma.attendance_user.upsert({
     *   create: {
     *     // ... data to create a Attendance_user
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Attendance_user we want to update
     *   }
     * })
     */
    upsert<T extends Attendance_userUpsertArgs>(args: SelectSubset<T, Attendance_userUpsertArgs<ExtArgs>>): Prisma__Attendance_userClient<$Result.GetResult<Prisma.$Attendance_userPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Attendance_users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Attendance_userCountArgs} args - Arguments to filter Attendance_users to count.
     * @example
     * // Count the number of Attendance_users
     * const count = await prisma.attendance_user.count({
     *   where: {
     *     // ... the filter for the Attendance_users we want to count
     *   }
     * })
    **/
    count<T extends Attendance_userCountArgs>(
      args?: Subset<T, Attendance_userCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Attendance_userCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Attendance_user.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Attendance_userAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Attendance_userAggregateArgs>(args: Subset<T, Attendance_userAggregateArgs>): Prisma.PrismaPromise<GetAttendance_userAggregateType<T>>

    /**
     * Group by Attendance_user.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Attendance_userGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Attendance_userGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Attendance_userGroupByArgs['orderBy'] }
        : { orderBy?: Attendance_userGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Attendance_userGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAttendance_userGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Attendance_user model
   */
  readonly fields: Attendance_userFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Attendance_user.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__Attendance_userClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    school<T extends SchoolDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SchoolDefaultArgs<ExtArgs>>): Prisma__SchoolClient<$Result.GetResult<Prisma.$SchoolPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    staff<T extends Attendance_user$staffArgs<ExtArgs> = {}>(args?: Subset<T, Attendance_user$staffArgs<ExtArgs>>): Prisma__StaffClient<$Result.GetResult<Prisma.$StaffPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    students<T extends Attendance_user$studentsArgs<ExtArgs> = {}>(args?: Subset<T, Attendance_user$studentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    admin<T extends Attendance_user$adminArgs<ExtArgs> = {}>(args?: Subset<T, Attendance_user$adminArgs<ExtArgs>>): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Attendance_user model
   */
  interface Attendance_userFieldRefs {
    readonly id: FieldRef<"Attendance_user", 'Int'>
    readonly username: FieldRef<"Attendance_user", 'String'>
    readonly password: FieldRef<"Attendance_user", 'String'>
    readonly role: FieldRef<"Attendance_user", 'String'>
    readonly school_id: FieldRef<"Attendance_user", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Attendance_user findUnique
   */
  export type Attendance_userFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attendance_user
     */
    select?: Attendance_userSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Attendance_user
     */
    omit?: Attendance_userOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Attendance_userInclude<ExtArgs> | null
    /**
     * Filter, which Attendance_user to fetch.
     */
    where: Attendance_userWhereUniqueInput
  }

  /**
   * Attendance_user findUniqueOrThrow
   */
  export type Attendance_userFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attendance_user
     */
    select?: Attendance_userSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Attendance_user
     */
    omit?: Attendance_userOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Attendance_userInclude<ExtArgs> | null
    /**
     * Filter, which Attendance_user to fetch.
     */
    where: Attendance_userWhereUniqueInput
  }

  /**
   * Attendance_user findFirst
   */
  export type Attendance_userFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attendance_user
     */
    select?: Attendance_userSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Attendance_user
     */
    omit?: Attendance_userOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Attendance_userInclude<ExtArgs> | null
    /**
     * Filter, which Attendance_user to fetch.
     */
    where?: Attendance_userWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Attendance_users to fetch.
     */
    orderBy?: Attendance_userOrderByWithRelationInput | Attendance_userOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Attendance_users.
     */
    cursor?: Attendance_userWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Attendance_users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Attendance_users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Attendance_users.
     */
    distinct?: Attendance_userScalarFieldEnum | Attendance_userScalarFieldEnum[]
  }

  /**
   * Attendance_user findFirstOrThrow
   */
  export type Attendance_userFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attendance_user
     */
    select?: Attendance_userSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Attendance_user
     */
    omit?: Attendance_userOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Attendance_userInclude<ExtArgs> | null
    /**
     * Filter, which Attendance_user to fetch.
     */
    where?: Attendance_userWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Attendance_users to fetch.
     */
    orderBy?: Attendance_userOrderByWithRelationInput | Attendance_userOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Attendance_users.
     */
    cursor?: Attendance_userWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Attendance_users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Attendance_users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Attendance_users.
     */
    distinct?: Attendance_userScalarFieldEnum | Attendance_userScalarFieldEnum[]
  }

  /**
   * Attendance_user findMany
   */
  export type Attendance_userFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attendance_user
     */
    select?: Attendance_userSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Attendance_user
     */
    omit?: Attendance_userOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Attendance_userInclude<ExtArgs> | null
    /**
     * Filter, which Attendance_users to fetch.
     */
    where?: Attendance_userWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Attendance_users to fetch.
     */
    orderBy?: Attendance_userOrderByWithRelationInput | Attendance_userOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Attendance_users.
     */
    cursor?: Attendance_userWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Attendance_users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Attendance_users.
     */
    skip?: number
    distinct?: Attendance_userScalarFieldEnum | Attendance_userScalarFieldEnum[]
  }

  /**
   * Attendance_user create
   */
  export type Attendance_userCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attendance_user
     */
    select?: Attendance_userSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Attendance_user
     */
    omit?: Attendance_userOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Attendance_userInclude<ExtArgs> | null
    /**
     * The data needed to create a Attendance_user.
     */
    data: XOR<Attendance_userCreateInput, Attendance_userUncheckedCreateInput>
  }

  /**
   * Attendance_user createMany
   */
  export type Attendance_userCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Attendance_users.
     */
    data: Attendance_userCreateManyInput | Attendance_userCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Attendance_user update
   */
  export type Attendance_userUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attendance_user
     */
    select?: Attendance_userSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Attendance_user
     */
    omit?: Attendance_userOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Attendance_userInclude<ExtArgs> | null
    /**
     * The data needed to update a Attendance_user.
     */
    data: XOR<Attendance_userUpdateInput, Attendance_userUncheckedUpdateInput>
    /**
     * Choose, which Attendance_user to update.
     */
    where: Attendance_userWhereUniqueInput
  }

  /**
   * Attendance_user updateMany
   */
  export type Attendance_userUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Attendance_users.
     */
    data: XOR<Attendance_userUpdateManyMutationInput, Attendance_userUncheckedUpdateManyInput>
    /**
     * Filter which Attendance_users to update
     */
    where?: Attendance_userWhereInput
    /**
     * Limit how many Attendance_users to update.
     */
    limit?: number
  }

  /**
   * Attendance_user upsert
   */
  export type Attendance_userUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attendance_user
     */
    select?: Attendance_userSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Attendance_user
     */
    omit?: Attendance_userOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Attendance_userInclude<ExtArgs> | null
    /**
     * The filter to search for the Attendance_user to update in case it exists.
     */
    where: Attendance_userWhereUniqueInput
    /**
     * In case the Attendance_user found by the `where` argument doesn't exist, create a new Attendance_user with this data.
     */
    create: XOR<Attendance_userCreateInput, Attendance_userUncheckedCreateInput>
    /**
     * In case the Attendance_user was found with the provided `where` argument, update it with this data.
     */
    update: XOR<Attendance_userUpdateInput, Attendance_userUncheckedUpdateInput>
  }

  /**
   * Attendance_user delete
   */
  export type Attendance_userDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attendance_user
     */
    select?: Attendance_userSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Attendance_user
     */
    omit?: Attendance_userOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Attendance_userInclude<ExtArgs> | null
    /**
     * Filter which Attendance_user to delete.
     */
    where: Attendance_userWhereUniqueInput
  }

  /**
   * Attendance_user deleteMany
   */
  export type Attendance_userDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Attendance_users to delete
     */
    where?: Attendance_userWhereInput
    /**
     * Limit how many Attendance_users to delete.
     */
    limit?: number
  }

  /**
   * Attendance_user.staff
   */
  export type Attendance_user$staffArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Staff
     */
    select?: StaffSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Staff
     */
    omit?: StaffOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffInclude<ExtArgs> | null
    where?: StaffWhereInput
  }

  /**
   * Attendance_user.students
   */
  export type Attendance_user$studentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Student
     */
    omit?: StudentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
    where?: StudentWhereInput
    orderBy?: StudentOrderByWithRelationInput | StudentOrderByWithRelationInput[]
    cursor?: StudentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: StudentScalarFieldEnum | StudentScalarFieldEnum[]
  }

  /**
   * Attendance_user.admin
   */
  export type Attendance_user$adminArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Admin
     */
    omit?: AdminOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminInclude<ExtArgs> | null
    where?: AdminWhereInput
  }

  /**
   * Attendance_user without action
   */
  export type Attendance_userDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attendance_user
     */
    select?: Attendance_userSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Attendance_user
     */
    omit?: Attendance_userOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Attendance_userInclude<ExtArgs> | null
  }


  /**
   * Model School
   */

  export type AggregateSchool = {
    _count: SchoolCountAggregateOutputType | null
    _avg: SchoolAvgAggregateOutputType | null
    _sum: SchoolSumAggregateOutputType | null
    _min: SchoolMinAggregateOutputType | null
    _max: SchoolMaxAggregateOutputType | null
  }

  export type SchoolAvgAggregateOutputType = {
    id: number | null
  }

  export type SchoolSumAggregateOutputType = {
    id: number | null
  }

  export type SchoolMinAggregateOutputType = {
    id: number | null
    name: string | null
    address: string | null
    photo: Uint8Array | null
  }

  export type SchoolMaxAggregateOutputType = {
    id: number | null
    name: string | null
    address: string | null
    photo: Uint8Array | null
  }

  export type SchoolCountAggregateOutputType = {
    id: number
    name: number
    address: number
    photo: number
    _all: number
  }


  export type SchoolAvgAggregateInputType = {
    id?: true
  }

  export type SchoolSumAggregateInputType = {
    id?: true
  }

  export type SchoolMinAggregateInputType = {
    id?: true
    name?: true
    address?: true
    photo?: true
  }

  export type SchoolMaxAggregateInputType = {
    id?: true
    name?: true
    address?: true
    photo?: true
  }

  export type SchoolCountAggregateInputType = {
    id?: true
    name?: true
    address?: true
    photo?: true
    _all?: true
  }

  export type SchoolAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which School to aggregate.
     */
    where?: SchoolWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Schools to fetch.
     */
    orderBy?: SchoolOrderByWithRelationInput | SchoolOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SchoolWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Schools from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Schools.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Schools
    **/
    _count?: true | SchoolCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SchoolAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SchoolSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SchoolMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SchoolMaxAggregateInputType
  }

  export type GetSchoolAggregateType<T extends SchoolAggregateArgs> = {
        [P in keyof T & keyof AggregateSchool]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSchool[P]>
      : GetScalarType<T[P], AggregateSchool[P]>
  }




  export type SchoolGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SchoolWhereInput
    orderBy?: SchoolOrderByWithAggregationInput | SchoolOrderByWithAggregationInput[]
    by: SchoolScalarFieldEnum[] | SchoolScalarFieldEnum
    having?: SchoolScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SchoolCountAggregateInputType | true
    _avg?: SchoolAvgAggregateInputType
    _sum?: SchoolSumAggregateInputType
    _min?: SchoolMinAggregateInputType
    _max?: SchoolMaxAggregateInputType
  }

  export type SchoolGroupByOutputType = {
    id: number
    name: string
    address: string
    photo: Uint8Array
    _count: SchoolCountAggregateOutputType | null
    _avg: SchoolAvgAggregateOutputType | null
    _sum: SchoolSumAggregateOutputType | null
    _min: SchoolMinAggregateOutputType | null
    _max: SchoolMaxAggregateOutputType | null
  }

  type GetSchoolGroupByPayload<T extends SchoolGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SchoolGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SchoolGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SchoolGroupByOutputType[P]>
            : GetScalarType<T[P], SchoolGroupByOutputType[P]>
        }
      >
    >


  export type SchoolSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    address?: boolean
    photo?: boolean
    users?: boolean | School$usersArgs<ExtArgs>
    staff?: boolean | School$staffArgs<ExtArgs>
    classes?: boolean | School$classesArgs<ExtArgs>
    holidays?: boolean | School$holidaysArgs<ExtArgs>
    students?: boolean | School$studentsArgs<ExtArgs>
    feedbacks?: boolean | School$feedbacksArgs<ExtArgs>
    classTimetables?: boolean | School$classTimetablesArgs<ExtArgs>
    staffAttendances?: boolean | School$staffAttendancesArgs<ExtArgs>
    studentAttendances?: boolean | School$studentAttendancesArgs<ExtArgs>
    admins?: boolean | School$adminsArgs<ExtArgs>
    Messages?: boolean | School$MessagesArgs<ExtArgs>
    _count?: boolean | SchoolCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["school"]>



  export type SchoolSelectScalar = {
    id?: boolean
    name?: boolean
    address?: boolean
    photo?: boolean
  }

  export type SchoolOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "address" | "photo", ExtArgs["result"]["school"]>
  export type SchoolInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | School$usersArgs<ExtArgs>
    staff?: boolean | School$staffArgs<ExtArgs>
    classes?: boolean | School$classesArgs<ExtArgs>
    holidays?: boolean | School$holidaysArgs<ExtArgs>
    students?: boolean | School$studentsArgs<ExtArgs>
    feedbacks?: boolean | School$feedbacksArgs<ExtArgs>
    classTimetables?: boolean | School$classTimetablesArgs<ExtArgs>
    staffAttendances?: boolean | School$staffAttendancesArgs<ExtArgs>
    studentAttendances?: boolean | School$studentAttendancesArgs<ExtArgs>
    admins?: boolean | School$adminsArgs<ExtArgs>
    Messages?: boolean | School$MessagesArgs<ExtArgs>
    _count?: boolean | SchoolCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $SchoolPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "School"
    objects: {
      users: Prisma.$Attendance_userPayload<ExtArgs>[]
      staff: Prisma.$StaffPayload<ExtArgs>[]
      classes: Prisma.$ClassesPayload<ExtArgs>[]
      holidays: Prisma.$HolidaysPayload<ExtArgs>[]
      students: Prisma.$StudentPayload<ExtArgs>[]
      feedbacks: Prisma.$FeedbackPayload<ExtArgs>[]
      classTimetables: Prisma.$ClassTimetablePayload<ExtArgs>[]
      staffAttendances: Prisma.$StaffAttendancePayload<ExtArgs>[]
      studentAttendances: Prisma.$StudentAttendancePayload<ExtArgs>[]
      admins: Prisma.$AdminPayload<ExtArgs>[]
      Messages: Prisma.$MessagesPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      address: string
      photo: Uint8Array
    }, ExtArgs["result"]["school"]>
    composites: {}
  }

  type SchoolGetPayload<S extends boolean | null | undefined | SchoolDefaultArgs> = $Result.GetResult<Prisma.$SchoolPayload, S>

  type SchoolCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SchoolFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SchoolCountAggregateInputType | true
    }

  export interface SchoolDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['School'], meta: { name: 'School' } }
    /**
     * Find zero or one School that matches the filter.
     * @param {SchoolFindUniqueArgs} args - Arguments to find a School
     * @example
     * // Get one School
     * const school = await prisma.school.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SchoolFindUniqueArgs>(args: SelectSubset<T, SchoolFindUniqueArgs<ExtArgs>>): Prisma__SchoolClient<$Result.GetResult<Prisma.$SchoolPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one School that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SchoolFindUniqueOrThrowArgs} args - Arguments to find a School
     * @example
     * // Get one School
     * const school = await prisma.school.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SchoolFindUniqueOrThrowArgs>(args: SelectSubset<T, SchoolFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SchoolClient<$Result.GetResult<Prisma.$SchoolPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first School that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SchoolFindFirstArgs} args - Arguments to find a School
     * @example
     * // Get one School
     * const school = await prisma.school.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SchoolFindFirstArgs>(args?: SelectSubset<T, SchoolFindFirstArgs<ExtArgs>>): Prisma__SchoolClient<$Result.GetResult<Prisma.$SchoolPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first School that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SchoolFindFirstOrThrowArgs} args - Arguments to find a School
     * @example
     * // Get one School
     * const school = await prisma.school.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SchoolFindFirstOrThrowArgs>(args?: SelectSubset<T, SchoolFindFirstOrThrowArgs<ExtArgs>>): Prisma__SchoolClient<$Result.GetResult<Prisma.$SchoolPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Schools that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SchoolFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Schools
     * const schools = await prisma.school.findMany()
     * 
     * // Get first 10 Schools
     * const schools = await prisma.school.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const schoolWithIdOnly = await prisma.school.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SchoolFindManyArgs>(args?: SelectSubset<T, SchoolFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SchoolPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a School.
     * @param {SchoolCreateArgs} args - Arguments to create a School.
     * @example
     * // Create one School
     * const School = await prisma.school.create({
     *   data: {
     *     // ... data to create a School
     *   }
     * })
     * 
     */
    create<T extends SchoolCreateArgs>(args: SelectSubset<T, SchoolCreateArgs<ExtArgs>>): Prisma__SchoolClient<$Result.GetResult<Prisma.$SchoolPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Schools.
     * @param {SchoolCreateManyArgs} args - Arguments to create many Schools.
     * @example
     * // Create many Schools
     * const school = await prisma.school.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SchoolCreateManyArgs>(args?: SelectSubset<T, SchoolCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a School.
     * @param {SchoolDeleteArgs} args - Arguments to delete one School.
     * @example
     * // Delete one School
     * const School = await prisma.school.delete({
     *   where: {
     *     // ... filter to delete one School
     *   }
     * })
     * 
     */
    delete<T extends SchoolDeleteArgs>(args: SelectSubset<T, SchoolDeleteArgs<ExtArgs>>): Prisma__SchoolClient<$Result.GetResult<Prisma.$SchoolPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one School.
     * @param {SchoolUpdateArgs} args - Arguments to update one School.
     * @example
     * // Update one School
     * const school = await prisma.school.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SchoolUpdateArgs>(args: SelectSubset<T, SchoolUpdateArgs<ExtArgs>>): Prisma__SchoolClient<$Result.GetResult<Prisma.$SchoolPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Schools.
     * @param {SchoolDeleteManyArgs} args - Arguments to filter Schools to delete.
     * @example
     * // Delete a few Schools
     * const { count } = await prisma.school.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SchoolDeleteManyArgs>(args?: SelectSubset<T, SchoolDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Schools.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SchoolUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Schools
     * const school = await prisma.school.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SchoolUpdateManyArgs>(args: SelectSubset<T, SchoolUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one School.
     * @param {SchoolUpsertArgs} args - Arguments to update or create a School.
     * @example
     * // Update or create a School
     * const school = await prisma.school.upsert({
     *   create: {
     *     // ... data to create a School
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the School we want to update
     *   }
     * })
     */
    upsert<T extends SchoolUpsertArgs>(args: SelectSubset<T, SchoolUpsertArgs<ExtArgs>>): Prisma__SchoolClient<$Result.GetResult<Prisma.$SchoolPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Schools.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SchoolCountArgs} args - Arguments to filter Schools to count.
     * @example
     * // Count the number of Schools
     * const count = await prisma.school.count({
     *   where: {
     *     // ... the filter for the Schools we want to count
     *   }
     * })
    **/
    count<T extends SchoolCountArgs>(
      args?: Subset<T, SchoolCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SchoolCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a School.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SchoolAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SchoolAggregateArgs>(args: Subset<T, SchoolAggregateArgs>): Prisma.PrismaPromise<GetSchoolAggregateType<T>>

    /**
     * Group by School.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SchoolGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SchoolGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SchoolGroupByArgs['orderBy'] }
        : { orderBy?: SchoolGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SchoolGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSchoolGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the School model
   */
  readonly fields: SchoolFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for School.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SchoolClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    users<T extends School$usersArgs<ExtArgs> = {}>(args?: Subset<T, School$usersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$Attendance_userPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    staff<T extends School$staffArgs<ExtArgs> = {}>(args?: Subset<T, School$staffArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StaffPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    classes<T extends School$classesArgs<ExtArgs> = {}>(args?: Subset<T, School$classesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClassesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    holidays<T extends School$holidaysArgs<ExtArgs> = {}>(args?: Subset<T, School$holidaysArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HolidaysPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    students<T extends School$studentsArgs<ExtArgs> = {}>(args?: Subset<T, School$studentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    feedbacks<T extends School$feedbacksArgs<ExtArgs> = {}>(args?: Subset<T, School$feedbacksArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    classTimetables<T extends School$classTimetablesArgs<ExtArgs> = {}>(args?: Subset<T, School$classTimetablesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClassTimetablePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    staffAttendances<T extends School$staffAttendancesArgs<ExtArgs> = {}>(args?: Subset<T, School$staffAttendancesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StaffAttendancePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    studentAttendances<T extends School$studentAttendancesArgs<ExtArgs> = {}>(args?: Subset<T, School$studentAttendancesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudentAttendancePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    admins<T extends School$adminsArgs<ExtArgs> = {}>(args?: Subset<T, School$adminsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    Messages<T extends School$MessagesArgs<ExtArgs> = {}>(args?: Subset<T, School$MessagesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MessagesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the School model
   */
  interface SchoolFieldRefs {
    readonly id: FieldRef<"School", 'Int'>
    readonly name: FieldRef<"School", 'String'>
    readonly address: FieldRef<"School", 'String'>
    readonly photo: FieldRef<"School", 'Bytes'>
  }
    

  // Custom InputTypes
  /**
   * School findUnique
   */
  export type SchoolFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the School
     */
    select?: SchoolSelect<ExtArgs> | null
    /**
     * Omit specific fields from the School
     */
    omit?: SchoolOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SchoolInclude<ExtArgs> | null
    /**
     * Filter, which School to fetch.
     */
    where: SchoolWhereUniqueInput
  }

  /**
   * School findUniqueOrThrow
   */
  export type SchoolFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the School
     */
    select?: SchoolSelect<ExtArgs> | null
    /**
     * Omit specific fields from the School
     */
    omit?: SchoolOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SchoolInclude<ExtArgs> | null
    /**
     * Filter, which School to fetch.
     */
    where: SchoolWhereUniqueInput
  }

  /**
   * School findFirst
   */
  export type SchoolFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the School
     */
    select?: SchoolSelect<ExtArgs> | null
    /**
     * Omit specific fields from the School
     */
    omit?: SchoolOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SchoolInclude<ExtArgs> | null
    /**
     * Filter, which School to fetch.
     */
    where?: SchoolWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Schools to fetch.
     */
    orderBy?: SchoolOrderByWithRelationInput | SchoolOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Schools.
     */
    cursor?: SchoolWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Schools from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Schools.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Schools.
     */
    distinct?: SchoolScalarFieldEnum | SchoolScalarFieldEnum[]
  }

  /**
   * School findFirstOrThrow
   */
  export type SchoolFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the School
     */
    select?: SchoolSelect<ExtArgs> | null
    /**
     * Omit specific fields from the School
     */
    omit?: SchoolOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SchoolInclude<ExtArgs> | null
    /**
     * Filter, which School to fetch.
     */
    where?: SchoolWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Schools to fetch.
     */
    orderBy?: SchoolOrderByWithRelationInput | SchoolOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Schools.
     */
    cursor?: SchoolWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Schools from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Schools.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Schools.
     */
    distinct?: SchoolScalarFieldEnum | SchoolScalarFieldEnum[]
  }

  /**
   * School findMany
   */
  export type SchoolFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the School
     */
    select?: SchoolSelect<ExtArgs> | null
    /**
     * Omit specific fields from the School
     */
    omit?: SchoolOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SchoolInclude<ExtArgs> | null
    /**
     * Filter, which Schools to fetch.
     */
    where?: SchoolWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Schools to fetch.
     */
    orderBy?: SchoolOrderByWithRelationInput | SchoolOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Schools.
     */
    cursor?: SchoolWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Schools from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Schools.
     */
    skip?: number
    distinct?: SchoolScalarFieldEnum | SchoolScalarFieldEnum[]
  }

  /**
   * School create
   */
  export type SchoolCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the School
     */
    select?: SchoolSelect<ExtArgs> | null
    /**
     * Omit specific fields from the School
     */
    omit?: SchoolOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SchoolInclude<ExtArgs> | null
    /**
     * The data needed to create a School.
     */
    data: XOR<SchoolCreateInput, SchoolUncheckedCreateInput>
  }

  /**
   * School createMany
   */
  export type SchoolCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Schools.
     */
    data: SchoolCreateManyInput | SchoolCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * School update
   */
  export type SchoolUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the School
     */
    select?: SchoolSelect<ExtArgs> | null
    /**
     * Omit specific fields from the School
     */
    omit?: SchoolOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SchoolInclude<ExtArgs> | null
    /**
     * The data needed to update a School.
     */
    data: XOR<SchoolUpdateInput, SchoolUncheckedUpdateInput>
    /**
     * Choose, which School to update.
     */
    where: SchoolWhereUniqueInput
  }

  /**
   * School updateMany
   */
  export type SchoolUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Schools.
     */
    data: XOR<SchoolUpdateManyMutationInput, SchoolUncheckedUpdateManyInput>
    /**
     * Filter which Schools to update
     */
    where?: SchoolWhereInput
    /**
     * Limit how many Schools to update.
     */
    limit?: number
  }

  /**
   * School upsert
   */
  export type SchoolUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the School
     */
    select?: SchoolSelect<ExtArgs> | null
    /**
     * Omit specific fields from the School
     */
    omit?: SchoolOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SchoolInclude<ExtArgs> | null
    /**
     * The filter to search for the School to update in case it exists.
     */
    where: SchoolWhereUniqueInput
    /**
     * In case the School found by the `where` argument doesn't exist, create a new School with this data.
     */
    create: XOR<SchoolCreateInput, SchoolUncheckedCreateInput>
    /**
     * In case the School was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SchoolUpdateInput, SchoolUncheckedUpdateInput>
  }

  /**
   * School delete
   */
  export type SchoolDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the School
     */
    select?: SchoolSelect<ExtArgs> | null
    /**
     * Omit specific fields from the School
     */
    omit?: SchoolOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SchoolInclude<ExtArgs> | null
    /**
     * Filter which School to delete.
     */
    where: SchoolWhereUniqueInput
  }

  /**
   * School deleteMany
   */
  export type SchoolDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Schools to delete
     */
    where?: SchoolWhereInput
    /**
     * Limit how many Schools to delete.
     */
    limit?: number
  }

  /**
   * School.users
   */
  export type School$usersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attendance_user
     */
    select?: Attendance_userSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Attendance_user
     */
    omit?: Attendance_userOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Attendance_userInclude<ExtArgs> | null
    where?: Attendance_userWhereInput
    orderBy?: Attendance_userOrderByWithRelationInput | Attendance_userOrderByWithRelationInput[]
    cursor?: Attendance_userWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Attendance_userScalarFieldEnum | Attendance_userScalarFieldEnum[]
  }

  /**
   * School.staff
   */
  export type School$staffArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Staff
     */
    select?: StaffSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Staff
     */
    omit?: StaffOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffInclude<ExtArgs> | null
    where?: StaffWhereInput
    orderBy?: StaffOrderByWithRelationInput | StaffOrderByWithRelationInput[]
    cursor?: StaffWhereUniqueInput
    take?: number
    skip?: number
    distinct?: StaffScalarFieldEnum | StaffScalarFieldEnum[]
  }

  /**
   * School.classes
   */
  export type School$classesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Classes
     */
    select?: ClassesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Classes
     */
    omit?: ClassesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassesInclude<ExtArgs> | null
    where?: ClassesWhereInput
    orderBy?: ClassesOrderByWithRelationInput | ClassesOrderByWithRelationInput[]
    cursor?: ClassesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ClassesScalarFieldEnum | ClassesScalarFieldEnum[]
  }

  /**
   * School.holidays
   */
  export type School$holidaysArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Holidays
     */
    select?: HolidaysSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Holidays
     */
    omit?: HolidaysOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HolidaysInclude<ExtArgs> | null
    where?: HolidaysWhereInput
    orderBy?: HolidaysOrderByWithRelationInput | HolidaysOrderByWithRelationInput[]
    cursor?: HolidaysWhereUniqueInput
    take?: number
    skip?: number
    distinct?: HolidaysScalarFieldEnum | HolidaysScalarFieldEnum[]
  }

  /**
   * School.students
   */
  export type School$studentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Student
     */
    omit?: StudentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
    where?: StudentWhereInput
    orderBy?: StudentOrderByWithRelationInput | StudentOrderByWithRelationInput[]
    cursor?: StudentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: StudentScalarFieldEnum | StudentScalarFieldEnum[]
  }

  /**
   * School.feedbacks
   */
  export type School$feedbacksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Feedback
     */
    omit?: FeedbackOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackInclude<ExtArgs> | null
    where?: FeedbackWhereInput
    orderBy?: FeedbackOrderByWithRelationInput | FeedbackOrderByWithRelationInput[]
    cursor?: FeedbackWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FeedbackScalarFieldEnum | FeedbackScalarFieldEnum[]
  }

  /**
   * School.classTimetables
   */
  export type School$classTimetablesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClassTimetable
     */
    select?: ClassTimetableSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClassTimetable
     */
    omit?: ClassTimetableOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassTimetableInclude<ExtArgs> | null
    where?: ClassTimetableWhereInput
    orderBy?: ClassTimetableOrderByWithRelationInput | ClassTimetableOrderByWithRelationInput[]
    cursor?: ClassTimetableWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ClassTimetableScalarFieldEnum | ClassTimetableScalarFieldEnum[]
  }

  /**
   * School.staffAttendances
   */
  export type School$staffAttendancesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StaffAttendance
     */
    select?: StaffAttendanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StaffAttendance
     */
    omit?: StaffAttendanceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffAttendanceInclude<ExtArgs> | null
    where?: StaffAttendanceWhereInput
    orderBy?: StaffAttendanceOrderByWithRelationInput | StaffAttendanceOrderByWithRelationInput[]
    cursor?: StaffAttendanceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: StaffAttendanceScalarFieldEnum | StaffAttendanceScalarFieldEnum[]
  }

  /**
   * School.studentAttendances
   */
  export type School$studentAttendancesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentAttendance
     */
    select?: StudentAttendanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudentAttendance
     */
    omit?: StudentAttendanceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentAttendanceInclude<ExtArgs> | null
    where?: StudentAttendanceWhereInput
    orderBy?: StudentAttendanceOrderByWithRelationInput | StudentAttendanceOrderByWithRelationInput[]
    cursor?: StudentAttendanceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: StudentAttendanceScalarFieldEnum | StudentAttendanceScalarFieldEnum[]
  }

  /**
   * School.admins
   */
  export type School$adminsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Admin
     */
    omit?: AdminOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminInclude<ExtArgs> | null
    where?: AdminWhereInput
    orderBy?: AdminOrderByWithRelationInput | AdminOrderByWithRelationInput[]
    cursor?: AdminWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AdminScalarFieldEnum | AdminScalarFieldEnum[]
  }

  /**
   * School.Messages
   */
  export type School$MessagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Messages
     */
    select?: MessagesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Messages
     */
    omit?: MessagesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessagesInclude<ExtArgs> | null
    where?: MessagesWhereInput
    orderBy?: MessagesOrderByWithRelationInput | MessagesOrderByWithRelationInput[]
    cursor?: MessagesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MessagesScalarFieldEnum | MessagesScalarFieldEnum[]
  }

  /**
   * School without action
   */
  export type SchoolDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the School
     */
    select?: SchoolSelect<ExtArgs> | null
    /**
     * Omit specific fields from the School
     */
    omit?: SchoolOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SchoolInclude<ExtArgs> | null
  }


  /**
   * Model Classes
   */

  export type AggregateClasses = {
    _count: ClassesCountAggregateOutputType | null
    _avg: ClassesAvgAggregateOutputType | null
    _sum: ClassesSumAggregateOutputType | null
    _min: ClassesMinAggregateOutputType | null
    _max: ClassesMaxAggregateOutputType | null
  }

  export type ClassesAvgAggregateOutputType = {
    id: number | null
    school_id: number | null
  }

  export type ClassesSumAggregateOutputType = {
    id: number | null
    school_id: number | null
  }

  export type ClassesMinAggregateOutputType = {
    id: number | null
    class: string | null
    section: string | null
    school_id: number | null
  }

  export type ClassesMaxAggregateOutputType = {
    id: number | null
    class: string | null
    section: string | null
    school_id: number | null
  }

  export type ClassesCountAggregateOutputType = {
    id: number
    class: number
    section: number
    school_id: number
    _all: number
  }


  export type ClassesAvgAggregateInputType = {
    id?: true
    school_id?: true
  }

  export type ClassesSumAggregateInputType = {
    id?: true
    school_id?: true
  }

  export type ClassesMinAggregateInputType = {
    id?: true
    class?: true
    section?: true
    school_id?: true
  }

  export type ClassesMaxAggregateInputType = {
    id?: true
    class?: true
    section?: true
    school_id?: true
  }

  export type ClassesCountAggregateInputType = {
    id?: true
    class?: true
    section?: true
    school_id?: true
    _all?: true
  }

  export type ClassesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Classes to aggregate.
     */
    where?: ClassesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Classes to fetch.
     */
    orderBy?: ClassesOrderByWithRelationInput | ClassesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ClassesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Classes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Classes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Classes
    **/
    _count?: true | ClassesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ClassesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ClassesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ClassesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ClassesMaxAggregateInputType
  }

  export type GetClassesAggregateType<T extends ClassesAggregateArgs> = {
        [P in keyof T & keyof AggregateClasses]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateClasses[P]>
      : GetScalarType<T[P], AggregateClasses[P]>
  }




  export type ClassesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ClassesWhereInput
    orderBy?: ClassesOrderByWithAggregationInput | ClassesOrderByWithAggregationInput[]
    by: ClassesScalarFieldEnum[] | ClassesScalarFieldEnum
    having?: ClassesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ClassesCountAggregateInputType | true
    _avg?: ClassesAvgAggregateInputType
    _sum?: ClassesSumAggregateInputType
    _min?: ClassesMinAggregateInputType
    _max?: ClassesMaxAggregateInputType
  }

  export type ClassesGroupByOutputType = {
    id: number
    class: string
    section: string
    school_id: number
    _count: ClassesCountAggregateOutputType | null
    _avg: ClassesAvgAggregateOutputType | null
    _sum: ClassesSumAggregateOutputType | null
    _min: ClassesMinAggregateOutputType | null
    _max: ClassesMaxAggregateOutputType | null
  }

  type GetClassesGroupByPayload<T extends ClassesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ClassesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ClassesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ClassesGroupByOutputType[P]>
            : GetScalarType<T[P], ClassesGroupByOutputType[P]>
        }
      >
    >


  export type ClassesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    class?: boolean
    section?: boolean
    school_id?: boolean
    school?: boolean | SchoolDefaultArgs<ExtArgs>
    holidays?: boolean | Classes$holidaysArgs<ExtArgs>
    students?: boolean | Classes$studentsArgs<ExtArgs>
    studentAttendance?: boolean | Classes$studentAttendanceArgs<ExtArgs>
    classTimetables?: boolean | Classes$classTimetablesArgs<ExtArgs>
    feedbacks?: boolean | Classes$feedbacksArgs<ExtArgs>
    _count?: boolean | ClassesCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["classes"]>



  export type ClassesSelectScalar = {
    id?: boolean
    class?: boolean
    section?: boolean
    school_id?: boolean
  }

  export type ClassesOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "class" | "section" | "school_id", ExtArgs["result"]["classes"]>
  export type ClassesInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    school?: boolean | SchoolDefaultArgs<ExtArgs>
    holidays?: boolean | Classes$holidaysArgs<ExtArgs>
    students?: boolean | Classes$studentsArgs<ExtArgs>
    studentAttendance?: boolean | Classes$studentAttendanceArgs<ExtArgs>
    classTimetables?: boolean | Classes$classTimetablesArgs<ExtArgs>
    feedbacks?: boolean | Classes$feedbacksArgs<ExtArgs>
    _count?: boolean | ClassesCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $ClassesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Classes"
    objects: {
      school: Prisma.$SchoolPayload<ExtArgs>
      holidays: Prisma.$HolidaysPayload<ExtArgs>[]
      students: Prisma.$StudentPayload<ExtArgs>[]
      studentAttendance: Prisma.$StudentAttendancePayload<ExtArgs>[]
      classTimetables: Prisma.$ClassTimetablePayload<ExtArgs>[]
      feedbacks: Prisma.$FeedbackPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      class: string
      section: string
      school_id: number
    }, ExtArgs["result"]["classes"]>
    composites: {}
  }

  type ClassesGetPayload<S extends boolean | null | undefined | ClassesDefaultArgs> = $Result.GetResult<Prisma.$ClassesPayload, S>

  type ClassesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ClassesFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ClassesCountAggregateInputType | true
    }

  export interface ClassesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Classes'], meta: { name: 'Classes' } }
    /**
     * Find zero or one Classes that matches the filter.
     * @param {ClassesFindUniqueArgs} args - Arguments to find a Classes
     * @example
     * // Get one Classes
     * const classes = await prisma.classes.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ClassesFindUniqueArgs>(args: SelectSubset<T, ClassesFindUniqueArgs<ExtArgs>>): Prisma__ClassesClient<$Result.GetResult<Prisma.$ClassesPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Classes that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ClassesFindUniqueOrThrowArgs} args - Arguments to find a Classes
     * @example
     * // Get one Classes
     * const classes = await prisma.classes.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ClassesFindUniqueOrThrowArgs>(args: SelectSubset<T, ClassesFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ClassesClient<$Result.GetResult<Prisma.$ClassesPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Classes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClassesFindFirstArgs} args - Arguments to find a Classes
     * @example
     * // Get one Classes
     * const classes = await prisma.classes.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ClassesFindFirstArgs>(args?: SelectSubset<T, ClassesFindFirstArgs<ExtArgs>>): Prisma__ClassesClient<$Result.GetResult<Prisma.$ClassesPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Classes that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClassesFindFirstOrThrowArgs} args - Arguments to find a Classes
     * @example
     * // Get one Classes
     * const classes = await prisma.classes.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ClassesFindFirstOrThrowArgs>(args?: SelectSubset<T, ClassesFindFirstOrThrowArgs<ExtArgs>>): Prisma__ClassesClient<$Result.GetResult<Prisma.$ClassesPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Classes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClassesFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Classes
     * const classes = await prisma.classes.findMany()
     * 
     * // Get first 10 Classes
     * const classes = await prisma.classes.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const classesWithIdOnly = await prisma.classes.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ClassesFindManyArgs>(args?: SelectSubset<T, ClassesFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClassesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Classes.
     * @param {ClassesCreateArgs} args - Arguments to create a Classes.
     * @example
     * // Create one Classes
     * const Classes = await prisma.classes.create({
     *   data: {
     *     // ... data to create a Classes
     *   }
     * })
     * 
     */
    create<T extends ClassesCreateArgs>(args: SelectSubset<T, ClassesCreateArgs<ExtArgs>>): Prisma__ClassesClient<$Result.GetResult<Prisma.$ClassesPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Classes.
     * @param {ClassesCreateManyArgs} args - Arguments to create many Classes.
     * @example
     * // Create many Classes
     * const classes = await prisma.classes.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ClassesCreateManyArgs>(args?: SelectSubset<T, ClassesCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Classes.
     * @param {ClassesDeleteArgs} args - Arguments to delete one Classes.
     * @example
     * // Delete one Classes
     * const Classes = await prisma.classes.delete({
     *   where: {
     *     // ... filter to delete one Classes
     *   }
     * })
     * 
     */
    delete<T extends ClassesDeleteArgs>(args: SelectSubset<T, ClassesDeleteArgs<ExtArgs>>): Prisma__ClassesClient<$Result.GetResult<Prisma.$ClassesPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Classes.
     * @param {ClassesUpdateArgs} args - Arguments to update one Classes.
     * @example
     * // Update one Classes
     * const classes = await prisma.classes.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ClassesUpdateArgs>(args: SelectSubset<T, ClassesUpdateArgs<ExtArgs>>): Prisma__ClassesClient<$Result.GetResult<Prisma.$ClassesPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Classes.
     * @param {ClassesDeleteManyArgs} args - Arguments to filter Classes to delete.
     * @example
     * // Delete a few Classes
     * const { count } = await prisma.classes.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ClassesDeleteManyArgs>(args?: SelectSubset<T, ClassesDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Classes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClassesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Classes
     * const classes = await prisma.classes.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ClassesUpdateManyArgs>(args: SelectSubset<T, ClassesUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Classes.
     * @param {ClassesUpsertArgs} args - Arguments to update or create a Classes.
     * @example
     * // Update or create a Classes
     * const classes = await prisma.classes.upsert({
     *   create: {
     *     // ... data to create a Classes
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Classes we want to update
     *   }
     * })
     */
    upsert<T extends ClassesUpsertArgs>(args: SelectSubset<T, ClassesUpsertArgs<ExtArgs>>): Prisma__ClassesClient<$Result.GetResult<Prisma.$ClassesPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Classes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClassesCountArgs} args - Arguments to filter Classes to count.
     * @example
     * // Count the number of Classes
     * const count = await prisma.classes.count({
     *   where: {
     *     // ... the filter for the Classes we want to count
     *   }
     * })
    **/
    count<T extends ClassesCountArgs>(
      args?: Subset<T, ClassesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ClassesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Classes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClassesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ClassesAggregateArgs>(args: Subset<T, ClassesAggregateArgs>): Prisma.PrismaPromise<GetClassesAggregateType<T>>

    /**
     * Group by Classes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClassesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ClassesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ClassesGroupByArgs['orderBy'] }
        : { orderBy?: ClassesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ClassesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetClassesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Classes model
   */
  readonly fields: ClassesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Classes.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ClassesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    school<T extends SchoolDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SchoolDefaultArgs<ExtArgs>>): Prisma__SchoolClient<$Result.GetResult<Prisma.$SchoolPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    holidays<T extends Classes$holidaysArgs<ExtArgs> = {}>(args?: Subset<T, Classes$holidaysArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HolidaysPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    students<T extends Classes$studentsArgs<ExtArgs> = {}>(args?: Subset<T, Classes$studentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    studentAttendance<T extends Classes$studentAttendanceArgs<ExtArgs> = {}>(args?: Subset<T, Classes$studentAttendanceArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudentAttendancePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    classTimetables<T extends Classes$classTimetablesArgs<ExtArgs> = {}>(args?: Subset<T, Classes$classTimetablesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClassTimetablePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    feedbacks<T extends Classes$feedbacksArgs<ExtArgs> = {}>(args?: Subset<T, Classes$feedbacksArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Classes model
   */
  interface ClassesFieldRefs {
    readonly id: FieldRef<"Classes", 'Int'>
    readonly class: FieldRef<"Classes", 'String'>
    readonly section: FieldRef<"Classes", 'String'>
    readonly school_id: FieldRef<"Classes", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Classes findUnique
   */
  export type ClassesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Classes
     */
    select?: ClassesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Classes
     */
    omit?: ClassesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassesInclude<ExtArgs> | null
    /**
     * Filter, which Classes to fetch.
     */
    where: ClassesWhereUniqueInput
  }

  /**
   * Classes findUniqueOrThrow
   */
  export type ClassesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Classes
     */
    select?: ClassesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Classes
     */
    omit?: ClassesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassesInclude<ExtArgs> | null
    /**
     * Filter, which Classes to fetch.
     */
    where: ClassesWhereUniqueInput
  }

  /**
   * Classes findFirst
   */
  export type ClassesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Classes
     */
    select?: ClassesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Classes
     */
    omit?: ClassesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassesInclude<ExtArgs> | null
    /**
     * Filter, which Classes to fetch.
     */
    where?: ClassesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Classes to fetch.
     */
    orderBy?: ClassesOrderByWithRelationInput | ClassesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Classes.
     */
    cursor?: ClassesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Classes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Classes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Classes.
     */
    distinct?: ClassesScalarFieldEnum | ClassesScalarFieldEnum[]
  }

  /**
   * Classes findFirstOrThrow
   */
  export type ClassesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Classes
     */
    select?: ClassesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Classes
     */
    omit?: ClassesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassesInclude<ExtArgs> | null
    /**
     * Filter, which Classes to fetch.
     */
    where?: ClassesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Classes to fetch.
     */
    orderBy?: ClassesOrderByWithRelationInput | ClassesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Classes.
     */
    cursor?: ClassesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Classes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Classes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Classes.
     */
    distinct?: ClassesScalarFieldEnum | ClassesScalarFieldEnum[]
  }

  /**
   * Classes findMany
   */
  export type ClassesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Classes
     */
    select?: ClassesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Classes
     */
    omit?: ClassesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassesInclude<ExtArgs> | null
    /**
     * Filter, which Classes to fetch.
     */
    where?: ClassesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Classes to fetch.
     */
    orderBy?: ClassesOrderByWithRelationInput | ClassesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Classes.
     */
    cursor?: ClassesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Classes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Classes.
     */
    skip?: number
    distinct?: ClassesScalarFieldEnum | ClassesScalarFieldEnum[]
  }

  /**
   * Classes create
   */
  export type ClassesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Classes
     */
    select?: ClassesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Classes
     */
    omit?: ClassesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassesInclude<ExtArgs> | null
    /**
     * The data needed to create a Classes.
     */
    data: XOR<ClassesCreateInput, ClassesUncheckedCreateInput>
  }

  /**
   * Classes createMany
   */
  export type ClassesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Classes.
     */
    data: ClassesCreateManyInput | ClassesCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Classes update
   */
  export type ClassesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Classes
     */
    select?: ClassesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Classes
     */
    omit?: ClassesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassesInclude<ExtArgs> | null
    /**
     * The data needed to update a Classes.
     */
    data: XOR<ClassesUpdateInput, ClassesUncheckedUpdateInput>
    /**
     * Choose, which Classes to update.
     */
    where: ClassesWhereUniqueInput
  }

  /**
   * Classes updateMany
   */
  export type ClassesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Classes.
     */
    data: XOR<ClassesUpdateManyMutationInput, ClassesUncheckedUpdateManyInput>
    /**
     * Filter which Classes to update
     */
    where?: ClassesWhereInput
    /**
     * Limit how many Classes to update.
     */
    limit?: number
  }

  /**
   * Classes upsert
   */
  export type ClassesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Classes
     */
    select?: ClassesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Classes
     */
    omit?: ClassesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassesInclude<ExtArgs> | null
    /**
     * The filter to search for the Classes to update in case it exists.
     */
    where: ClassesWhereUniqueInput
    /**
     * In case the Classes found by the `where` argument doesn't exist, create a new Classes with this data.
     */
    create: XOR<ClassesCreateInput, ClassesUncheckedCreateInput>
    /**
     * In case the Classes was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ClassesUpdateInput, ClassesUncheckedUpdateInput>
  }

  /**
   * Classes delete
   */
  export type ClassesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Classes
     */
    select?: ClassesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Classes
     */
    omit?: ClassesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassesInclude<ExtArgs> | null
    /**
     * Filter which Classes to delete.
     */
    where: ClassesWhereUniqueInput
  }

  /**
   * Classes deleteMany
   */
  export type ClassesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Classes to delete
     */
    where?: ClassesWhereInput
    /**
     * Limit how many Classes to delete.
     */
    limit?: number
  }

  /**
   * Classes.holidays
   */
  export type Classes$holidaysArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Holidays
     */
    select?: HolidaysSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Holidays
     */
    omit?: HolidaysOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HolidaysInclude<ExtArgs> | null
    where?: HolidaysWhereInput
    orderBy?: HolidaysOrderByWithRelationInput | HolidaysOrderByWithRelationInput[]
    cursor?: HolidaysWhereUniqueInput
    take?: number
    skip?: number
    distinct?: HolidaysScalarFieldEnum | HolidaysScalarFieldEnum[]
  }

  /**
   * Classes.students
   */
  export type Classes$studentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Student
     */
    omit?: StudentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
    where?: StudentWhereInput
    orderBy?: StudentOrderByWithRelationInput | StudentOrderByWithRelationInput[]
    cursor?: StudentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: StudentScalarFieldEnum | StudentScalarFieldEnum[]
  }

  /**
   * Classes.studentAttendance
   */
  export type Classes$studentAttendanceArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentAttendance
     */
    select?: StudentAttendanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudentAttendance
     */
    omit?: StudentAttendanceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentAttendanceInclude<ExtArgs> | null
    where?: StudentAttendanceWhereInput
    orderBy?: StudentAttendanceOrderByWithRelationInput | StudentAttendanceOrderByWithRelationInput[]
    cursor?: StudentAttendanceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: StudentAttendanceScalarFieldEnum | StudentAttendanceScalarFieldEnum[]
  }

  /**
   * Classes.classTimetables
   */
  export type Classes$classTimetablesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClassTimetable
     */
    select?: ClassTimetableSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClassTimetable
     */
    omit?: ClassTimetableOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassTimetableInclude<ExtArgs> | null
    where?: ClassTimetableWhereInput
    orderBy?: ClassTimetableOrderByWithRelationInput | ClassTimetableOrderByWithRelationInput[]
    cursor?: ClassTimetableWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ClassTimetableScalarFieldEnum | ClassTimetableScalarFieldEnum[]
  }

  /**
   * Classes.feedbacks
   */
  export type Classes$feedbacksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Feedback
     */
    omit?: FeedbackOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackInclude<ExtArgs> | null
    where?: FeedbackWhereInput
    orderBy?: FeedbackOrderByWithRelationInput | FeedbackOrderByWithRelationInput[]
    cursor?: FeedbackWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FeedbackScalarFieldEnum | FeedbackScalarFieldEnum[]
  }

  /**
   * Classes without action
   */
  export type ClassesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Classes
     */
    select?: ClassesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Classes
     */
    omit?: ClassesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassesInclude<ExtArgs> | null
  }


  /**
   * Model Holidays
   */

  export type AggregateHolidays = {
    _count: HolidaysCountAggregateOutputType | null
    _avg: HolidaysAvgAggregateOutputType | null
    _sum: HolidaysSumAggregateOutputType | null
    _min: HolidaysMinAggregateOutputType | null
    _max: HolidaysMaxAggregateOutputType | null
  }

  export type HolidaysAvgAggregateOutputType = {
    id: number | null
    school_id: number | null
  }

  export type HolidaysSumAggregateOutputType = {
    id: number | null
    school_id: number | null
  }

  export type HolidaysMinAggregateOutputType = {
    id: number | null
    date: Date | null
    reason: string | null
    school_id: number | null
    fn: string | null
    an: string | null
  }

  export type HolidaysMaxAggregateOutputType = {
    id: number | null
    date: Date | null
    reason: string | null
    school_id: number | null
    fn: string | null
    an: string | null
  }

  export type HolidaysCountAggregateOutputType = {
    id: number
    date: number
    reason: number
    school_id: number
    class_ids: number
    fn: number
    an: number
    _all: number
  }


  export type HolidaysAvgAggregateInputType = {
    id?: true
    school_id?: true
  }

  export type HolidaysSumAggregateInputType = {
    id?: true
    school_id?: true
  }

  export type HolidaysMinAggregateInputType = {
    id?: true
    date?: true
    reason?: true
    school_id?: true
    fn?: true
    an?: true
  }

  export type HolidaysMaxAggregateInputType = {
    id?: true
    date?: true
    reason?: true
    school_id?: true
    fn?: true
    an?: true
  }

  export type HolidaysCountAggregateInputType = {
    id?: true
    date?: true
    reason?: true
    school_id?: true
    class_ids?: true
    fn?: true
    an?: true
    _all?: true
  }

  export type HolidaysAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Holidays to aggregate.
     */
    where?: HolidaysWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Holidays to fetch.
     */
    orderBy?: HolidaysOrderByWithRelationInput | HolidaysOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: HolidaysWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Holidays from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Holidays.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Holidays
    **/
    _count?: true | HolidaysCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: HolidaysAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: HolidaysSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: HolidaysMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: HolidaysMaxAggregateInputType
  }

  export type GetHolidaysAggregateType<T extends HolidaysAggregateArgs> = {
        [P in keyof T & keyof AggregateHolidays]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateHolidays[P]>
      : GetScalarType<T[P], AggregateHolidays[P]>
  }




  export type HolidaysGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: HolidaysWhereInput
    orderBy?: HolidaysOrderByWithAggregationInput | HolidaysOrderByWithAggregationInput[]
    by: HolidaysScalarFieldEnum[] | HolidaysScalarFieldEnum
    having?: HolidaysScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: HolidaysCountAggregateInputType | true
    _avg?: HolidaysAvgAggregateInputType
    _sum?: HolidaysSumAggregateInputType
    _min?: HolidaysMinAggregateInputType
    _max?: HolidaysMaxAggregateInputType
  }

  export type HolidaysGroupByOutputType = {
    id: number
    date: Date
    reason: string
    school_id: number | null
    class_ids: JsonValue
    fn: string | null
    an: string
    _count: HolidaysCountAggregateOutputType | null
    _avg: HolidaysAvgAggregateOutputType | null
    _sum: HolidaysSumAggregateOutputType | null
    _min: HolidaysMinAggregateOutputType | null
    _max: HolidaysMaxAggregateOutputType | null
  }

  type GetHolidaysGroupByPayload<T extends HolidaysGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<HolidaysGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof HolidaysGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], HolidaysGroupByOutputType[P]>
            : GetScalarType<T[P], HolidaysGroupByOutputType[P]>
        }
      >
    >


  export type HolidaysSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    date?: boolean
    reason?: boolean
    school_id?: boolean
    class_ids?: boolean
    fn?: boolean
    an?: boolean
    school?: boolean | Holidays$schoolArgs<ExtArgs>
    classes?: boolean | Holidays$classesArgs<ExtArgs>
    _count?: boolean | HolidaysCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["holidays"]>



  export type HolidaysSelectScalar = {
    id?: boolean
    date?: boolean
    reason?: boolean
    school_id?: boolean
    class_ids?: boolean
    fn?: boolean
    an?: boolean
  }

  export type HolidaysOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "date" | "reason" | "school_id" | "class_ids" | "fn" | "an", ExtArgs["result"]["holidays"]>
  export type HolidaysInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    school?: boolean | Holidays$schoolArgs<ExtArgs>
    classes?: boolean | Holidays$classesArgs<ExtArgs>
    _count?: boolean | HolidaysCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $HolidaysPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Holidays"
    objects: {
      school: Prisma.$SchoolPayload<ExtArgs> | null
      classes: Prisma.$ClassesPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      date: Date
      reason: string
      school_id: number | null
      class_ids: Prisma.JsonValue
      fn: string | null
      an: string
    }, ExtArgs["result"]["holidays"]>
    composites: {}
  }

  type HolidaysGetPayload<S extends boolean | null | undefined | HolidaysDefaultArgs> = $Result.GetResult<Prisma.$HolidaysPayload, S>

  type HolidaysCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<HolidaysFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: HolidaysCountAggregateInputType | true
    }

  export interface HolidaysDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Holidays'], meta: { name: 'Holidays' } }
    /**
     * Find zero or one Holidays that matches the filter.
     * @param {HolidaysFindUniqueArgs} args - Arguments to find a Holidays
     * @example
     * // Get one Holidays
     * const holidays = await prisma.holidays.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends HolidaysFindUniqueArgs>(args: SelectSubset<T, HolidaysFindUniqueArgs<ExtArgs>>): Prisma__HolidaysClient<$Result.GetResult<Prisma.$HolidaysPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Holidays that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {HolidaysFindUniqueOrThrowArgs} args - Arguments to find a Holidays
     * @example
     * // Get one Holidays
     * const holidays = await prisma.holidays.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends HolidaysFindUniqueOrThrowArgs>(args: SelectSubset<T, HolidaysFindUniqueOrThrowArgs<ExtArgs>>): Prisma__HolidaysClient<$Result.GetResult<Prisma.$HolidaysPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Holidays that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HolidaysFindFirstArgs} args - Arguments to find a Holidays
     * @example
     * // Get one Holidays
     * const holidays = await prisma.holidays.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends HolidaysFindFirstArgs>(args?: SelectSubset<T, HolidaysFindFirstArgs<ExtArgs>>): Prisma__HolidaysClient<$Result.GetResult<Prisma.$HolidaysPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Holidays that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HolidaysFindFirstOrThrowArgs} args - Arguments to find a Holidays
     * @example
     * // Get one Holidays
     * const holidays = await prisma.holidays.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends HolidaysFindFirstOrThrowArgs>(args?: SelectSubset<T, HolidaysFindFirstOrThrowArgs<ExtArgs>>): Prisma__HolidaysClient<$Result.GetResult<Prisma.$HolidaysPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Holidays that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HolidaysFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Holidays
     * const holidays = await prisma.holidays.findMany()
     * 
     * // Get first 10 Holidays
     * const holidays = await prisma.holidays.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const holidaysWithIdOnly = await prisma.holidays.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends HolidaysFindManyArgs>(args?: SelectSubset<T, HolidaysFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HolidaysPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Holidays.
     * @param {HolidaysCreateArgs} args - Arguments to create a Holidays.
     * @example
     * // Create one Holidays
     * const Holidays = await prisma.holidays.create({
     *   data: {
     *     // ... data to create a Holidays
     *   }
     * })
     * 
     */
    create<T extends HolidaysCreateArgs>(args: SelectSubset<T, HolidaysCreateArgs<ExtArgs>>): Prisma__HolidaysClient<$Result.GetResult<Prisma.$HolidaysPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Holidays.
     * @param {HolidaysCreateManyArgs} args - Arguments to create many Holidays.
     * @example
     * // Create many Holidays
     * const holidays = await prisma.holidays.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends HolidaysCreateManyArgs>(args?: SelectSubset<T, HolidaysCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Holidays.
     * @param {HolidaysDeleteArgs} args - Arguments to delete one Holidays.
     * @example
     * // Delete one Holidays
     * const Holidays = await prisma.holidays.delete({
     *   where: {
     *     // ... filter to delete one Holidays
     *   }
     * })
     * 
     */
    delete<T extends HolidaysDeleteArgs>(args: SelectSubset<T, HolidaysDeleteArgs<ExtArgs>>): Prisma__HolidaysClient<$Result.GetResult<Prisma.$HolidaysPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Holidays.
     * @param {HolidaysUpdateArgs} args - Arguments to update one Holidays.
     * @example
     * // Update one Holidays
     * const holidays = await prisma.holidays.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends HolidaysUpdateArgs>(args: SelectSubset<T, HolidaysUpdateArgs<ExtArgs>>): Prisma__HolidaysClient<$Result.GetResult<Prisma.$HolidaysPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Holidays.
     * @param {HolidaysDeleteManyArgs} args - Arguments to filter Holidays to delete.
     * @example
     * // Delete a few Holidays
     * const { count } = await prisma.holidays.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends HolidaysDeleteManyArgs>(args?: SelectSubset<T, HolidaysDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Holidays.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HolidaysUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Holidays
     * const holidays = await prisma.holidays.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends HolidaysUpdateManyArgs>(args: SelectSubset<T, HolidaysUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Holidays.
     * @param {HolidaysUpsertArgs} args - Arguments to update or create a Holidays.
     * @example
     * // Update or create a Holidays
     * const holidays = await prisma.holidays.upsert({
     *   create: {
     *     // ... data to create a Holidays
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Holidays we want to update
     *   }
     * })
     */
    upsert<T extends HolidaysUpsertArgs>(args: SelectSubset<T, HolidaysUpsertArgs<ExtArgs>>): Prisma__HolidaysClient<$Result.GetResult<Prisma.$HolidaysPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Holidays.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HolidaysCountArgs} args - Arguments to filter Holidays to count.
     * @example
     * // Count the number of Holidays
     * const count = await prisma.holidays.count({
     *   where: {
     *     // ... the filter for the Holidays we want to count
     *   }
     * })
    **/
    count<T extends HolidaysCountArgs>(
      args?: Subset<T, HolidaysCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], HolidaysCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Holidays.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HolidaysAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends HolidaysAggregateArgs>(args: Subset<T, HolidaysAggregateArgs>): Prisma.PrismaPromise<GetHolidaysAggregateType<T>>

    /**
     * Group by Holidays.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HolidaysGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends HolidaysGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: HolidaysGroupByArgs['orderBy'] }
        : { orderBy?: HolidaysGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, HolidaysGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetHolidaysGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Holidays model
   */
  readonly fields: HolidaysFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Holidays.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__HolidaysClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    school<T extends Holidays$schoolArgs<ExtArgs> = {}>(args?: Subset<T, Holidays$schoolArgs<ExtArgs>>): Prisma__SchoolClient<$Result.GetResult<Prisma.$SchoolPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    classes<T extends Holidays$classesArgs<ExtArgs> = {}>(args?: Subset<T, Holidays$classesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClassesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Holidays model
   */
  interface HolidaysFieldRefs {
    readonly id: FieldRef<"Holidays", 'Int'>
    readonly date: FieldRef<"Holidays", 'DateTime'>
    readonly reason: FieldRef<"Holidays", 'String'>
    readonly school_id: FieldRef<"Holidays", 'Int'>
    readonly class_ids: FieldRef<"Holidays", 'Json'>
    readonly fn: FieldRef<"Holidays", 'String'>
    readonly an: FieldRef<"Holidays", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Holidays findUnique
   */
  export type HolidaysFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Holidays
     */
    select?: HolidaysSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Holidays
     */
    omit?: HolidaysOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HolidaysInclude<ExtArgs> | null
    /**
     * Filter, which Holidays to fetch.
     */
    where: HolidaysWhereUniqueInput
  }

  /**
   * Holidays findUniqueOrThrow
   */
  export type HolidaysFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Holidays
     */
    select?: HolidaysSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Holidays
     */
    omit?: HolidaysOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HolidaysInclude<ExtArgs> | null
    /**
     * Filter, which Holidays to fetch.
     */
    where: HolidaysWhereUniqueInput
  }

  /**
   * Holidays findFirst
   */
  export type HolidaysFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Holidays
     */
    select?: HolidaysSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Holidays
     */
    omit?: HolidaysOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HolidaysInclude<ExtArgs> | null
    /**
     * Filter, which Holidays to fetch.
     */
    where?: HolidaysWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Holidays to fetch.
     */
    orderBy?: HolidaysOrderByWithRelationInput | HolidaysOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Holidays.
     */
    cursor?: HolidaysWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Holidays from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Holidays.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Holidays.
     */
    distinct?: HolidaysScalarFieldEnum | HolidaysScalarFieldEnum[]
  }

  /**
   * Holidays findFirstOrThrow
   */
  export type HolidaysFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Holidays
     */
    select?: HolidaysSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Holidays
     */
    omit?: HolidaysOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HolidaysInclude<ExtArgs> | null
    /**
     * Filter, which Holidays to fetch.
     */
    where?: HolidaysWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Holidays to fetch.
     */
    orderBy?: HolidaysOrderByWithRelationInput | HolidaysOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Holidays.
     */
    cursor?: HolidaysWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Holidays from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Holidays.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Holidays.
     */
    distinct?: HolidaysScalarFieldEnum | HolidaysScalarFieldEnum[]
  }

  /**
   * Holidays findMany
   */
  export type HolidaysFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Holidays
     */
    select?: HolidaysSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Holidays
     */
    omit?: HolidaysOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HolidaysInclude<ExtArgs> | null
    /**
     * Filter, which Holidays to fetch.
     */
    where?: HolidaysWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Holidays to fetch.
     */
    orderBy?: HolidaysOrderByWithRelationInput | HolidaysOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Holidays.
     */
    cursor?: HolidaysWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Holidays from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Holidays.
     */
    skip?: number
    distinct?: HolidaysScalarFieldEnum | HolidaysScalarFieldEnum[]
  }

  /**
   * Holidays create
   */
  export type HolidaysCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Holidays
     */
    select?: HolidaysSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Holidays
     */
    omit?: HolidaysOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HolidaysInclude<ExtArgs> | null
    /**
     * The data needed to create a Holidays.
     */
    data: XOR<HolidaysCreateInput, HolidaysUncheckedCreateInput>
  }

  /**
   * Holidays createMany
   */
  export type HolidaysCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Holidays.
     */
    data: HolidaysCreateManyInput | HolidaysCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Holidays update
   */
  export type HolidaysUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Holidays
     */
    select?: HolidaysSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Holidays
     */
    omit?: HolidaysOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HolidaysInclude<ExtArgs> | null
    /**
     * The data needed to update a Holidays.
     */
    data: XOR<HolidaysUpdateInput, HolidaysUncheckedUpdateInput>
    /**
     * Choose, which Holidays to update.
     */
    where: HolidaysWhereUniqueInput
  }

  /**
   * Holidays updateMany
   */
  export type HolidaysUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Holidays.
     */
    data: XOR<HolidaysUpdateManyMutationInput, HolidaysUncheckedUpdateManyInput>
    /**
     * Filter which Holidays to update
     */
    where?: HolidaysWhereInput
    /**
     * Limit how many Holidays to update.
     */
    limit?: number
  }

  /**
   * Holidays upsert
   */
  export type HolidaysUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Holidays
     */
    select?: HolidaysSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Holidays
     */
    omit?: HolidaysOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HolidaysInclude<ExtArgs> | null
    /**
     * The filter to search for the Holidays to update in case it exists.
     */
    where: HolidaysWhereUniqueInput
    /**
     * In case the Holidays found by the `where` argument doesn't exist, create a new Holidays with this data.
     */
    create: XOR<HolidaysCreateInput, HolidaysUncheckedCreateInput>
    /**
     * In case the Holidays was found with the provided `where` argument, update it with this data.
     */
    update: XOR<HolidaysUpdateInput, HolidaysUncheckedUpdateInput>
  }

  /**
   * Holidays delete
   */
  export type HolidaysDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Holidays
     */
    select?: HolidaysSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Holidays
     */
    omit?: HolidaysOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HolidaysInclude<ExtArgs> | null
    /**
     * Filter which Holidays to delete.
     */
    where: HolidaysWhereUniqueInput
  }

  /**
   * Holidays deleteMany
   */
  export type HolidaysDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Holidays to delete
     */
    where?: HolidaysWhereInput
    /**
     * Limit how many Holidays to delete.
     */
    limit?: number
  }

  /**
   * Holidays.school
   */
  export type Holidays$schoolArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the School
     */
    select?: SchoolSelect<ExtArgs> | null
    /**
     * Omit specific fields from the School
     */
    omit?: SchoolOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SchoolInclude<ExtArgs> | null
    where?: SchoolWhereInput
  }

  /**
   * Holidays.classes
   */
  export type Holidays$classesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Classes
     */
    select?: ClassesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Classes
     */
    omit?: ClassesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassesInclude<ExtArgs> | null
    where?: ClassesWhereInput
    orderBy?: ClassesOrderByWithRelationInput | ClassesOrderByWithRelationInput[]
    cursor?: ClassesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ClassesScalarFieldEnum | ClassesScalarFieldEnum[]
  }

  /**
   * Holidays without action
   */
  export type HolidaysDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Holidays
     */
    select?: HolidaysSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Holidays
     */
    omit?: HolidaysOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HolidaysInclude<ExtArgs> | null
  }


  /**
   * Model Staff
   */

  export type AggregateStaff = {
    _count: StaffCountAggregateOutputType | null
    _avg: StaffAvgAggregateOutputType | null
    _sum: StaffSumAggregateOutputType | null
    _min: StaffMinAggregateOutputType | null
    _max: StaffMaxAggregateOutputType | null
  }

  export type StaffAvgAggregateOutputType = {
    id: number | null
    school_id: number | null
  }

  export type StaffSumAggregateOutputType = {
    id: number | null
    school_id: number | null
  }

  export type StaffMinAggregateOutputType = {
    id: number | null
    username: string | null
    designation: string | null
    name: string | null
    email: string | null
    gender: $Enums.Gender | null
    mobile: string | null
    school_id: number | null
    password: string | null
  }

  export type StaffMaxAggregateOutputType = {
    id: number | null
    username: string | null
    designation: string | null
    name: string | null
    email: string | null
    gender: $Enums.Gender | null
    mobile: string | null
    school_id: number | null
    password: string | null
  }

  export type StaffCountAggregateOutputType = {
    id: number
    username: number
    designation: number
    name: number
    email: number
    gender: number
    mobile: number
    school_id: number
    password: number
    _all: number
  }


  export type StaffAvgAggregateInputType = {
    id?: true
    school_id?: true
  }

  export type StaffSumAggregateInputType = {
    id?: true
    school_id?: true
  }

  export type StaffMinAggregateInputType = {
    id?: true
    username?: true
    designation?: true
    name?: true
    email?: true
    gender?: true
    mobile?: true
    school_id?: true
    password?: true
  }

  export type StaffMaxAggregateInputType = {
    id?: true
    username?: true
    designation?: true
    name?: true
    email?: true
    gender?: true
    mobile?: true
    school_id?: true
    password?: true
  }

  export type StaffCountAggregateInputType = {
    id?: true
    username?: true
    designation?: true
    name?: true
    email?: true
    gender?: true
    mobile?: true
    school_id?: true
    password?: true
    _all?: true
  }

  export type StaffAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Staff to aggregate.
     */
    where?: StaffWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Staff to fetch.
     */
    orderBy?: StaffOrderByWithRelationInput | StaffOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: StaffWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Staff from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Staff.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Staff
    **/
    _count?: true | StaffCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: StaffAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: StaffSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StaffMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StaffMaxAggregateInputType
  }

  export type GetStaffAggregateType<T extends StaffAggregateArgs> = {
        [P in keyof T & keyof AggregateStaff]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStaff[P]>
      : GetScalarType<T[P], AggregateStaff[P]>
  }




  export type StaffGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StaffWhereInput
    orderBy?: StaffOrderByWithAggregationInput | StaffOrderByWithAggregationInput[]
    by: StaffScalarFieldEnum[] | StaffScalarFieldEnum
    having?: StaffScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StaffCountAggregateInputType | true
    _avg?: StaffAvgAggregateInputType
    _sum?: StaffSumAggregateInputType
    _min?: StaffMinAggregateInputType
    _max?: StaffMaxAggregateInputType
  }

  export type StaffGroupByOutputType = {
    id: number
    username: string
    designation: string
    name: string | null
    email: string
    gender: $Enums.Gender | null
    mobile: string
    school_id: number
    password: string
    _count: StaffCountAggregateOutputType | null
    _avg: StaffAvgAggregateOutputType | null
    _sum: StaffSumAggregateOutputType | null
    _min: StaffMinAggregateOutputType | null
    _max: StaffMaxAggregateOutputType | null
  }

  type GetStaffGroupByPayload<T extends StaffGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<StaffGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StaffGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StaffGroupByOutputType[P]>
            : GetScalarType<T[P], StaffGroupByOutputType[P]>
        }
      >
    >


  export type StaffSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    username?: boolean
    designation?: boolean
    name?: boolean
    email?: boolean
    gender?: boolean
    mobile?: boolean
    school_id?: boolean
    password?: boolean
    school?: boolean | SchoolDefaultArgs<ExtArgs>
    user?: boolean | Attendance_userDefaultArgs<ExtArgs>
    attendances?: boolean | Staff$attendancesArgs<ExtArgs>
    _count?: boolean | StaffCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["staff"]>



  export type StaffSelectScalar = {
    id?: boolean
    username?: boolean
    designation?: boolean
    name?: boolean
    email?: boolean
    gender?: boolean
    mobile?: boolean
    school_id?: boolean
    password?: boolean
  }

  export type StaffOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "username" | "designation" | "name" | "email" | "gender" | "mobile" | "school_id" | "password", ExtArgs["result"]["staff"]>
  export type StaffInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    school?: boolean | SchoolDefaultArgs<ExtArgs>
    user?: boolean | Attendance_userDefaultArgs<ExtArgs>
    attendances?: boolean | Staff$attendancesArgs<ExtArgs>
    _count?: boolean | StaffCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $StaffPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Staff"
    objects: {
      school: Prisma.$SchoolPayload<ExtArgs>
      user: Prisma.$Attendance_userPayload<ExtArgs>
      attendances: Prisma.$StaffAttendancePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      username: string
      designation: string
      name: string | null
      email: string
      gender: $Enums.Gender | null
      mobile: string
      school_id: number
      password: string
    }, ExtArgs["result"]["staff"]>
    composites: {}
  }

  type StaffGetPayload<S extends boolean | null | undefined | StaffDefaultArgs> = $Result.GetResult<Prisma.$StaffPayload, S>

  type StaffCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<StaffFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: StaffCountAggregateInputType | true
    }

  export interface StaffDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Staff'], meta: { name: 'Staff' } }
    /**
     * Find zero or one Staff that matches the filter.
     * @param {StaffFindUniqueArgs} args - Arguments to find a Staff
     * @example
     * // Get one Staff
     * const staff = await prisma.staff.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends StaffFindUniqueArgs>(args: SelectSubset<T, StaffFindUniqueArgs<ExtArgs>>): Prisma__StaffClient<$Result.GetResult<Prisma.$StaffPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Staff that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {StaffFindUniqueOrThrowArgs} args - Arguments to find a Staff
     * @example
     * // Get one Staff
     * const staff = await prisma.staff.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends StaffFindUniqueOrThrowArgs>(args: SelectSubset<T, StaffFindUniqueOrThrowArgs<ExtArgs>>): Prisma__StaffClient<$Result.GetResult<Prisma.$StaffPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Staff that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StaffFindFirstArgs} args - Arguments to find a Staff
     * @example
     * // Get one Staff
     * const staff = await prisma.staff.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends StaffFindFirstArgs>(args?: SelectSubset<T, StaffFindFirstArgs<ExtArgs>>): Prisma__StaffClient<$Result.GetResult<Prisma.$StaffPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Staff that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StaffFindFirstOrThrowArgs} args - Arguments to find a Staff
     * @example
     * // Get one Staff
     * const staff = await prisma.staff.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends StaffFindFirstOrThrowArgs>(args?: SelectSubset<T, StaffFindFirstOrThrowArgs<ExtArgs>>): Prisma__StaffClient<$Result.GetResult<Prisma.$StaffPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Staff that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StaffFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Staff
     * const staff = await prisma.staff.findMany()
     * 
     * // Get first 10 Staff
     * const staff = await prisma.staff.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const staffWithIdOnly = await prisma.staff.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends StaffFindManyArgs>(args?: SelectSubset<T, StaffFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StaffPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Staff.
     * @param {StaffCreateArgs} args - Arguments to create a Staff.
     * @example
     * // Create one Staff
     * const Staff = await prisma.staff.create({
     *   data: {
     *     // ... data to create a Staff
     *   }
     * })
     * 
     */
    create<T extends StaffCreateArgs>(args: SelectSubset<T, StaffCreateArgs<ExtArgs>>): Prisma__StaffClient<$Result.GetResult<Prisma.$StaffPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Staff.
     * @param {StaffCreateManyArgs} args - Arguments to create many Staff.
     * @example
     * // Create many Staff
     * const staff = await prisma.staff.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends StaffCreateManyArgs>(args?: SelectSubset<T, StaffCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Staff.
     * @param {StaffDeleteArgs} args - Arguments to delete one Staff.
     * @example
     * // Delete one Staff
     * const Staff = await prisma.staff.delete({
     *   where: {
     *     // ... filter to delete one Staff
     *   }
     * })
     * 
     */
    delete<T extends StaffDeleteArgs>(args: SelectSubset<T, StaffDeleteArgs<ExtArgs>>): Prisma__StaffClient<$Result.GetResult<Prisma.$StaffPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Staff.
     * @param {StaffUpdateArgs} args - Arguments to update one Staff.
     * @example
     * // Update one Staff
     * const staff = await prisma.staff.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends StaffUpdateArgs>(args: SelectSubset<T, StaffUpdateArgs<ExtArgs>>): Prisma__StaffClient<$Result.GetResult<Prisma.$StaffPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Staff.
     * @param {StaffDeleteManyArgs} args - Arguments to filter Staff to delete.
     * @example
     * // Delete a few Staff
     * const { count } = await prisma.staff.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends StaffDeleteManyArgs>(args?: SelectSubset<T, StaffDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Staff.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StaffUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Staff
     * const staff = await prisma.staff.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends StaffUpdateManyArgs>(args: SelectSubset<T, StaffUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Staff.
     * @param {StaffUpsertArgs} args - Arguments to update or create a Staff.
     * @example
     * // Update or create a Staff
     * const staff = await prisma.staff.upsert({
     *   create: {
     *     // ... data to create a Staff
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Staff we want to update
     *   }
     * })
     */
    upsert<T extends StaffUpsertArgs>(args: SelectSubset<T, StaffUpsertArgs<ExtArgs>>): Prisma__StaffClient<$Result.GetResult<Prisma.$StaffPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Staff.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StaffCountArgs} args - Arguments to filter Staff to count.
     * @example
     * // Count the number of Staff
     * const count = await prisma.staff.count({
     *   where: {
     *     // ... the filter for the Staff we want to count
     *   }
     * })
    **/
    count<T extends StaffCountArgs>(
      args?: Subset<T, StaffCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StaffCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Staff.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StaffAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StaffAggregateArgs>(args: Subset<T, StaffAggregateArgs>): Prisma.PrismaPromise<GetStaffAggregateType<T>>

    /**
     * Group by Staff.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StaffGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends StaffGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: StaffGroupByArgs['orderBy'] }
        : { orderBy?: StaffGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, StaffGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStaffGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Staff model
   */
  readonly fields: StaffFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Staff.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__StaffClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    school<T extends SchoolDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SchoolDefaultArgs<ExtArgs>>): Prisma__SchoolClient<$Result.GetResult<Prisma.$SchoolPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    user<T extends Attendance_userDefaultArgs<ExtArgs> = {}>(args?: Subset<T, Attendance_userDefaultArgs<ExtArgs>>): Prisma__Attendance_userClient<$Result.GetResult<Prisma.$Attendance_userPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    attendances<T extends Staff$attendancesArgs<ExtArgs> = {}>(args?: Subset<T, Staff$attendancesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StaffAttendancePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Staff model
   */
  interface StaffFieldRefs {
    readonly id: FieldRef<"Staff", 'Int'>
    readonly username: FieldRef<"Staff", 'String'>
    readonly designation: FieldRef<"Staff", 'String'>
    readonly name: FieldRef<"Staff", 'String'>
    readonly email: FieldRef<"Staff", 'String'>
    readonly gender: FieldRef<"Staff", 'Gender'>
    readonly mobile: FieldRef<"Staff", 'String'>
    readonly school_id: FieldRef<"Staff", 'Int'>
    readonly password: FieldRef<"Staff", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Staff findUnique
   */
  export type StaffFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Staff
     */
    select?: StaffSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Staff
     */
    omit?: StaffOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffInclude<ExtArgs> | null
    /**
     * Filter, which Staff to fetch.
     */
    where: StaffWhereUniqueInput
  }

  /**
   * Staff findUniqueOrThrow
   */
  export type StaffFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Staff
     */
    select?: StaffSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Staff
     */
    omit?: StaffOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffInclude<ExtArgs> | null
    /**
     * Filter, which Staff to fetch.
     */
    where: StaffWhereUniqueInput
  }

  /**
   * Staff findFirst
   */
  export type StaffFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Staff
     */
    select?: StaffSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Staff
     */
    omit?: StaffOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffInclude<ExtArgs> | null
    /**
     * Filter, which Staff to fetch.
     */
    where?: StaffWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Staff to fetch.
     */
    orderBy?: StaffOrderByWithRelationInput | StaffOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Staff.
     */
    cursor?: StaffWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Staff from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Staff.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Staff.
     */
    distinct?: StaffScalarFieldEnum | StaffScalarFieldEnum[]
  }

  /**
   * Staff findFirstOrThrow
   */
  export type StaffFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Staff
     */
    select?: StaffSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Staff
     */
    omit?: StaffOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffInclude<ExtArgs> | null
    /**
     * Filter, which Staff to fetch.
     */
    where?: StaffWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Staff to fetch.
     */
    orderBy?: StaffOrderByWithRelationInput | StaffOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Staff.
     */
    cursor?: StaffWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Staff from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Staff.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Staff.
     */
    distinct?: StaffScalarFieldEnum | StaffScalarFieldEnum[]
  }

  /**
   * Staff findMany
   */
  export type StaffFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Staff
     */
    select?: StaffSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Staff
     */
    omit?: StaffOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffInclude<ExtArgs> | null
    /**
     * Filter, which Staff to fetch.
     */
    where?: StaffWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Staff to fetch.
     */
    orderBy?: StaffOrderByWithRelationInput | StaffOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Staff.
     */
    cursor?: StaffWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Staff from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Staff.
     */
    skip?: number
    distinct?: StaffScalarFieldEnum | StaffScalarFieldEnum[]
  }

  /**
   * Staff create
   */
  export type StaffCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Staff
     */
    select?: StaffSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Staff
     */
    omit?: StaffOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffInclude<ExtArgs> | null
    /**
     * The data needed to create a Staff.
     */
    data: XOR<StaffCreateInput, StaffUncheckedCreateInput>
  }

  /**
   * Staff createMany
   */
  export type StaffCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Staff.
     */
    data: StaffCreateManyInput | StaffCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Staff update
   */
  export type StaffUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Staff
     */
    select?: StaffSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Staff
     */
    omit?: StaffOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffInclude<ExtArgs> | null
    /**
     * The data needed to update a Staff.
     */
    data: XOR<StaffUpdateInput, StaffUncheckedUpdateInput>
    /**
     * Choose, which Staff to update.
     */
    where: StaffWhereUniqueInput
  }

  /**
   * Staff updateMany
   */
  export type StaffUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Staff.
     */
    data: XOR<StaffUpdateManyMutationInput, StaffUncheckedUpdateManyInput>
    /**
     * Filter which Staff to update
     */
    where?: StaffWhereInput
    /**
     * Limit how many Staff to update.
     */
    limit?: number
  }

  /**
   * Staff upsert
   */
  export type StaffUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Staff
     */
    select?: StaffSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Staff
     */
    omit?: StaffOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffInclude<ExtArgs> | null
    /**
     * The filter to search for the Staff to update in case it exists.
     */
    where: StaffWhereUniqueInput
    /**
     * In case the Staff found by the `where` argument doesn't exist, create a new Staff with this data.
     */
    create: XOR<StaffCreateInput, StaffUncheckedCreateInput>
    /**
     * In case the Staff was found with the provided `where` argument, update it with this data.
     */
    update: XOR<StaffUpdateInput, StaffUncheckedUpdateInput>
  }

  /**
   * Staff delete
   */
  export type StaffDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Staff
     */
    select?: StaffSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Staff
     */
    omit?: StaffOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffInclude<ExtArgs> | null
    /**
     * Filter which Staff to delete.
     */
    where: StaffWhereUniqueInput
  }

  /**
   * Staff deleteMany
   */
  export type StaffDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Staff to delete
     */
    where?: StaffWhereInput
    /**
     * Limit how many Staff to delete.
     */
    limit?: number
  }

  /**
   * Staff.attendances
   */
  export type Staff$attendancesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StaffAttendance
     */
    select?: StaffAttendanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StaffAttendance
     */
    omit?: StaffAttendanceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffAttendanceInclude<ExtArgs> | null
    where?: StaffAttendanceWhereInput
    orderBy?: StaffAttendanceOrderByWithRelationInput | StaffAttendanceOrderByWithRelationInput[]
    cursor?: StaffAttendanceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: StaffAttendanceScalarFieldEnum | StaffAttendanceScalarFieldEnum[]
  }

  /**
   * Staff without action
   */
  export type StaffDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Staff
     */
    select?: StaffSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Staff
     */
    omit?: StaffOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffInclude<ExtArgs> | null
  }


  /**
   * Model StaffAttendance
   */

  export type AggregateStaffAttendance = {
    _count: StaffAttendanceCountAggregateOutputType | null
    _avg: StaffAttendanceAvgAggregateOutputType | null
    _sum: StaffAttendanceSumAggregateOutputType | null
    _min: StaffAttendanceMinAggregateOutputType | null
    _max: StaffAttendanceMaxAggregateOutputType | null
  }

  export type StaffAttendanceAvgAggregateOutputType = {
    school_id: number | null
  }

  export type StaffAttendanceSumAggregateOutputType = {
    school_id: number | null
  }

  export type StaffAttendanceMinAggregateOutputType = {
    username: string | null
    date: Date | null
    fn_status: string | null
    an_status: string | null
    school_id: number | null
  }

  export type StaffAttendanceMaxAggregateOutputType = {
    username: string | null
    date: Date | null
    fn_status: string | null
    an_status: string | null
    school_id: number | null
  }

  export type StaffAttendanceCountAggregateOutputType = {
    username: number
    date: number
    fn_status: number
    an_status: number
    school_id: number
    _all: number
  }


  export type StaffAttendanceAvgAggregateInputType = {
    school_id?: true
  }

  export type StaffAttendanceSumAggregateInputType = {
    school_id?: true
  }

  export type StaffAttendanceMinAggregateInputType = {
    username?: true
    date?: true
    fn_status?: true
    an_status?: true
    school_id?: true
  }

  export type StaffAttendanceMaxAggregateInputType = {
    username?: true
    date?: true
    fn_status?: true
    an_status?: true
    school_id?: true
  }

  export type StaffAttendanceCountAggregateInputType = {
    username?: true
    date?: true
    fn_status?: true
    an_status?: true
    school_id?: true
    _all?: true
  }

  export type StaffAttendanceAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which StaffAttendance to aggregate.
     */
    where?: StaffAttendanceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StaffAttendances to fetch.
     */
    orderBy?: StaffAttendanceOrderByWithRelationInput | StaffAttendanceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: StaffAttendanceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StaffAttendances from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StaffAttendances.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned StaffAttendances
    **/
    _count?: true | StaffAttendanceCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: StaffAttendanceAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: StaffAttendanceSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StaffAttendanceMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StaffAttendanceMaxAggregateInputType
  }

  export type GetStaffAttendanceAggregateType<T extends StaffAttendanceAggregateArgs> = {
        [P in keyof T & keyof AggregateStaffAttendance]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStaffAttendance[P]>
      : GetScalarType<T[P], AggregateStaffAttendance[P]>
  }




  export type StaffAttendanceGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StaffAttendanceWhereInput
    orderBy?: StaffAttendanceOrderByWithAggregationInput | StaffAttendanceOrderByWithAggregationInput[]
    by: StaffAttendanceScalarFieldEnum[] | StaffAttendanceScalarFieldEnum
    having?: StaffAttendanceScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StaffAttendanceCountAggregateInputType | true
    _avg?: StaffAttendanceAvgAggregateInputType
    _sum?: StaffAttendanceSumAggregateInputType
    _min?: StaffAttendanceMinAggregateInputType
    _max?: StaffAttendanceMaxAggregateInputType
  }

  export type StaffAttendanceGroupByOutputType = {
    username: string
    date: Date
    fn_status: string
    an_status: string
    school_id: number | null
    _count: StaffAttendanceCountAggregateOutputType | null
    _avg: StaffAttendanceAvgAggregateOutputType | null
    _sum: StaffAttendanceSumAggregateOutputType | null
    _min: StaffAttendanceMinAggregateOutputType | null
    _max: StaffAttendanceMaxAggregateOutputType | null
  }

  type GetStaffAttendanceGroupByPayload<T extends StaffAttendanceGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<StaffAttendanceGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StaffAttendanceGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StaffAttendanceGroupByOutputType[P]>
            : GetScalarType<T[P], StaffAttendanceGroupByOutputType[P]>
        }
      >
    >


  export type StaffAttendanceSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    username?: boolean
    date?: boolean
    fn_status?: boolean
    an_status?: boolean
    school_id?: boolean
    school?: boolean | StaffAttendance$schoolArgs<ExtArgs>
    staff?: boolean | StaffDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["staffAttendance"]>



  export type StaffAttendanceSelectScalar = {
    username?: boolean
    date?: boolean
    fn_status?: boolean
    an_status?: boolean
    school_id?: boolean
  }

  export type StaffAttendanceOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"username" | "date" | "fn_status" | "an_status" | "school_id", ExtArgs["result"]["staffAttendance"]>
  export type StaffAttendanceInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    school?: boolean | StaffAttendance$schoolArgs<ExtArgs>
    staff?: boolean | StaffDefaultArgs<ExtArgs>
  }

  export type $StaffAttendancePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "StaffAttendance"
    objects: {
      school: Prisma.$SchoolPayload<ExtArgs> | null
      staff: Prisma.$StaffPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      username: string
      date: Date
      fn_status: string
      an_status: string
      school_id: number | null
    }, ExtArgs["result"]["staffAttendance"]>
    composites: {}
  }

  type StaffAttendanceGetPayload<S extends boolean | null | undefined | StaffAttendanceDefaultArgs> = $Result.GetResult<Prisma.$StaffAttendancePayload, S>

  type StaffAttendanceCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<StaffAttendanceFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: StaffAttendanceCountAggregateInputType | true
    }

  export interface StaffAttendanceDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['StaffAttendance'], meta: { name: 'StaffAttendance' } }
    /**
     * Find zero or one StaffAttendance that matches the filter.
     * @param {StaffAttendanceFindUniqueArgs} args - Arguments to find a StaffAttendance
     * @example
     * // Get one StaffAttendance
     * const staffAttendance = await prisma.staffAttendance.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends StaffAttendanceFindUniqueArgs>(args: SelectSubset<T, StaffAttendanceFindUniqueArgs<ExtArgs>>): Prisma__StaffAttendanceClient<$Result.GetResult<Prisma.$StaffAttendancePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one StaffAttendance that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {StaffAttendanceFindUniqueOrThrowArgs} args - Arguments to find a StaffAttendance
     * @example
     * // Get one StaffAttendance
     * const staffAttendance = await prisma.staffAttendance.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends StaffAttendanceFindUniqueOrThrowArgs>(args: SelectSubset<T, StaffAttendanceFindUniqueOrThrowArgs<ExtArgs>>): Prisma__StaffAttendanceClient<$Result.GetResult<Prisma.$StaffAttendancePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first StaffAttendance that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StaffAttendanceFindFirstArgs} args - Arguments to find a StaffAttendance
     * @example
     * // Get one StaffAttendance
     * const staffAttendance = await prisma.staffAttendance.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends StaffAttendanceFindFirstArgs>(args?: SelectSubset<T, StaffAttendanceFindFirstArgs<ExtArgs>>): Prisma__StaffAttendanceClient<$Result.GetResult<Prisma.$StaffAttendancePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first StaffAttendance that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StaffAttendanceFindFirstOrThrowArgs} args - Arguments to find a StaffAttendance
     * @example
     * // Get one StaffAttendance
     * const staffAttendance = await prisma.staffAttendance.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends StaffAttendanceFindFirstOrThrowArgs>(args?: SelectSubset<T, StaffAttendanceFindFirstOrThrowArgs<ExtArgs>>): Prisma__StaffAttendanceClient<$Result.GetResult<Prisma.$StaffAttendancePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more StaffAttendances that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StaffAttendanceFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all StaffAttendances
     * const staffAttendances = await prisma.staffAttendance.findMany()
     * 
     * // Get first 10 StaffAttendances
     * const staffAttendances = await prisma.staffAttendance.findMany({ take: 10 })
     * 
     * // Only select the `username`
     * const staffAttendanceWithUsernameOnly = await prisma.staffAttendance.findMany({ select: { username: true } })
     * 
     */
    findMany<T extends StaffAttendanceFindManyArgs>(args?: SelectSubset<T, StaffAttendanceFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StaffAttendancePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a StaffAttendance.
     * @param {StaffAttendanceCreateArgs} args - Arguments to create a StaffAttendance.
     * @example
     * // Create one StaffAttendance
     * const StaffAttendance = await prisma.staffAttendance.create({
     *   data: {
     *     // ... data to create a StaffAttendance
     *   }
     * })
     * 
     */
    create<T extends StaffAttendanceCreateArgs>(args: SelectSubset<T, StaffAttendanceCreateArgs<ExtArgs>>): Prisma__StaffAttendanceClient<$Result.GetResult<Prisma.$StaffAttendancePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many StaffAttendances.
     * @param {StaffAttendanceCreateManyArgs} args - Arguments to create many StaffAttendances.
     * @example
     * // Create many StaffAttendances
     * const staffAttendance = await prisma.staffAttendance.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends StaffAttendanceCreateManyArgs>(args?: SelectSubset<T, StaffAttendanceCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a StaffAttendance.
     * @param {StaffAttendanceDeleteArgs} args - Arguments to delete one StaffAttendance.
     * @example
     * // Delete one StaffAttendance
     * const StaffAttendance = await prisma.staffAttendance.delete({
     *   where: {
     *     // ... filter to delete one StaffAttendance
     *   }
     * })
     * 
     */
    delete<T extends StaffAttendanceDeleteArgs>(args: SelectSubset<T, StaffAttendanceDeleteArgs<ExtArgs>>): Prisma__StaffAttendanceClient<$Result.GetResult<Prisma.$StaffAttendancePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one StaffAttendance.
     * @param {StaffAttendanceUpdateArgs} args - Arguments to update one StaffAttendance.
     * @example
     * // Update one StaffAttendance
     * const staffAttendance = await prisma.staffAttendance.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends StaffAttendanceUpdateArgs>(args: SelectSubset<T, StaffAttendanceUpdateArgs<ExtArgs>>): Prisma__StaffAttendanceClient<$Result.GetResult<Prisma.$StaffAttendancePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more StaffAttendances.
     * @param {StaffAttendanceDeleteManyArgs} args - Arguments to filter StaffAttendances to delete.
     * @example
     * // Delete a few StaffAttendances
     * const { count } = await prisma.staffAttendance.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends StaffAttendanceDeleteManyArgs>(args?: SelectSubset<T, StaffAttendanceDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more StaffAttendances.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StaffAttendanceUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many StaffAttendances
     * const staffAttendance = await prisma.staffAttendance.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends StaffAttendanceUpdateManyArgs>(args: SelectSubset<T, StaffAttendanceUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one StaffAttendance.
     * @param {StaffAttendanceUpsertArgs} args - Arguments to update or create a StaffAttendance.
     * @example
     * // Update or create a StaffAttendance
     * const staffAttendance = await prisma.staffAttendance.upsert({
     *   create: {
     *     // ... data to create a StaffAttendance
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the StaffAttendance we want to update
     *   }
     * })
     */
    upsert<T extends StaffAttendanceUpsertArgs>(args: SelectSubset<T, StaffAttendanceUpsertArgs<ExtArgs>>): Prisma__StaffAttendanceClient<$Result.GetResult<Prisma.$StaffAttendancePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of StaffAttendances.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StaffAttendanceCountArgs} args - Arguments to filter StaffAttendances to count.
     * @example
     * // Count the number of StaffAttendances
     * const count = await prisma.staffAttendance.count({
     *   where: {
     *     // ... the filter for the StaffAttendances we want to count
     *   }
     * })
    **/
    count<T extends StaffAttendanceCountArgs>(
      args?: Subset<T, StaffAttendanceCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StaffAttendanceCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a StaffAttendance.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StaffAttendanceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StaffAttendanceAggregateArgs>(args: Subset<T, StaffAttendanceAggregateArgs>): Prisma.PrismaPromise<GetStaffAttendanceAggregateType<T>>

    /**
     * Group by StaffAttendance.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StaffAttendanceGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends StaffAttendanceGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: StaffAttendanceGroupByArgs['orderBy'] }
        : { orderBy?: StaffAttendanceGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, StaffAttendanceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStaffAttendanceGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the StaffAttendance model
   */
  readonly fields: StaffAttendanceFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for StaffAttendance.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__StaffAttendanceClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    school<T extends StaffAttendance$schoolArgs<ExtArgs> = {}>(args?: Subset<T, StaffAttendance$schoolArgs<ExtArgs>>): Prisma__SchoolClient<$Result.GetResult<Prisma.$SchoolPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    staff<T extends StaffDefaultArgs<ExtArgs> = {}>(args?: Subset<T, StaffDefaultArgs<ExtArgs>>): Prisma__StaffClient<$Result.GetResult<Prisma.$StaffPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the StaffAttendance model
   */
  interface StaffAttendanceFieldRefs {
    readonly username: FieldRef<"StaffAttendance", 'String'>
    readonly date: FieldRef<"StaffAttendance", 'DateTime'>
    readonly fn_status: FieldRef<"StaffAttendance", 'String'>
    readonly an_status: FieldRef<"StaffAttendance", 'String'>
    readonly school_id: FieldRef<"StaffAttendance", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * StaffAttendance findUnique
   */
  export type StaffAttendanceFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StaffAttendance
     */
    select?: StaffAttendanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StaffAttendance
     */
    omit?: StaffAttendanceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffAttendanceInclude<ExtArgs> | null
    /**
     * Filter, which StaffAttendance to fetch.
     */
    where: StaffAttendanceWhereUniqueInput
  }

  /**
   * StaffAttendance findUniqueOrThrow
   */
  export type StaffAttendanceFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StaffAttendance
     */
    select?: StaffAttendanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StaffAttendance
     */
    omit?: StaffAttendanceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffAttendanceInclude<ExtArgs> | null
    /**
     * Filter, which StaffAttendance to fetch.
     */
    where: StaffAttendanceWhereUniqueInput
  }

  /**
   * StaffAttendance findFirst
   */
  export type StaffAttendanceFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StaffAttendance
     */
    select?: StaffAttendanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StaffAttendance
     */
    omit?: StaffAttendanceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffAttendanceInclude<ExtArgs> | null
    /**
     * Filter, which StaffAttendance to fetch.
     */
    where?: StaffAttendanceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StaffAttendances to fetch.
     */
    orderBy?: StaffAttendanceOrderByWithRelationInput | StaffAttendanceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for StaffAttendances.
     */
    cursor?: StaffAttendanceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StaffAttendances from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StaffAttendances.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of StaffAttendances.
     */
    distinct?: StaffAttendanceScalarFieldEnum | StaffAttendanceScalarFieldEnum[]
  }

  /**
   * StaffAttendance findFirstOrThrow
   */
  export type StaffAttendanceFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StaffAttendance
     */
    select?: StaffAttendanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StaffAttendance
     */
    omit?: StaffAttendanceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffAttendanceInclude<ExtArgs> | null
    /**
     * Filter, which StaffAttendance to fetch.
     */
    where?: StaffAttendanceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StaffAttendances to fetch.
     */
    orderBy?: StaffAttendanceOrderByWithRelationInput | StaffAttendanceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for StaffAttendances.
     */
    cursor?: StaffAttendanceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StaffAttendances from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StaffAttendances.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of StaffAttendances.
     */
    distinct?: StaffAttendanceScalarFieldEnum | StaffAttendanceScalarFieldEnum[]
  }

  /**
   * StaffAttendance findMany
   */
  export type StaffAttendanceFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StaffAttendance
     */
    select?: StaffAttendanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StaffAttendance
     */
    omit?: StaffAttendanceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffAttendanceInclude<ExtArgs> | null
    /**
     * Filter, which StaffAttendances to fetch.
     */
    where?: StaffAttendanceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StaffAttendances to fetch.
     */
    orderBy?: StaffAttendanceOrderByWithRelationInput | StaffAttendanceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing StaffAttendances.
     */
    cursor?: StaffAttendanceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StaffAttendances from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StaffAttendances.
     */
    skip?: number
    distinct?: StaffAttendanceScalarFieldEnum | StaffAttendanceScalarFieldEnum[]
  }

  /**
   * StaffAttendance create
   */
  export type StaffAttendanceCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StaffAttendance
     */
    select?: StaffAttendanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StaffAttendance
     */
    omit?: StaffAttendanceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffAttendanceInclude<ExtArgs> | null
    /**
     * The data needed to create a StaffAttendance.
     */
    data: XOR<StaffAttendanceCreateInput, StaffAttendanceUncheckedCreateInput>
  }

  /**
   * StaffAttendance createMany
   */
  export type StaffAttendanceCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many StaffAttendances.
     */
    data: StaffAttendanceCreateManyInput | StaffAttendanceCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * StaffAttendance update
   */
  export type StaffAttendanceUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StaffAttendance
     */
    select?: StaffAttendanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StaffAttendance
     */
    omit?: StaffAttendanceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffAttendanceInclude<ExtArgs> | null
    /**
     * The data needed to update a StaffAttendance.
     */
    data: XOR<StaffAttendanceUpdateInput, StaffAttendanceUncheckedUpdateInput>
    /**
     * Choose, which StaffAttendance to update.
     */
    where: StaffAttendanceWhereUniqueInput
  }

  /**
   * StaffAttendance updateMany
   */
  export type StaffAttendanceUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update StaffAttendances.
     */
    data: XOR<StaffAttendanceUpdateManyMutationInput, StaffAttendanceUncheckedUpdateManyInput>
    /**
     * Filter which StaffAttendances to update
     */
    where?: StaffAttendanceWhereInput
    /**
     * Limit how many StaffAttendances to update.
     */
    limit?: number
  }

  /**
   * StaffAttendance upsert
   */
  export type StaffAttendanceUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StaffAttendance
     */
    select?: StaffAttendanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StaffAttendance
     */
    omit?: StaffAttendanceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffAttendanceInclude<ExtArgs> | null
    /**
     * The filter to search for the StaffAttendance to update in case it exists.
     */
    where: StaffAttendanceWhereUniqueInput
    /**
     * In case the StaffAttendance found by the `where` argument doesn't exist, create a new StaffAttendance with this data.
     */
    create: XOR<StaffAttendanceCreateInput, StaffAttendanceUncheckedCreateInput>
    /**
     * In case the StaffAttendance was found with the provided `where` argument, update it with this data.
     */
    update: XOR<StaffAttendanceUpdateInput, StaffAttendanceUncheckedUpdateInput>
  }

  /**
   * StaffAttendance delete
   */
  export type StaffAttendanceDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StaffAttendance
     */
    select?: StaffAttendanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StaffAttendance
     */
    omit?: StaffAttendanceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffAttendanceInclude<ExtArgs> | null
    /**
     * Filter which StaffAttendance to delete.
     */
    where: StaffAttendanceWhereUniqueInput
  }

  /**
   * StaffAttendance deleteMany
   */
  export type StaffAttendanceDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which StaffAttendances to delete
     */
    where?: StaffAttendanceWhereInput
    /**
     * Limit how many StaffAttendances to delete.
     */
    limit?: number
  }

  /**
   * StaffAttendance.school
   */
  export type StaffAttendance$schoolArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the School
     */
    select?: SchoolSelect<ExtArgs> | null
    /**
     * Omit specific fields from the School
     */
    omit?: SchoolOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SchoolInclude<ExtArgs> | null
    where?: SchoolWhereInput
  }

  /**
   * StaffAttendance without action
   */
  export type StaffAttendanceDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StaffAttendance
     */
    select?: StaffAttendanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StaffAttendance
     */
    omit?: StaffAttendanceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffAttendanceInclude<ExtArgs> | null
  }


  /**
   * Model Student
   */

  export type AggregateStudent = {
    _count: StudentCountAggregateOutputType | null
    _avg: StudentAvgAggregateOutputType | null
    _sum: StudentSumAggregateOutputType | null
    _min: StudentMinAggregateOutputType | null
    _max: StudentMaxAggregateOutputType | null
  }

  export type StudentAvgAggregateOutputType = {
    id: number | null
    class_id: number | null
    school_id: number | null
  }

  export type StudentSumAggregateOutputType = {
    id: number | null
    class_id: number | null
    school_id: number | null
  }

  export type StudentMinAggregateOutputType = {
    id: number | null
    username: string | null
    name: string | null
    gender: $Enums.Gender | null
    email: string | null
    mobile: string | null
    class_id: number | null
    school_id: number | null
    photo: Uint8Array | null
    password: string | null
  }

  export type StudentMaxAggregateOutputType = {
    id: number | null
    username: string | null
    name: string | null
    gender: $Enums.Gender | null
    email: string | null
    mobile: string | null
    class_id: number | null
    school_id: number | null
    photo: Uint8Array | null
    password: string | null
  }

  export type StudentCountAggregateOutputType = {
    id: number
    username: number
    name: number
    gender: number
    email: number
    mobile: number
    class_id: number
    school_id: number
    photo: number
    password: number
    _all: number
  }


  export type StudentAvgAggregateInputType = {
    id?: true
    class_id?: true
    school_id?: true
  }

  export type StudentSumAggregateInputType = {
    id?: true
    class_id?: true
    school_id?: true
  }

  export type StudentMinAggregateInputType = {
    id?: true
    username?: true
    name?: true
    gender?: true
    email?: true
    mobile?: true
    class_id?: true
    school_id?: true
    photo?: true
    password?: true
  }

  export type StudentMaxAggregateInputType = {
    id?: true
    username?: true
    name?: true
    gender?: true
    email?: true
    mobile?: true
    class_id?: true
    school_id?: true
    photo?: true
    password?: true
  }

  export type StudentCountAggregateInputType = {
    id?: true
    username?: true
    name?: true
    gender?: true
    email?: true
    mobile?: true
    class_id?: true
    school_id?: true
    photo?: true
    password?: true
    _all?: true
  }

  export type StudentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Student to aggregate.
     */
    where?: StudentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Students to fetch.
     */
    orderBy?: StudentOrderByWithRelationInput | StudentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: StudentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Students from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Students.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Students
    **/
    _count?: true | StudentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: StudentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: StudentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StudentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StudentMaxAggregateInputType
  }

  export type GetStudentAggregateType<T extends StudentAggregateArgs> = {
        [P in keyof T & keyof AggregateStudent]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStudent[P]>
      : GetScalarType<T[P], AggregateStudent[P]>
  }




  export type StudentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StudentWhereInput
    orderBy?: StudentOrderByWithAggregationInput | StudentOrderByWithAggregationInput[]
    by: StudentScalarFieldEnum[] | StudentScalarFieldEnum
    having?: StudentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StudentCountAggregateInputType | true
    _avg?: StudentAvgAggregateInputType
    _sum?: StudentSumAggregateInputType
    _min?: StudentMinAggregateInputType
    _max?: StudentMaxAggregateInputType
  }

  export type StudentGroupByOutputType = {
    id: number
    username: string
    name: string | null
    gender: $Enums.Gender | null
    email: string
    mobile: string
    class_id: number
    school_id: number
    photo: Uint8Array | null
    password: string
    _count: StudentCountAggregateOutputType | null
    _avg: StudentAvgAggregateOutputType | null
    _sum: StudentSumAggregateOutputType | null
    _min: StudentMinAggregateOutputType | null
    _max: StudentMaxAggregateOutputType | null
  }

  type GetStudentGroupByPayload<T extends StudentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<StudentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StudentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StudentGroupByOutputType[P]>
            : GetScalarType<T[P], StudentGroupByOutputType[P]>
        }
      >
    >


  export type StudentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    username?: boolean
    name?: boolean
    gender?: boolean
    email?: boolean
    mobile?: boolean
    class_id?: boolean
    school_id?: boolean
    photo?: boolean
    password?: boolean
    class?: boolean | ClassesDefaultArgs<ExtArgs>
    school?: boolean | SchoolDefaultArgs<ExtArgs>
    user?: boolean | Attendance_userDefaultArgs<ExtArgs>
    attendance?: boolean | Student$attendanceArgs<ExtArgs>
    _count?: boolean | StudentCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["student"]>



  export type StudentSelectScalar = {
    id?: boolean
    username?: boolean
    name?: boolean
    gender?: boolean
    email?: boolean
    mobile?: boolean
    class_id?: boolean
    school_id?: boolean
    photo?: boolean
    password?: boolean
  }

  export type StudentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "username" | "name" | "gender" | "email" | "mobile" | "class_id" | "school_id" | "photo" | "password", ExtArgs["result"]["student"]>
  export type StudentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    class?: boolean | ClassesDefaultArgs<ExtArgs>
    school?: boolean | SchoolDefaultArgs<ExtArgs>
    user?: boolean | Attendance_userDefaultArgs<ExtArgs>
    attendance?: boolean | Student$attendanceArgs<ExtArgs>
    _count?: boolean | StudentCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $StudentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Student"
    objects: {
      class: Prisma.$ClassesPayload<ExtArgs>
      school: Prisma.$SchoolPayload<ExtArgs>
      user: Prisma.$Attendance_userPayload<ExtArgs>
      attendance: Prisma.$StudentAttendancePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      username: string
      name: string | null
      gender: $Enums.Gender | null
      email: string
      mobile: string
      class_id: number
      school_id: number
      photo: Uint8Array | null
      password: string
    }, ExtArgs["result"]["student"]>
    composites: {}
  }

  type StudentGetPayload<S extends boolean | null | undefined | StudentDefaultArgs> = $Result.GetResult<Prisma.$StudentPayload, S>

  type StudentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<StudentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: StudentCountAggregateInputType | true
    }

  export interface StudentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Student'], meta: { name: 'Student' } }
    /**
     * Find zero or one Student that matches the filter.
     * @param {StudentFindUniqueArgs} args - Arguments to find a Student
     * @example
     * // Get one Student
     * const student = await prisma.student.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends StudentFindUniqueArgs>(args: SelectSubset<T, StudentFindUniqueArgs<ExtArgs>>): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Student that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {StudentFindUniqueOrThrowArgs} args - Arguments to find a Student
     * @example
     * // Get one Student
     * const student = await prisma.student.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends StudentFindUniqueOrThrowArgs>(args: SelectSubset<T, StudentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Student that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentFindFirstArgs} args - Arguments to find a Student
     * @example
     * // Get one Student
     * const student = await prisma.student.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends StudentFindFirstArgs>(args?: SelectSubset<T, StudentFindFirstArgs<ExtArgs>>): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Student that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentFindFirstOrThrowArgs} args - Arguments to find a Student
     * @example
     * // Get one Student
     * const student = await prisma.student.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends StudentFindFirstOrThrowArgs>(args?: SelectSubset<T, StudentFindFirstOrThrowArgs<ExtArgs>>): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Students that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Students
     * const students = await prisma.student.findMany()
     * 
     * // Get first 10 Students
     * const students = await prisma.student.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const studentWithIdOnly = await prisma.student.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends StudentFindManyArgs>(args?: SelectSubset<T, StudentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Student.
     * @param {StudentCreateArgs} args - Arguments to create a Student.
     * @example
     * // Create one Student
     * const Student = await prisma.student.create({
     *   data: {
     *     // ... data to create a Student
     *   }
     * })
     * 
     */
    create<T extends StudentCreateArgs>(args: SelectSubset<T, StudentCreateArgs<ExtArgs>>): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Students.
     * @param {StudentCreateManyArgs} args - Arguments to create many Students.
     * @example
     * // Create many Students
     * const student = await prisma.student.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends StudentCreateManyArgs>(args?: SelectSubset<T, StudentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Student.
     * @param {StudentDeleteArgs} args - Arguments to delete one Student.
     * @example
     * // Delete one Student
     * const Student = await prisma.student.delete({
     *   where: {
     *     // ... filter to delete one Student
     *   }
     * })
     * 
     */
    delete<T extends StudentDeleteArgs>(args: SelectSubset<T, StudentDeleteArgs<ExtArgs>>): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Student.
     * @param {StudentUpdateArgs} args - Arguments to update one Student.
     * @example
     * // Update one Student
     * const student = await prisma.student.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends StudentUpdateArgs>(args: SelectSubset<T, StudentUpdateArgs<ExtArgs>>): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Students.
     * @param {StudentDeleteManyArgs} args - Arguments to filter Students to delete.
     * @example
     * // Delete a few Students
     * const { count } = await prisma.student.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends StudentDeleteManyArgs>(args?: SelectSubset<T, StudentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Students.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Students
     * const student = await prisma.student.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends StudentUpdateManyArgs>(args: SelectSubset<T, StudentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Student.
     * @param {StudentUpsertArgs} args - Arguments to update or create a Student.
     * @example
     * // Update or create a Student
     * const student = await prisma.student.upsert({
     *   create: {
     *     // ... data to create a Student
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Student we want to update
     *   }
     * })
     */
    upsert<T extends StudentUpsertArgs>(args: SelectSubset<T, StudentUpsertArgs<ExtArgs>>): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Students.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentCountArgs} args - Arguments to filter Students to count.
     * @example
     * // Count the number of Students
     * const count = await prisma.student.count({
     *   where: {
     *     // ... the filter for the Students we want to count
     *   }
     * })
    **/
    count<T extends StudentCountArgs>(
      args?: Subset<T, StudentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StudentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Student.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StudentAggregateArgs>(args: Subset<T, StudentAggregateArgs>): Prisma.PrismaPromise<GetStudentAggregateType<T>>

    /**
     * Group by Student.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends StudentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: StudentGroupByArgs['orderBy'] }
        : { orderBy?: StudentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, StudentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStudentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Student model
   */
  readonly fields: StudentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Student.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__StudentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    class<T extends ClassesDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ClassesDefaultArgs<ExtArgs>>): Prisma__ClassesClient<$Result.GetResult<Prisma.$ClassesPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    school<T extends SchoolDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SchoolDefaultArgs<ExtArgs>>): Prisma__SchoolClient<$Result.GetResult<Prisma.$SchoolPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    user<T extends Attendance_userDefaultArgs<ExtArgs> = {}>(args?: Subset<T, Attendance_userDefaultArgs<ExtArgs>>): Prisma__Attendance_userClient<$Result.GetResult<Prisma.$Attendance_userPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    attendance<T extends Student$attendanceArgs<ExtArgs> = {}>(args?: Subset<T, Student$attendanceArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudentAttendancePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Student model
   */
  interface StudentFieldRefs {
    readonly id: FieldRef<"Student", 'Int'>
    readonly username: FieldRef<"Student", 'String'>
    readonly name: FieldRef<"Student", 'String'>
    readonly gender: FieldRef<"Student", 'Gender'>
    readonly email: FieldRef<"Student", 'String'>
    readonly mobile: FieldRef<"Student", 'String'>
    readonly class_id: FieldRef<"Student", 'Int'>
    readonly school_id: FieldRef<"Student", 'Int'>
    readonly photo: FieldRef<"Student", 'Bytes'>
    readonly password: FieldRef<"Student", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Student findUnique
   */
  export type StudentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Student
     */
    omit?: StudentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
    /**
     * Filter, which Student to fetch.
     */
    where: StudentWhereUniqueInput
  }

  /**
   * Student findUniqueOrThrow
   */
  export type StudentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Student
     */
    omit?: StudentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
    /**
     * Filter, which Student to fetch.
     */
    where: StudentWhereUniqueInput
  }

  /**
   * Student findFirst
   */
  export type StudentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Student
     */
    omit?: StudentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
    /**
     * Filter, which Student to fetch.
     */
    where?: StudentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Students to fetch.
     */
    orderBy?: StudentOrderByWithRelationInput | StudentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Students.
     */
    cursor?: StudentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Students from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Students.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Students.
     */
    distinct?: StudentScalarFieldEnum | StudentScalarFieldEnum[]
  }

  /**
   * Student findFirstOrThrow
   */
  export type StudentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Student
     */
    omit?: StudentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
    /**
     * Filter, which Student to fetch.
     */
    where?: StudentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Students to fetch.
     */
    orderBy?: StudentOrderByWithRelationInput | StudentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Students.
     */
    cursor?: StudentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Students from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Students.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Students.
     */
    distinct?: StudentScalarFieldEnum | StudentScalarFieldEnum[]
  }

  /**
   * Student findMany
   */
  export type StudentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Student
     */
    omit?: StudentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
    /**
     * Filter, which Students to fetch.
     */
    where?: StudentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Students to fetch.
     */
    orderBy?: StudentOrderByWithRelationInput | StudentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Students.
     */
    cursor?: StudentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Students from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Students.
     */
    skip?: number
    distinct?: StudentScalarFieldEnum | StudentScalarFieldEnum[]
  }

  /**
   * Student create
   */
  export type StudentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Student
     */
    omit?: StudentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
    /**
     * The data needed to create a Student.
     */
    data: XOR<StudentCreateInput, StudentUncheckedCreateInput>
  }

  /**
   * Student createMany
   */
  export type StudentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Students.
     */
    data: StudentCreateManyInput | StudentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Student update
   */
  export type StudentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Student
     */
    omit?: StudentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
    /**
     * The data needed to update a Student.
     */
    data: XOR<StudentUpdateInput, StudentUncheckedUpdateInput>
    /**
     * Choose, which Student to update.
     */
    where: StudentWhereUniqueInput
  }

  /**
   * Student updateMany
   */
  export type StudentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Students.
     */
    data: XOR<StudentUpdateManyMutationInput, StudentUncheckedUpdateManyInput>
    /**
     * Filter which Students to update
     */
    where?: StudentWhereInput
    /**
     * Limit how many Students to update.
     */
    limit?: number
  }

  /**
   * Student upsert
   */
  export type StudentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Student
     */
    omit?: StudentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
    /**
     * The filter to search for the Student to update in case it exists.
     */
    where: StudentWhereUniqueInput
    /**
     * In case the Student found by the `where` argument doesn't exist, create a new Student with this data.
     */
    create: XOR<StudentCreateInput, StudentUncheckedCreateInput>
    /**
     * In case the Student was found with the provided `where` argument, update it with this data.
     */
    update: XOR<StudentUpdateInput, StudentUncheckedUpdateInput>
  }

  /**
   * Student delete
   */
  export type StudentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Student
     */
    omit?: StudentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
    /**
     * Filter which Student to delete.
     */
    where: StudentWhereUniqueInput
  }

  /**
   * Student deleteMany
   */
  export type StudentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Students to delete
     */
    where?: StudentWhereInput
    /**
     * Limit how many Students to delete.
     */
    limit?: number
  }

  /**
   * Student.attendance
   */
  export type Student$attendanceArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentAttendance
     */
    select?: StudentAttendanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudentAttendance
     */
    omit?: StudentAttendanceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentAttendanceInclude<ExtArgs> | null
    where?: StudentAttendanceWhereInput
    orderBy?: StudentAttendanceOrderByWithRelationInput | StudentAttendanceOrderByWithRelationInput[]
    cursor?: StudentAttendanceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: StudentAttendanceScalarFieldEnum | StudentAttendanceScalarFieldEnum[]
  }

  /**
   * Student without action
   */
  export type StudentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Student
     */
    omit?: StudentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
  }


  /**
   * Model StudentAttendance
   */

  export type AggregateStudentAttendance = {
    _count: StudentAttendanceCountAggregateOutputType | null
    _avg: StudentAttendanceAvgAggregateOutputType | null
    _sum: StudentAttendanceSumAggregateOutputType | null
    _min: StudentAttendanceMinAggregateOutputType | null
    _max: StudentAttendanceMaxAggregateOutputType | null
  }

  export type StudentAttendanceAvgAggregateOutputType = {
    school_id: number | null
    class_id: number | null
  }

  export type StudentAttendanceSumAggregateOutputType = {
    school_id: number | null
    class_id: number | null
  }

  export type StudentAttendanceMinAggregateOutputType = {
    username: string | null
    date: Date | null
    fn_status: string | null
    an_status: string | null
    school_id: number | null
    class_id: number | null
  }

  export type StudentAttendanceMaxAggregateOutputType = {
    username: string | null
    date: Date | null
    fn_status: string | null
    an_status: string | null
    school_id: number | null
    class_id: number | null
  }

  export type StudentAttendanceCountAggregateOutputType = {
    username: number
    date: number
    fn_status: number
    an_status: number
    school_id: number
    class_id: number
    _all: number
  }


  export type StudentAttendanceAvgAggregateInputType = {
    school_id?: true
    class_id?: true
  }

  export type StudentAttendanceSumAggregateInputType = {
    school_id?: true
    class_id?: true
  }

  export type StudentAttendanceMinAggregateInputType = {
    username?: true
    date?: true
    fn_status?: true
    an_status?: true
    school_id?: true
    class_id?: true
  }

  export type StudentAttendanceMaxAggregateInputType = {
    username?: true
    date?: true
    fn_status?: true
    an_status?: true
    school_id?: true
    class_id?: true
  }

  export type StudentAttendanceCountAggregateInputType = {
    username?: true
    date?: true
    fn_status?: true
    an_status?: true
    school_id?: true
    class_id?: true
    _all?: true
  }

  export type StudentAttendanceAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which StudentAttendance to aggregate.
     */
    where?: StudentAttendanceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StudentAttendances to fetch.
     */
    orderBy?: StudentAttendanceOrderByWithRelationInput | StudentAttendanceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: StudentAttendanceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StudentAttendances from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StudentAttendances.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned StudentAttendances
    **/
    _count?: true | StudentAttendanceCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: StudentAttendanceAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: StudentAttendanceSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StudentAttendanceMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StudentAttendanceMaxAggregateInputType
  }

  export type GetStudentAttendanceAggregateType<T extends StudentAttendanceAggregateArgs> = {
        [P in keyof T & keyof AggregateStudentAttendance]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStudentAttendance[P]>
      : GetScalarType<T[P], AggregateStudentAttendance[P]>
  }




  export type StudentAttendanceGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StudentAttendanceWhereInput
    orderBy?: StudentAttendanceOrderByWithAggregationInput | StudentAttendanceOrderByWithAggregationInput[]
    by: StudentAttendanceScalarFieldEnum[] | StudentAttendanceScalarFieldEnum
    having?: StudentAttendanceScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StudentAttendanceCountAggregateInputType | true
    _avg?: StudentAttendanceAvgAggregateInputType
    _sum?: StudentAttendanceSumAggregateInputType
    _min?: StudentAttendanceMinAggregateInputType
    _max?: StudentAttendanceMaxAggregateInputType
  }

  export type StudentAttendanceGroupByOutputType = {
    username: string
    date: Date
    fn_status: string
    an_status: string
    school_id: number
    class_id: number
    _count: StudentAttendanceCountAggregateOutputType | null
    _avg: StudentAttendanceAvgAggregateOutputType | null
    _sum: StudentAttendanceSumAggregateOutputType | null
    _min: StudentAttendanceMinAggregateOutputType | null
    _max: StudentAttendanceMaxAggregateOutputType | null
  }

  type GetStudentAttendanceGroupByPayload<T extends StudentAttendanceGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<StudentAttendanceGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StudentAttendanceGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StudentAttendanceGroupByOutputType[P]>
            : GetScalarType<T[P], StudentAttendanceGroupByOutputType[P]>
        }
      >
    >


  export type StudentAttendanceSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    username?: boolean
    date?: boolean
    fn_status?: boolean
    an_status?: boolean
    school_id?: boolean
    class_id?: boolean
    class?: boolean | ClassesDefaultArgs<ExtArgs>
    student?: boolean | StudentDefaultArgs<ExtArgs>
    school?: boolean | SchoolDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["studentAttendance"]>



  export type StudentAttendanceSelectScalar = {
    username?: boolean
    date?: boolean
    fn_status?: boolean
    an_status?: boolean
    school_id?: boolean
    class_id?: boolean
  }

  export type StudentAttendanceOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"username" | "date" | "fn_status" | "an_status" | "school_id" | "class_id", ExtArgs["result"]["studentAttendance"]>
  export type StudentAttendanceInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    class?: boolean | ClassesDefaultArgs<ExtArgs>
    student?: boolean | StudentDefaultArgs<ExtArgs>
    school?: boolean | SchoolDefaultArgs<ExtArgs>
  }

  export type $StudentAttendancePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "StudentAttendance"
    objects: {
      class: Prisma.$ClassesPayload<ExtArgs>
      student: Prisma.$StudentPayload<ExtArgs>
      school: Prisma.$SchoolPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      username: string
      date: Date
      fn_status: string
      an_status: string
      school_id: number
      class_id: number
    }, ExtArgs["result"]["studentAttendance"]>
    composites: {}
  }

  type StudentAttendanceGetPayload<S extends boolean | null | undefined | StudentAttendanceDefaultArgs> = $Result.GetResult<Prisma.$StudentAttendancePayload, S>

  type StudentAttendanceCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<StudentAttendanceFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: StudentAttendanceCountAggregateInputType | true
    }

  export interface StudentAttendanceDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['StudentAttendance'], meta: { name: 'StudentAttendance' } }
    /**
     * Find zero or one StudentAttendance that matches the filter.
     * @param {StudentAttendanceFindUniqueArgs} args - Arguments to find a StudentAttendance
     * @example
     * // Get one StudentAttendance
     * const studentAttendance = await prisma.studentAttendance.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends StudentAttendanceFindUniqueArgs>(args: SelectSubset<T, StudentAttendanceFindUniqueArgs<ExtArgs>>): Prisma__StudentAttendanceClient<$Result.GetResult<Prisma.$StudentAttendancePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one StudentAttendance that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {StudentAttendanceFindUniqueOrThrowArgs} args - Arguments to find a StudentAttendance
     * @example
     * // Get one StudentAttendance
     * const studentAttendance = await prisma.studentAttendance.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends StudentAttendanceFindUniqueOrThrowArgs>(args: SelectSubset<T, StudentAttendanceFindUniqueOrThrowArgs<ExtArgs>>): Prisma__StudentAttendanceClient<$Result.GetResult<Prisma.$StudentAttendancePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first StudentAttendance that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentAttendanceFindFirstArgs} args - Arguments to find a StudentAttendance
     * @example
     * // Get one StudentAttendance
     * const studentAttendance = await prisma.studentAttendance.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends StudentAttendanceFindFirstArgs>(args?: SelectSubset<T, StudentAttendanceFindFirstArgs<ExtArgs>>): Prisma__StudentAttendanceClient<$Result.GetResult<Prisma.$StudentAttendancePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first StudentAttendance that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentAttendanceFindFirstOrThrowArgs} args - Arguments to find a StudentAttendance
     * @example
     * // Get one StudentAttendance
     * const studentAttendance = await prisma.studentAttendance.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends StudentAttendanceFindFirstOrThrowArgs>(args?: SelectSubset<T, StudentAttendanceFindFirstOrThrowArgs<ExtArgs>>): Prisma__StudentAttendanceClient<$Result.GetResult<Prisma.$StudentAttendancePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more StudentAttendances that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentAttendanceFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all StudentAttendances
     * const studentAttendances = await prisma.studentAttendance.findMany()
     * 
     * // Get first 10 StudentAttendances
     * const studentAttendances = await prisma.studentAttendance.findMany({ take: 10 })
     * 
     * // Only select the `username`
     * const studentAttendanceWithUsernameOnly = await prisma.studentAttendance.findMany({ select: { username: true } })
     * 
     */
    findMany<T extends StudentAttendanceFindManyArgs>(args?: SelectSubset<T, StudentAttendanceFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudentAttendancePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a StudentAttendance.
     * @param {StudentAttendanceCreateArgs} args - Arguments to create a StudentAttendance.
     * @example
     * // Create one StudentAttendance
     * const StudentAttendance = await prisma.studentAttendance.create({
     *   data: {
     *     // ... data to create a StudentAttendance
     *   }
     * })
     * 
     */
    create<T extends StudentAttendanceCreateArgs>(args: SelectSubset<T, StudentAttendanceCreateArgs<ExtArgs>>): Prisma__StudentAttendanceClient<$Result.GetResult<Prisma.$StudentAttendancePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many StudentAttendances.
     * @param {StudentAttendanceCreateManyArgs} args - Arguments to create many StudentAttendances.
     * @example
     * // Create many StudentAttendances
     * const studentAttendance = await prisma.studentAttendance.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends StudentAttendanceCreateManyArgs>(args?: SelectSubset<T, StudentAttendanceCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a StudentAttendance.
     * @param {StudentAttendanceDeleteArgs} args - Arguments to delete one StudentAttendance.
     * @example
     * // Delete one StudentAttendance
     * const StudentAttendance = await prisma.studentAttendance.delete({
     *   where: {
     *     // ... filter to delete one StudentAttendance
     *   }
     * })
     * 
     */
    delete<T extends StudentAttendanceDeleteArgs>(args: SelectSubset<T, StudentAttendanceDeleteArgs<ExtArgs>>): Prisma__StudentAttendanceClient<$Result.GetResult<Prisma.$StudentAttendancePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one StudentAttendance.
     * @param {StudentAttendanceUpdateArgs} args - Arguments to update one StudentAttendance.
     * @example
     * // Update one StudentAttendance
     * const studentAttendance = await prisma.studentAttendance.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends StudentAttendanceUpdateArgs>(args: SelectSubset<T, StudentAttendanceUpdateArgs<ExtArgs>>): Prisma__StudentAttendanceClient<$Result.GetResult<Prisma.$StudentAttendancePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more StudentAttendances.
     * @param {StudentAttendanceDeleteManyArgs} args - Arguments to filter StudentAttendances to delete.
     * @example
     * // Delete a few StudentAttendances
     * const { count } = await prisma.studentAttendance.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends StudentAttendanceDeleteManyArgs>(args?: SelectSubset<T, StudentAttendanceDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more StudentAttendances.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentAttendanceUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many StudentAttendances
     * const studentAttendance = await prisma.studentAttendance.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends StudentAttendanceUpdateManyArgs>(args: SelectSubset<T, StudentAttendanceUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one StudentAttendance.
     * @param {StudentAttendanceUpsertArgs} args - Arguments to update or create a StudentAttendance.
     * @example
     * // Update or create a StudentAttendance
     * const studentAttendance = await prisma.studentAttendance.upsert({
     *   create: {
     *     // ... data to create a StudentAttendance
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the StudentAttendance we want to update
     *   }
     * })
     */
    upsert<T extends StudentAttendanceUpsertArgs>(args: SelectSubset<T, StudentAttendanceUpsertArgs<ExtArgs>>): Prisma__StudentAttendanceClient<$Result.GetResult<Prisma.$StudentAttendancePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of StudentAttendances.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentAttendanceCountArgs} args - Arguments to filter StudentAttendances to count.
     * @example
     * // Count the number of StudentAttendances
     * const count = await prisma.studentAttendance.count({
     *   where: {
     *     // ... the filter for the StudentAttendances we want to count
     *   }
     * })
    **/
    count<T extends StudentAttendanceCountArgs>(
      args?: Subset<T, StudentAttendanceCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StudentAttendanceCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a StudentAttendance.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentAttendanceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StudentAttendanceAggregateArgs>(args: Subset<T, StudentAttendanceAggregateArgs>): Prisma.PrismaPromise<GetStudentAttendanceAggregateType<T>>

    /**
     * Group by StudentAttendance.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentAttendanceGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends StudentAttendanceGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: StudentAttendanceGroupByArgs['orderBy'] }
        : { orderBy?: StudentAttendanceGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, StudentAttendanceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStudentAttendanceGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the StudentAttendance model
   */
  readonly fields: StudentAttendanceFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for StudentAttendance.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__StudentAttendanceClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    class<T extends ClassesDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ClassesDefaultArgs<ExtArgs>>): Prisma__ClassesClient<$Result.GetResult<Prisma.$ClassesPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    student<T extends StudentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, StudentDefaultArgs<ExtArgs>>): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    school<T extends SchoolDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SchoolDefaultArgs<ExtArgs>>): Prisma__SchoolClient<$Result.GetResult<Prisma.$SchoolPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the StudentAttendance model
   */
  interface StudentAttendanceFieldRefs {
    readonly username: FieldRef<"StudentAttendance", 'String'>
    readonly date: FieldRef<"StudentAttendance", 'DateTime'>
    readonly fn_status: FieldRef<"StudentAttendance", 'String'>
    readonly an_status: FieldRef<"StudentAttendance", 'String'>
    readonly school_id: FieldRef<"StudentAttendance", 'Int'>
    readonly class_id: FieldRef<"StudentAttendance", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * StudentAttendance findUnique
   */
  export type StudentAttendanceFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentAttendance
     */
    select?: StudentAttendanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudentAttendance
     */
    omit?: StudentAttendanceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentAttendanceInclude<ExtArgs> | null
    /**
     * Filter, which StudentAttendance to fetch.
     */
    where: StudentAttendanceWhereUniqueInput
  }

  /**
   * StudentAttendance findUniqueOrThrow
   */
  export type StudentAttendanceFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentAttendance
     */
    select?: StudentAttendanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudentAttendance
     */
    omit?: StudentAttendanceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentAttendanceInclude<ExtArgs> | null
    /**
     * Filter, which StudentAttendance to fetch.
     */
    where: StudentAttendanceWhereUniqueInput
  }

  /**
   * StudentAttendance findFirst
   */
  export type StudentAttendanceFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentAttendance
     */
    select?: StudentAttendanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudentAttendance
     */
    omit?: StudentAttendanceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentAttendanceInclude<ExtArgs> | null
    /**
     * Filter, which StudentAttendance to fetch.
     */
    where?: StudentAttendanceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StudentAttendances to fetch.
     */
    orderBy?: StudentAttendanceOrderByWithRelationInput | StudentAttendanceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for StudentAttendances.
     */
    cursor?: StudentAttendanceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StudentAttendances from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StudentAttendances.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of StudentAttendances.
     */
    distinct?: StudentAttendanceScalarFieldEnum | StudentAttendanceScalarFieldEnum[]
  }

  /**
   * StudentAttendance findFirstOrThrow
   */
  export type StudentAttendanceFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentAttendance
     */
    select?: StudentAttendanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudentAttendance
     */
    omit?: StudentAttendanceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentAttendanceInclude<ExtArgs> | null
    /**
     * Filter, which StudentAttendance to fetch.
     */
    where?: StudentAttendanceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StudentAttendances to fetch.
     */
    orderBy?: StudentAttendanceOrderByWithRelationInput | StudentAttendanceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for StudentAttendances.
     */
    cursor?: StudentAttendanceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StudentAttendances from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StudentAttendances.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of StudentAttendances.
     */
    distinct?: StudentAttendanceScalarFieldEnum | StudentAttendanceScalarFieldEnum[]
  }

  /**
   * StudentAttendance findMany
   */
  export type StudentAttendanceFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentAttendance
     */
    select?: StudentAttendanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudentAttendance
     */
    omit?: StudentAttendanceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentAttendanceInclude<ExtArgs> | null
    /**
     * Filter, which StudentAttendances to fetch.
     */
    where?: StudentAttendanceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StudentAttendances to fetch.
     */
    orderBy?: StudentAttendanceOrderByWithRelationInput | StudentAttendanceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing StudentAttendances.
     */
    cursor?: StudentAttendanceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StudentAttendances from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StudentAttendances.
     */
    skip?: number
    distinct?: StudentAttendanceScalarFieldEnum | StudentAttendanceScalarFieldEnum[]
  }

  /**
   * StudentAttendance create
   */
  export type StudentAttendanceCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentAttendance
     */
    select?: StudentAttendanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudentAttendance
     */
    omit?: StudentAttendanceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentAttendanceInclude<ExtArgs> | null
    /**
     * The data needed to create a StudentAttendance.
     */
    data: XOR<StudentAttendanceCreateInput, StudentAttendanceUncheckedCreateInput>
  }

  /**
   * StudentAttendance createMany
   */
  export type StudentAttendanceCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many StudentAttendances.
     */
    data: StudentAttendanceCreateManyInput | StudentAttendanceCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * StudentAttendance update
   */
  export type StudentAttendanceUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentAttendance
     */
    select?: StudentAttendanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudentAttendance
     */
    omit?: StudentAttendanceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentAttendanceInclude<ExtArgs> | null
    /**
     * The data needed to update a StudentAttendance.
     */
    data: XOR<StudentAttendanceUpdateInput, StudentAttendanceUncheckedUpdateInput>
    /**
     * Choose, which StudentAttendance to update.
     */
    where: StudentAttendanceWhereUniqueInput
  }

  /**
   * StudentAttendance updateMany
   */
  export type StudentAttendanceUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update StudentAttendances.
     */
    data: XOR<StudentAttendanceUpdateManyMutationInput, StudentAttendanceUncheckedUpdateManyInput>
    /**
     * Filter which StudentAttendances to update
     */
    where?: StudentAttendanceWhereInput
    /**
     * Limit how many StudentAttendances to update.
     */
    limit?: number
  }

  /**
   * StudentAttendance upsert
   */
  export type StudentAttendanceUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentAttendance
     */
    select?: StudentAttendanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudentAttendance
     */
    omit?: StudentAttendanceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentAttendanceInclude<ExtArgs> | null
    /**
     * The filter to search for the StudentAttendance to update in case it exists.
     */
    where: StudentAttendanceWhereUniqueInput
    /**
     * In case the StudentAttendance found by the `where` argument doesn't exist, create a new StudentAttendance with this data.
     */
    create: XOR<StudentAttendanceCreateInput, StudentAttendanceUncheckedCreateInput>
    /**
     * In case the StudentAttendance was found with the provided `where` argument, update it with this data.
     */
    update: XOR<StudentAttendanceUpdateInput, StudentAttendanceUncheckedUpdateInput>
  }

  /**
   * StudentAttendance delete
   */
  export type StudentAttendanceDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentAttendance
     */
    select?: StudentAttendanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudentAttendance
     */
    omit?: StudentAttendanceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentAttendanceInclude<ExtArgs> | null
    /**
     * Filter which StudentAttendance to delete.
     */
    where: StudentAttendanceWhereUniqueInput
  }

  /**
   * StudentAttendance deleteMany
   */
  export type StudentAttendanceDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which StudentAttendances to delete
     */
    where?: StudentAttendanceWhereInput
    /**
     * Limit how many StudentAttendances to delete.
     */
    limit?: number
  }

  /**
   * StudentAttendance without action
   */
  export type StudentAttendanceDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentAttendance
     */
    select?: StudentAttendanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudentAttendance
     */
    omit?: StudentAttendanceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentAttendanceInclude<ExtArgs> | null
  }


  /**
   * Model ClassTimetable
   */

  export type AggregateClassTimetable = {
    _count: ClassTimetableCountAggregateOutputType | null
    _avg: ClassTimetableAvgAggregateOutputType | null
    _sum: ClassTimetableSumAggregateOutputType | null
    _min: ClassTimetableMinAggregateOutputType | null
    _max: ClassTimetableMaxAggregateOutputType | null
  }

  export type ClassTimetableAvgAggregateOutputType = {
    id: number | null
    schoolId: number | null
    classesId: number | null
    periodNumber: number | null
  }

  export type ClassTimetableSumAggregateOutputType = {
    id: number | null
    schoolId: number | null
    classesId: number | null
    periodNumber: number | null
  }

  export type ClassTimetableMinAggregateOutputType = {
    id: number | null
    schoolId: number | null
    classesId: number | null
    dayOfWeek: $Enums.DayOfWeek | null
    periodNumber: number | null
    subject: string | null
  }

  export type ClassTimetableMaxAggregateOutputType = {
    id: number | null
    schoolId: number | null
    classesId: number | null
    dayOfWeek: $Enums.DayOfWeek | null
    periodNumber: number | null
    subject: string | null
  }

  export type ClassTimetableCountAggregateOutputType = {
    id: number
    schoolId: number
    classesId: number
    dayOfWeek: number
    periodNumber: number
    subject: number
    _all: number
  }


  export type ClassTimetableAvgAggregateInputType = {
    id?: true
    schoolId?: true
    classesId?: true
    periodNumber?: true
  }

  export type ClassTimetableSumAggregateInputType = {
    id?: true
    schoolId?: true
    classesId?: true
    periodNumber?: true
  }

  export type ClassTimetableMinAggregateInputType = {
    id?: true
    schoolId?: true
    classesId?: true
    dayOfWeek?: true
    periodNumber?: true
    subject?: true
  }

  export type ClassTimetableMaxAggregateInputType = {
    id?: true
    schoolId?: true
    classesId?: true
    dayOfWeek?: true
    periodNumber?: true
    subject?: true
  }

  export type ClassTimetableCountAggregateInputType = {
    id?: true
    schoolId?: true
    classesId?: true
    dayOfWeek?: true
    periodNumber?: true
    subject?: true
    _all?: true
  }

  export type ClassTimetableAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ClassTimetable to aggregate.
     */
    where?: ClassTimetableWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ClassTimetables to fetch.
     */
    orderBy?: ClassTimetableOrderByWithRelationInput | ClassTimetableOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ClassTimetableWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ClassTimetables from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ClassTimetables.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ClassTimetables
    **/
    _count?: true | ClassTimetableCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ClassTimetableAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ClassTimetableSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ClassTimetableMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ClassTimetableMaxAggregateInputType
  }

  export type GetClassTimetableAggregateType<T extends ClassTimetableAggregateArgs> = {
        [P in keyof T & keyof AggregateClassTimetable]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateClassTimetable[P]>
      : GetScalarType<T[P], AggregateClassTimetable[P]>
  }




  export type ClassTimetableGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ClassTimetableWhereInput
    orderBy?: ClassTimetableOrderByWithAggregationInput | ClassTimetableOrderByWithAggregationInput[]
    by: ClassTimetableScalarFieldEnum[] | ClassTimetableScalarFieldEnum
    having?: ClassTimetableScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ClassTimetableCountAggregateInputType | true
    _avg?: ClassTimetableAvgAggregateInputType
    _sum?: ClassTimetableSumAggregateInputType
    _min?: ClassTimetableMinAggregateInputType
    _max?: ClassTimetableMaxAggregateInputType
  }

  export type ClassTimetableGroupByOutputType = {
    id: number
    schoolId: number | null
    classesId: number | null
    dayOfWeek: $Enums.DayOfWeek
    periodNumber: number
    subject: string
    _count: ClassTimetableCountAggregateOutputType | null
    _avg: ClassTimetableAvgAggregateOutputType | null
    _sum: ClassTimetableSumAggregateOutputType | null
    _min: ClassTimetableMinAggregateOutputType | null
    _max: ClassTimetableMaxAggregateOutputType | null
  }

  type GetClassTimetableGroupByPayload<T extends ClassTimetableGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ClassTimetableGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ClassTimetableGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ClassTimetableGroupByOutputType[P]>
            : GetScalarType<T[P], ClassTimetableGroupByOutputType[P]>
        }
      >
    >


  export type ClassTimetableSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    schoolId?: boolean
    classesId?: boolean
    dayOfWeek?: boolean
    periodNumber?: boolean
    subject?: boolean
    School?: boolean | ClassTimetable$SchoolArgs<ExtArgs>
    Classes?: boolean | ClassTimetable$ClassesArgs<ExtArgs>
  }, ExtArgs["result"]["classTimetable"]>



  export type ClassTimetableSelectScalar = {
    id?: boolean
    schoolId?: boolean
    classesId?: boolean
    dayOfWeek?: boolean
    periodNumber?: boolean
    subject?: boolean
  }

  export type ClassTimetableOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "schoolId" | "classesId" | "dayOfWeek" | "periodNumber" | "subject", ExtArgs["result"]["classTimetable"]>
  export type ClassTimetableInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    School?: boolean | ClassTimetable$SchoolArgs<ExtArgs>
    Classes?: boolean | ClassTimetable$ClassesArgs<ExtArgs>
  }

  export type $ClassTimetablePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ClassTimetable"
    objects: {
      School: Prisma.$SchoolPayload<ExtArgs> | null
      Classes: Prisma.$ClassesPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      schoolId: number | null
      classesId: number | null
      dayOfWeek: $Enums.DayOfWeek
      periodNumber: number
      subject: string
    }, ExtArgs["result"]["classTimetable"]>
    composites: {}
  }

  type ClassTimetableGetPayload<S extends boolean | null | undefined | ClassTimetableDefaultArgs> = $Result.GetResult<Prisma.$ClassTimetablePayload, S>

  type ClassTimetableCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ClassTimetableFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ClassTimetableCountAggregateInputType | true
    }

  export interface ClassTimetableDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ClassTimetable'], meta: { name: 'ClassTimetable' } }
    /**
     * Find zero or one ClassTimetable that matches the filter.
     * @param {ClassTimetableFindUniqueArgs} args - Arguments to find a ClassTimetable
     * @example
     * // Get one ClassTimetable
     * const classTimetable = await prisma.classTimetable.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ClassTimetableFindUniqueArgs>(args: SelectSubset<T, ClassTimetableFindUniqueArgs<ExtArgs>>): Prisma__ClassTimetableClient<$Result.GetResult<Prisma.$ClassTimetablePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ClassTimetable that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ClassTimetableFindUniqueOrThrowArgs} args - Arguments to find a ClassTimetable
     * @example
     * // Get one ClassTimetable
     * const classTimetable = await prisma.classTimetable.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ClassTimetableFindUniqueOrThrowArgs>(args: SelectSubset<T, ClassTimetableFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ClassTimetableClient<$Result.GetResult<Prisma.$ClassTimetablePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ClassTimetable that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClassTimetableFindFirstArgs} args - Arguments to find a ClassTimetable
     * @example
     * // Get one ClassTimetable
     * const classTimetable = await prisma.classTimetable.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ClassTimetableFindFirstArgs>(args?: SelectSubset<T, ClassTimetableFindFirstArgs<ExtArgs>>): Prisma__ClassTimetableClient<$Result.GetResult<Prisma.$ClassTimetablePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ClassTimetable that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClassTimetableFindFirstOrThrowArgs} args - Arguments to find a ClassTimetable
     * @example
     * // Get one ClassTimetable
     * const classTimetable = await prisma.classTimetable.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ClassTimetableFindFirstOrThrowArgs>(args?: SelectSubset<T, ClassTimetableFindFirstOrThrowArgs<ExtArgs>>): Prisma__ClassTimetableClient<$Result.GetResult<Prisma.$ClassTimetablePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ClassTimetables that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClassTimetableFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ClassTimetables
     * const classTimetables = await prisma.classTimetable.findMany()
     * 
     * // Get first 10 ClassTimetables
     * const classTimetables = await prisma.classTimetable.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const classTimetableWithIdOnly = await prisma.classTimetable.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ClassTimetableFindManyArgs>(args?: SelectSubset<T, ClassTimetableFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClassTimetablePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ClassTimetable.
     * @param {ClassTimetableCreateArgs} args - Arguments to create a ClassTimetable.
     * @example
     * // Create one ClassTimetable
     * const ClassTimetable = await prisma.classTimetable.create({
     *   data: {
     *     // ... data to create a ClassTimetable
     *   }
     * })
     * 
     */
    create<T extends ClassTimetableCreateArgs>(args: SelectSubset<T, ClassTimetableCreateArgs<ExtArgs>>): Prisma__ClassTimetableClient<$Result.GetResult<Prisma.$ClassTimetablePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ClassTimetables.
     * @param {ClassTimetableCreateManyArgs} args - Arguments to create many ClassTimetables.
     * @example
     * // Create many ClassTimetables
     * const classTimetable = await prisma.classTimetable.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ClassTimetableCreateManyArgs>(args?: SelectSubset<T, ClassTimetableCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a ClassTimetable.
     * @param {ClassTimetableDeleteArgs} args - Arguments to delete one ClassTimetable.
     * @example
     * // Delete one ClassTimetable
     * const ClassTimetable = await prisma.classTimetable.delete({
     *   where: {
     *     // ... filter to delete one ClassTimetable
     *   }
     * })
     * 
     */
    delete<T extends ClassTimetableDeleteArgs>(args: SelectSubset<T, ClassTimetableDeleteArgs<ExtArgs>>): Prisma__ClassTimetableClient<$Result.GetResult<Prisma.$ClassTimetablePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ClassTimetable.
     * @param {ClassTimetableUpdateArgs} args - Arguments to update one ClassTimetable.
     * @example
     * // Update one ClassTimetable
     * const classTimetable = await prisma.classTimetable.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ClassTimetableUpdateArgs>(args: SelectSubset<T, ClassTimetableUpdateArgs<ExtArgs>>): Prisma__ClassTimetableClient<$Result.GetResult<Prisma.$ClassTimetablePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ClassTimetables.
     * @param {ClassTimetableDeleteManyArgs} args - Arguments to filter ClassTimetables to delete.
     * @example
     * // Delete a few ClassTimetables
     * const { count } = await prisma.classTimetable.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ClassTimetableDeleteManyArgs>(args?: SelectSubset<T, ClassTimetableDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ClassTimetables.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClassTimetableUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ClassTimetables
     * const classTimetable = await prisma.classTimetable.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ClassTimetableUpdateManyArgs>(args: SelectSubset<T, ClassTimetableUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ClassTimetable.
     * @param {ClassTimetableUpsertArgs} args - Arguments to update or create a ClassTimetable.
     * @example
     * // Update or create a ClassTimetable
     * const classTimetable = await prisma.classTimetable.upsert({
     *   create: {
     *     // ... data to create a ClassTimetable
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ClassTimetable we want to update
     *   }
     * })
     */
    upsert<T extends ClassTimetableUpsertArgs>(args: SelectSubset<T, ClassTimetableUpsertArgs<ExtArgs>>): Prisma__ClassTimetableClient<$Result.GetResult<Prisma.$ClassTimetablePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ClassTimetables.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClassTimetableCountArgs} args - Arguments to filter ClassTimetables to count.
     * @example
     * // Count the number of ClassTimetables
     * const count = await prisma.classTimetable.count({
     *   where: {
     *     // ... the filter for the ClassTimetables we want to count
     *   }
     * })
    **/
    count<T extends ClassTimetableCountArgs>(
      args?: Subset<T, ClassTimetableCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ClassTimetableCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ClassTimetable.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClassTimetableAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ClassTimetableAggregateArgs>(args: Subset<T, ClassTimetableAggregateArgs>): Prisma.PrismaPromise<GetClassTimetableAggregateType<T>>

    /**
     * Group by ClassTimetable.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClassTimetableGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ClassTimetableGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ClassTimetableGroupByArgs['orderBy'] }
        : { orderBy?: ClassTimetableGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ClassTimetableGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetClassTimetableGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ClassTimetable model
   */
  readonly fields: ClassTimetableFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ClassTimetable.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ClassTimetableClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    School<T extends ClassTimetable$SchoolArgs<ExtArgs> = {}>(args?: Subset<T, ClassTimetable$SchoolArgs<ExtArgs>>): Prisma__SchoolClient<$Result.GetResult<Prisma.$SchoolPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    Classes<T extends ClassTimetable$ClassesArgs<ExtArgs> = {}>(args?: Subset<T, ClassTimetable$ClassesArgs<ExtArgs>>): Prisma__ClassesClient<$Result.GetResult<Prisma.$ClassesPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ClassTimetable model
   */
  interface ClassTimetableFieldRefs {
    readonly id: FieldRef<"ClassTimetable", 'Int'>
    readonly schoolId: FieldRef<"ClassTimetable", 'Int'>
    readonly classesId: FieldRef<"ClassTimetable", 'Int'>
    readonly dayOfWeek: FieldRef<"ClassTimetable", 'DayOfWeek'>
    readonly periodNumber: FieldRef<"ClassTimetable", 'Int'>
    readonly subject: FieldRef<"ClassTimetable", 'String'>
  }
    

  // Custom InputTypes
  /**
   * ClassTimetable findUnique
   */
  export type ClassTimetableFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClassTimetable
     */
    select?: ClassTimetableSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClassTimetable
     */
    omit?: ClassTimetableOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassTimetableInclude<ExtArgs> | null
    /**
     * Filter, which ClassTimetable to fetch.
     */
    where: ClassTimetableWhereUniqueInput
  }

  /**
   * ClassTimetable findUniqueOrThrow
   */
  export type ClassTimetableFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClassTimetable
     */
    select?: ClassTimetableSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClassTimetable
     */
    omit?: ClassTimetableOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassTimetableInclude<ExtArgs> | null
    /**
     * Filter, which ClassTimetable to fetch.
     */
    where: ClassTimetableWhereUniqueInput
  }

  /**
   * ClassTimetable findFirst
   */
  export type ClassTimetableFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClassTimetable
     */
    select?: ClassTimetableSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClassTimetable
     */
    omit?: ClassTimetableOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassTimetableInclude<ExtArgs> | null
    /**
     * Filter, which ClassTimetable to fetch.
     */
    where?: ClassTimetableWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ClassTimetables to fetch.
     */
    orderBy?: ClassTimetableOrderByWithRelationInput | ClassTimetableOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ClassTimetables.
     */
    cursor?: ClassTimetableWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ClassTimetables from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ClassTimetables.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ClassTimetables.
     */
    distinct?: ClassTimetableScalarFieldEnum | ClassTimetableScalarFieldEnum[]
  }

  /**
   * ClassTimetable findFirstOrThrow
   */
  export type ClassTimetableFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClassTimetable
     */
    select?: ClassTimetableSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClassTimetable
     */
    omit?: ClassTimetableOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassTimetableInclude<ExtArgs> | null
    /**
     * Filter, which ClassTimetable to fetch.
     */
    where?: ClassTimetableWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ClassTimetables to fetch.
     */
    orderBy?: ClassTimetableOrderByWithRelationInput | ClassTimetableOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ClassTimetables.
     */
    cursor?: ClassTimetableWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ClassTimetables from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ClassTimetables.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ClassTimetables.
     */
    distinct?: ClassTimetableScalarFieldEnum | ClassTimetableScalarFieldEnum[]
  }

  /**
   * ClassTimetable findMany
   */
  export type ClassTimetableFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClassTimetable
     */
    select?: ClassTimetableSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClassTimetable
     */
    omit?: ClassTimetableOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassTimetableInclude<ExtArgs> | null
    /**
     * Filter, which ClassTimetables to fetch.
     */
    where?: ClassTimetableWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ClassTimetables to fetch.
     */
    orderBy?: ClassTimetableOrderByWithRelationInput | ClassTimetableOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ClassTimetables.
     */
    cursor?: ClassTimetableWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ClassTimetables from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ClassTimetables.
     */
    skip?: number
    distinct?: ClassTimetableScalarFieldEnum | ClassTimetableScalarFieldEnum[]
  }

  /**
   * ClassTimetable create
   */
  export type ClassTimetableCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClassTimetable
     */
    select?: ClassTimetableSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClassTimetable
     */
    omit?: ClassTimetableOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassTimetableInclude<ExtArgs> | null
    /**
     * The data needed to create a ClassTimetable.
     */
    data: XOR<ClassTimetableCreateInput, ClassTimetableUncheckedCreateInput>
  }

  /**
   * ClassTimetable createMany
   */
  export type ClassTimetableCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ClassTimetables.
     */
    data: ClassTimetableCreateManyInput | ClassTimetableCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ClassTimetable update
   */
  export type ClassTimetableUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClassTimetable
     */
    select?: ClassTimetableSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClassTimetable
     */
    omit?: ClassTimetableOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassTimetableInclude<ExtArgs> | null
    /**
     * The data needed to update a ClassTimetable.
     */
    data: XOR<ClassTimetableUpdateInput, ClassTimetableUncheckedUpdateInput>
    /**
     * Choose, which ClassTimetable to update.
     */
    where: ClassTimetableWhereUniqueInput
  }

  /**
   * ClassTimetable updateMany
   */
  export type ClassTimetableUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ClassTimetables.
     */
    data: XOR<ClassTimetableUpdateManyMutationInput, ClassTimetableUncheckedUpdateManyInput>
    /**
     * Filter which ClassTimetables to update
     */
    where?: ClassTimetableWhereInput
    /**
     * Limit how many ClassTimetables to update.
     */
    limit?: number
  }

  /**
   * ClassTimetable upsert
   */
  export type ClassTimetableUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClassTimetable
     */
    select?: ClassTimetableSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClassTimetable
     */
    omit?: ClassTimetableOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassTimetableInclude<ExtArgs> | null
    /**
     * The filter to search for the ClassTimetable to update in case it exists.
     */
    where: ClassTimetableWhereUniqueInput
    /**
     * In case the ClassTimetable found by the `where` argument doesn't exist, create a new ClassTimetable with this data.
     */
    create: XOR<ClassTimetableCreateInput, ClassTimetableUncheckedCreateInput>
    /**
     * In case the ClassTimetable was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ClassTimetableUpdateInput, ClassTimetableUncheckedUpdateInput>
  }

  /**
   * ClassTimetable delete
   */
  export type ClassTimetableDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClassTimetable
     */
    select?: ClassTimetableSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClassTimetable
     */
    omit?: ClassTimetableOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassTimetableInclude<ExtArgs> | null
    /**
     * Filter which ClassTimetable to delete.
     */
    where: ClassTimetableWhereUniqueInput
  }

  /**
   * ClassTimetable deleteMany
   */
  export type ClassTimetableDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ClassTimetables to delete
     */
    where?: ClassTimetableWhereInput
    /**
     * Limit how many ClassTimetables to delete.
     */
    limit?: number
  }

  /**
   * ClassTimetable.School
   */
  export type ClassTimetable$SchoolArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the School
     */
    select?: SchoolSelect<ExtArgs> | null
    /**
     * Omit specific fields from the School
     */
    omit?: SchoolOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SchoolInclude<ExtArgs> | null
    where?: SchoolWhereInput
  }

  /**
   * ClassTimetable.Classes
   */
  export type ClassTimetable$ClassesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Classes
     */
    select?: ClassesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Classes
     */
    omit?: ClassesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassesInclude<ExtArgs> | null
    where?: ClassesWhereInput
  }

  /**
   * ClassTimetable without action
   */
  export type ClassTimetableDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClassTimetable
     */
    select?: ClassTimetableSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClassTimetable
     */
    omit?: ClassTimetableOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassTimetableInclude<ExtArgs> | null
  }


  /**
   * Model Feedback
   */

  export type AggregateFeedback = {
    _count: FeedbackCountAggregateOutputType | null
    _avg: FeedbackAvgAggregateOutputType | null
    _sum: FeedbackSumAggregateOutputType | null
    _min: FeedbackMinAggregateOutputType | null
    _max: FeedbackMaxAggregateOutputType | null
  }

  export type FeedbackAvgAggregateOutputType = {
    id: number | null
    school_id: number | null
    class_id: number | null
  }

  export type FeedbackSumAggregateOutputType = {
    id: number | null
    school_id: number | null
    class_id: number | null
  }

  export type FeedbackMinAggregateOutputType = {
    id: number | null
    name: string | null
    email: string | null
    feedback: string | null
    school_id: number | null
    class_id: number | null
    created_at: Date | null
  }

  export type FeedbackMaxAggregateOutputType = {
    id: number | null
    name: string | null
    email: string | null
    feedback: string | null
    school_id: number | null
    class_id: number | null
    created_at: Date | null
  }

  export type FeedbackCountAggregateOutputType = {
    id: number
    name: number
    email: number
    feedback: number
    school_id: number
    class_id: number
    created_at: number
    _all: number
  }


  export type FeedbackAvgAggregateInputType = {
    id?: true
    school_id?: true
    class_id?: true
  }

  export type FeedbackSumAggregateInputType = {
    id?: true
    school_id?: true
    class_id?: true
  }

  export type FeedbackMinAggregateInputType = {
    id?: true
    name?: true
    email?: true
    feedback?: true
    school_id?: true
    class_id?: true
    created_at?: true
  }

  export type FeedbackMaxAggregateInputType = {
    id?: true
    name?: true
    email?: true
    feedback?: true
    school_id?: true
    class_id?: true
    created_at?: true
  }

  export type FeedbackCountAggregateInputType = {
    id?: true
    name?: true
    email?: true
    feedback?: true
    school_id?: true
    class_id?: true
    created_at?: true
    _all?: true
  }

  export type FeedbackAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Feedback to aggregate.
     */
    where?: FeedbackWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Feedbacks to fetch.
     */
    orderBy?: FeedbackOrderByWithRelationInput | FeedbackOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FeedbackWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Feedbacks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Feedbacks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Feedbacks
    **/
    _count?: true | FeedbackCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FeedbackAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FeedbackSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FeedbackMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FeedbackMaxAggregateInputType
  }

  export type GetFeedbackAggregateType<T extends FeedbackAggregateArgs> = {
        [P in keyof T & keyof AggregateFeedback]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFeedback[P]>
      : GetScalarType<T[P], AggregateFeedback[P]>
  }




  export type FeedbackGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FeedbackWhereInput
    orderBy?: FeedbackOrderByWithAggregationInput | FeedbackOrderByWithAggregationInput[]
    by: FeedbackScalarFieldEnum[] | FeedbackScalarFieldEnum
    having?: FeedbackScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FeedbackCountAggregateInputType | true
    _avg?: FeedbackAvgAggregateInputType
    _sum?: FeedbackSumAggregateInputType
    _min?: FeedbackMinAggregateInputType
    _max?: FeedbackMaxAggregateInputType
  }

  export type FeedbackGroupByOutputType = {
    id: number
    name: string
    email: string
    feedback: string
    school_id: number
    class_id: number
    created_at: Date
    _count: FeedbackCountAggregateOutputType | null
    _avg: FeedbackAvgAggregateOutputType | null
    _sum: FeedbackSumAggregateOutputType | null
    _min: FeedbackMinAggregateOutputType | null
    _max: FeedbackMaxAggregateOutputType | null
  }

  type GetFeedbackGroupByPayload<T extends FeedbackGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FeedbackGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FeedbackGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FeedbackGroupByOutputType[P]>
            : GetScalarType<T[P], FeedbackGroupByOutputType[P]>
        }
      >
    >


  export type FeedbackSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    feedback?: boolean
    school_id?: boolean
    class_id?: boolean
    created_at?: boolean
    school?: boolean | SchoolDefaultArgs<ExtArgs>
    class?: boolean | ClassesDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["feedback"]>



  export type FeedbackSelectScalar = {
    id?: boolean
    name?: boolean
    email?: boolean
    feedback?: boolean
    school_id?: boolean
    class_id?: boolean
    created_at?: boolean
  }

  export type FeedbackOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "email" | "feedback" | "school_id" | "class_id" | "created_at", ExtArgs["result"]["feedback"]>
  export type FeedbackInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    school?: boolean | SchoolDefaultArgs<ExtArgs>
    class?: boolean | ClassesDefaultArgs<ExtArgs>
  }

  export type $FeedbackPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Feedback"
    objects: {
      school: Prisma.$SchoolPayload<ExtArgs>
      class: Prisma.$ClassesPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      email: string
      feedback: string
      school_id: number
      class_id: number
      created_at: Date
    }, ExtArgs["result"]["feedback"]>
    composites: {}
  }

  type FeedbackGetPayload<S extends boolean | null | undefined | FeedbackDefaultArgs> = $Result.GetResult<Prisma.$FeedbackPayload, S>

  type FeedbackCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<FeedbackFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: FeedbackCountAggregateInputType | true
    }

  export interface FeedbackDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Feedback'], meta: { name: 'Feedback' } }
    /**
     * Find zero or one Feedback that matches the filter.
     * @param {FeedbackFindUniqueArgs} args - Arguments to find a Feedback
     * @example
     * // Get one Feedback
     * const feedback = await prisma.feedback.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends FeedbackFindUniqueArgs>(args: SelectSubset<T, FeedbackFindUniqueArgs<ExtArgs>>): Prisma__FeedbackClient<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Feedback that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {FeedbackFindUniqueOrThrowArgs} args - Arguments to find a Feedback
     * @example
     * // Get one Feedback
     * const feedback = await prisma.feedback.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends FeedbackFindUniqueOrThrowArgs>(args: SelectSubset<T, FeedbackFindUniqueOrThrowArgs<ExtArgs>>): Prisma__FeedbackClient<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Feedback that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedbackFindFirstArgs} args - Arguments to find a Feedback
     * @example
     * // Get one Feedback
     * const feedback = await prisma.feedback.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends FeedbackFindFirstArgs>(args?: SelectSubset<T, FeedbackFindFirstArgs<ExtArgs>>): Prisma__FeedbackClient<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Feedback that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedbackFindFirstOrThrowArgs} args - Arguments to find a Feedback
     * @example
     * // Get one Feedback
     * const feedback = await prisma.feedback.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends FeedbackFindFirstOrThrowArgs>(args?: SelectSubset<T, FeedbackFindFirstOrThrowArgs<ExtArgs>>): Prisma__FeedbackClient<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Feedbacks that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedbackFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Feedbacks
     * const feedbacks = await prisma.feedback.findMany()
     * 
     * // Get first 10 Feedbacks
     * const feedbacks = await prisma.feedback.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const feedbackWithIdOnly = await prisma.feedback.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends FeedbackFindManyArgs>(args?: SelectSubset<T, FeedbackFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Feedback.
     * @param {FeedbackCreateArgs} args - Arguments to create a Feedback.
     * @example
     * // Create one Feedback
     * const Feedback = await prisma.feedback.create({
     *   data: {
     *     // ... data to create a Feedback
     *   }
     * })
     * 
     */
    create<T extends FeedbackCreateArgs>(args: SelectSubset<T, FeedbackCreateArgs<ExtArgs>>): Prisma__FeedbackClient<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Feedbacks.
     * @param {FeedbackCreateManyArgs} args - Arguments to create many Feedbacks.
     * @example
     * // Create many Feedbacks
     * const feedback = await prisma.feedback.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends FeedbackCreateManyArgs>(args?: SelectSubset<T, FeedbackCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Feedback.
     * @param {FeedbackDeleteArgs} args - Arguments to delete one Feedback.
     * @example
     * // Delete one Feedback
     * const Feedback = await prisma.feedback.delete({
     *   where: {
     *     // ... filter to delete one Feedback
     *   }
     * })
     * 
     */
    delete<T extends FeedbackDeleteArgs>(args: SelectSubset<T, FeedbackDeleteArgs<ExtArgs>>): Prisma__FeedbackClient<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Feedback.
     * @param {FeedbackUpdateArgs} args - Arguments to update one Feedback.
     * @example
     * // Update one Feedback
     * const feedback = await prisma.feedback.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends FeedbackUpdateArgs>(args: SelectSubset<T, FeedbackUpdateArgs<ExtArgs>>): Prisma__FeedbackClient<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Feedbacks.
     * @param {FeedbackDeleteManyArgs} args - Arguments to filter Feedbacks to delete.
     * @example
     * // Delete a few Feedbacks
     * const { count } = await prisma.feedback.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends FeedbackDeleteManyArgs>(args?: SelectSubset<T, FeedbackDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Feedbacks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedbackUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Feedbacks
     * const feedback = await prisma.feedback.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends FeedbackUpdateManyArgs>(args: SelectSubset<T, FeedbackUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Feedback.
     * @param {FeedbackUpsertArgs} args - Arguments to update or create a Feedback.
     * @example
     * // Update or create a Feedback
     * const feedback = await prisma.feedback.upsert({
     *   create: {
     *     // ... data to create a Feedback
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Feedback we want to update
     *   }
     * })
     */
    upsert<T extends FeedbackUpsertArgs>(args: SelectSubset<T, FeedbackUpsertArgs<ExtArgs>>): Prisma__FeedbackClient<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Feedbacks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedbackCountArgs} args - Arguments to filter Feedbacks to count.
     * @example
     * // Count the number of Feedbacks
     * const count = await prisma.feedback.count({
     *   where: {
     *     // ... the filter for the Feedbacks we want to count
     *   }
     * })
    **/
    count<T extends FeedbackCountArgs>(
      args?: Subset<T, FeedbackCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FeedbackCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Feedback.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedbackAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FeedbackAggregateArgs>(args: Subset<T, FeedbackAggregateArgs>): Prisma.PrismaPromise<GetFeedbackAggregateType<T>>

    /**
     * Group by Feedback.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedbackGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FeedbackGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FeedbackGroupByArgs['orderBy'] }
        : { orderBy?: FeedbackGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FeedbackGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFeedbackGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Feedback model
   */
  readonly fields: FeedbackFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Feedback.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FeedbackClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    school<T extends SchoolDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SchoolDefaultArgs<ExtArgs>>): Prisma__SchoolClient<$Result.GetResult<Prisma.$SchoolPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    class<T extends ClassesDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ClassesDefaultArgs<ExtArgs>>): Prisma__ClassesClient<$Result.GetResult<Prisma.$ClassesPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Feedback model
   */
  interface FeedbackFieldRefs {
    readonly id: FieldRef<"Feedback", 'Int'>
    readonly name: FieldRef<"Feedback", 'String'>
    readonly email: FieldRef<"Feedback", 'String'>
    readonly feedback: FieldRef<"Feedback", 'String'>
    readonly school_id: FieldRef<"Feedback", 'Int'>
    readonly class_id: FieldRef<"Feedback", 'Int'>
    readonly created_at: FieldRef<"Feedback", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Feedback findUnique
   */
  export type FeedbackFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Feedback
     */
    omit?: FeedbackOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackInclude<ExtArgs> | null
    /**
     * Filter, which Feedback to fetch.
     */
    where: FeedbackWhereUniqueInput
  }

  /**
   * Feedback findUniqueOrThrow
   */
  export type FeedbackFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Feedback
     */
    omit?: FeedbackOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackInclude<ExtArgs> | null
    /**
     * Filter, which Feedback to fetch.
     */
    where: FeedbackWhereUniqueInput
  }

  /**
   * Feedback findFirst
   */
  export type FeedbackFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Feedback
     */
    omit?: FeedbackOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackInclude<ExtArgs> | null
    /**
     * Filter, which Feedback to fetch.
     */
    where?: FeedbackWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Feedbacks to fetch.
     */
    orderBy?: FeedbackOrderByWithRelationInput | FeedbackOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Feedbacks.
     */
    cursor?: FeedbackWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Feedbacks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Feedbacks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Feedbacks.
     */
    distinct?: FeedbackScalarFieldEnum | FeedbackScalarFieldEnum[]
  }

  /**
   * Feedback findFirstOrThrow
   */
  export type FeedbackFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Feedback
     */
    omit?: FeedbackOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackInclude<ExtArgs> | null
    /**
     * Filter, which Feedback to fetch.
     */
    where?: FeedbackWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Feedbacks to fetch.
     */
    orderBy?: FeedbackOrderByWithRelationInput | FeedbackOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Feedbacks.
     */
    cursor?: FeedbackWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Feedbacks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Feedbacks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Feedbacks.
     */
    distinct?: FeedbackScalarFieldEnum | FeedbackScalarFieldEnum[]
  }

  /**
   * Feedback findMany
   */
  export type FeedbackFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Feedback
     */
    omit?: FeedbackOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackInclude<ExtArgs> | null
    /**
     * Filter, which Feedbacks to fetch.
     */
    where?: FeedbackWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Feedbacks to fetch.
     */
    orderBy?: FeedbackOrderByWithRelationInput | FeedbackOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Feedbacks.
     */
    cursor?: FeedbackWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Feedbacks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Feedbacks.
     */
    skip?: number
    distinct?: FeedbackScalarFieldEnum | FeedbackScalarFieldEnum[]
  }

  /**
   * Feedback create
   */
  export type FeedbackCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Feedback
     */
    omit?: FeedbackOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackInclude<ExtArgs> | null
    /**
     * The data needed to create a Feedback.
     */
    data: XOR<FeedbackCreateInput, FeedbackUncheckedCreateInput>
  }

  /**
   * Feedback createMany
   */
  export type FeedbackCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Feedbacks.
     */
    data: FeedbackCreateManyInput | FeedbackCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Feedback update
   */
  export type FeedbackUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Feedback
     */
    omit?: FeedbackOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackInclude<ExtArgs> | null
    /**
     * The data needed to update a Feedback.
     */
    data: XOR<FeedbackUpdateInput, FeedbackUncheckedUpdateInput>
    /**
     * Choose, which Feedback to update.
     */
    where: FeedbackWhereUniqueInput
  }

  /**
   * Feedback updateMany
   */
  export type FeedbackUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Feedbacks.
     */
    data: XOR<FeedbackUpdateManyMutationInput, FeedbackUncheckedUpdateManyInput>
    /**
     * Filter which Feedbacks to update
     */
    where?: FeedbackWhereInput
    /**
     * Limit how many Feedbacks to update.
     */
    limit?: number
  }

  /**
   * Feedback upsert
   */
  export type FeedbackUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Feedback
     */
    omit?: FeedbackOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackInclude<ExtArgs> | null
    /**
     * The filter to search for the Feedback to update in case it exists.
     */
    where: FeedbackWhereUniqueInput
    /**
     * In case the Feedback found by the `where` argument doesn't exist, create a new Feedback with this data.
     */
    create: XOR<FeedbackCreateInput, FeedbackUncheckedCreateInput>
    /**
     * In case the Feedback was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FeedbackUpdateInput, FeedbackUncheckedUpdateInput>
  }

  /**
   * Feedback delete
   */
  export type FeedbackDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Feedback
     */
    omit?: FeedbackOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackInclude<ExtArgs> | null
    /**
     * Filter which Feedback to delete.
     */
    where: FeedbackWhereUniqueInput
  }

  /**
   * Feedback deleteMany
   */
  export type FeedbackDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Feedbacks to delete
     */
    where?: FeedbackWhereInput
    /**
     * Limit how many Feedbacks to delete.
     */
    limit?: number
  }

  /**
   * Feedback without action
   */
  export type FeedbackDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Feedback
     */
    omit?: FeedbackOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackInclude<ExtArgs> | null
  }


  /**
   * Model Admin
   */

  export type AggregateAdmin = {
    _count: AdminCountAggregateOutputType | null
    _avg: AdminAvgAggregateOutputType | null
    _sum: AdminSumAggregateOutputType | null
    _min: AdminMinAggregateOutputType | null
    _max: AdminMaxAggregateOutputType | null
  }

  export type AdminAvgAggregateOutputType = {
    id: number | null
    school_id: number | null
  }

  export type AdminSumAggregateOutputType = {
    id: number | null
    school_id: number | null
  }

  export type AdminMinAggregateOutputType = {
    id: number | null
    name: string | null
    designation: string | null
    gender: string | null
    mobile: string | null
    email: string | null
    photo: Uint8Array | null
    username: string | null
    school_id: number | null
  }

  export type AdminMaxAggregateOutputType = {
    id: number | null
    name: string | null
    designation: string | null
    gender: string | null
    mobile: string | null
    email: string | null
    photo: Uint8Array | null
    username: string | null
    school_id: number | null
  }

  export type AdminCountAggregateOutputType = {
    id: number
    name: number
    designation: number
    gender: number
    mobile: number
    email: number
    photo: number
    username: number
    school_id: number
    _all: number
  }


  export type AdminAvgAggregateInputType = {
    id?: true
    school_id?: true
  }

  export type AdminSumAggregateInputType = {
    id?: true
    school_id?: true
  }

  export type AdminMinAggregateInputType = {
    id?: true
    name?: true
    designation?: true
    gender?: true
    mobile?: true
    email?: true
    photo?: true
    username?: true
    school_id?: true
  }

  export type AdminMaxAggregateInputType = {
    id?: true
    name?: true
    designation?: true
    gender?: true
    mobile?: true
    email?: true
    photo?: true
    username?: true
    school_id?: true
  }

  export type AdminCountAggregateInputType = {
    id?: true
    name?: true
    designation?: true
    gender?: true
    mobile?: true
    email?: true
    photo?: true
    username?: true
    school_id?: true
    _all?: true
  }

  export type AdminAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Admin to aggregate.
     */
    where?: AdminWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Admins to fetch.
     */
    orderBy?: AdminOrderByWithRelationInput | AdminOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AdminWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Admins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Admins.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Admins
    **/
    _count?: true | AdminCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AdminAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AdminSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AdminMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AdminMaxAggregateInputType
  }

  export type GetAdminAggregateType<T extends AdminAggregateArgs> = {
        [P in keyof T & keyof AggregateAdmin]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAdmin[P]>
      : GetScalarType<T[P], AggregateAdmin[P]>
  }




  export type AdminGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AdminWhereInput
    orderBy?: AdminOrderByWithAggregationInput | AdminOrderByWithAggregationInput[]
    by: AdminScalarFieldEnum[] | AdminScalarFieldEnum
    having?: AdminScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AdminCountAggregateInputType | true
    _avg?: AdminAvgAggregateInputType
    _sum?: AdminSumAggregateInputType
    _min?: AdminMinAggregateInputType
    _max?: AdminMaxAggregateInputType
  }

  export type AdminGroupByOutputType = {
    id: number
    name: string | null
    designation: string
    gender: string
    mobile: string
    email: string
    photo: Uint8Array | null
    username: string
    school_id: number
    _count: AdminCountAggregateOutputType | null
    _avg: AdminAvgAggregateOutputType | null
    _sum: AdminSumAggregateOutputType | null
    _min: AdminMinAggregateOutputType | null
    _max: AdminMaxAggregateOutputType | null
  }

  type GetAdminGroupByPayload<T extends AdminGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AdminGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AdminGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AdminGroupByOutputType[P]>
            : GetScalarType<T[P], AdminGroupByOutputType[P]>
        }
      >
    >


  export type AdminSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    designation?: boolean
    gender?: boolean
    mobile?: boolean
    email?: boolean
    photo?: boolean
    username?: boolean
    school_id?: boolean
    school?: boolean | SchoolDefaultArgs<ExtArgs>
    user?: boolean | Attendance_userDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["admin"]>



  export type AdminSelectScalar = {
    id?: boolean
    name?: boolean
    designation?: boolean
    gender?: boolean
    mobile?: boolean
    email?: boolean
    photo?: boolean
    username?: boolean
    school_id?: boolean
  }

  export type AdminOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "designation" | "gender" | "mobile" | "email" | "photo" | "username" | "school_id", ExtArgs["result"]["admin"]>
  export type AdminInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    school?: boolean | SchoolDefaultArgs<ExtArgs>
    user?: boolean | Attendance_userDefaultArgs<ExtArgs>
  }

  export type $AdminPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Admin"
    objects: {
      school: Prisma.$SchoolPayload<ExtArgs>
      user: Prisma.$Attendance_userPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string | null
      designation: string
      gender: string
      mobile: string
      email: string
      photo: Uint8Array | null
      username: string
      school_id: number
    }, ExtArgs["result"]["admin"]>
    composites: {}
  }

  type AdminGetPayload<S extends boolean | null | undefined | AdminDefaultArgs> = $Result.GetResult<Prisma.$AdminPayload, S>

  type AdminCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AdminFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AdminCountAggregateInputType | true
    }

  export interface AdminDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Admin'], meta: { name: 'Admin' } }
    /**
     * Find zero or one Admin that matches the filter.
     * @param {AdminFindUniqueArgs} args - Arguments to find a Admin
     * @example
     * // Get one Admin
     * const admin = await prisma.admin.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AdminFindUniqueArgs>(args: SelectSubset<T, AdminFindUniqueArgs<ExtArgs>>): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Admin that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AdminFindUniqueOrThrowArgs} args - Arguments to find a Admin
     * @example
     * // Get one Admin
     * const admin = await prisma.admin.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AdminFindUniqueOrThrowArgs>(args: SelectSubset<T, AdminFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Admin that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminFindFirstArgs} args - Arguments to find a Admin
     * @example
     * // Get one Admin
     * const admin = await prisma.admin.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AdminFindFirstArgs>(args?: SelectSubset<T, AdminFindFirstArgs<ExtArgs>>): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Admin that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminFindFirstOrThrowArgs} args - Arguments to find a Admin
     * @example
     * // Get one Admin
     * const admin = await prisma.admin.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AdminFindFirstOrThrowArgs>(args?: SelectSubset<T, AdminFindFirstOrThrowArgs<ExtArgs>>): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Admins that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Admins
     * const admins = await prisma.admin.findMany()
     * 
     * // Get first 10 Admins
     * const admins = await prisma.admin.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const adminWithIdOnly = await prisma.admin.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AdminFindManyArgs>(args?: SelectSubset<T, AdminFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Admin.
     * @param {AdminCreateArgs} args - Arguments to create a Admin.
     * @example
     * // Create one Admin
     * const Admin = await prisma.admin.create({
     *   data: {
     *     // ... data to create a Admin
     *   }
     * })
     * 
     */
    create<T extends AdminCreateArgs>(args: SelectSubset<T, AdminCreateArgs<ExtArgs>>): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Admins.
     * @param {AdminCreateManyArgs} args - Arguments to create many Admins.
     * @example
     * // Create many Admins
     * const admin = await prisma.admin.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AdminCreateManyArgs>(args?: SelectSubset<T, AdminCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Admin.
     * @param {AdminDeleteArgs} args - Arguments to delete one Admin.
     * @example
     * // Delete one Admin
     * const Admin = await prisma.admin.delete({
     *   where: {
     *     // ... filter to delete one Admin
     *   }
     * })
     * 
     */
    delete<T extends AdminDeleteArgs>(args: SelectSubset<T, AdminDeleteArgs<ExtArgs>>): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Admin.
     * @param {AdminUpdateArgs} args - Arguments to update one Admin.
     * @example
     * // Update one Admin
     * const admin = await prisma.admin.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AdminUpdateArgs>(args: SelectSubset<T, AdminUpdateArgs<ExtArgs>>): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Admins.
     * @param {AdminDeleteManyArgs} args - Arguments to filter Admins to delete.
     * @example
     * // Delete a few Admins
     * const { count } = await prisma.admin.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AdminDeleteManyArgs>(args?: SelectSubset<T, AdminDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Admins.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Admins
     * const admin = await prisma.admin.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AdminUpdateManyArgs>(args: SelectSubset<T, AdminUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Admin.
     * @param {AdminUpsertArgs} args - Arguments to update or create a Admin.
     * @example
     * // Update or create a Admin
     * const admin = await prisma.admin.upsert({
     *   create: {
     *     // ... data to create a Admin
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Admin we want to update
     *   }
     * })
     */
    upsert<T extends AdminUpsertArgs>(args: SelectSubset<T, AdminUpsertArgs<ExtArgs>>): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Admins.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminCountArgs} args - Arguments to filter Admins to count.
     * @example
     * // Count the number of Admins
     * const count = await prisma.admin.count({
     *   where: {
     *     // ... the filter for the Admins we want to count
     *   }
     * })
    **/
    count<T extends AdminCountArgs>(
      args?: Subset<T, AdminCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AdminCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Admin.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AdminAggregateArgs>(args: Subset<T, AdminAggregateArgs>): Prisma.PrismaPromise<GetAdminAggregateType<T>>

    /**
     * Group by Admin.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AdminGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AdminGroupByArgs['orderBy'] }
        : { orderBy?: AdminGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AdminGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAdminGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Admin model
   */
  readonly fields: AdminFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Admin.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AdminClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    school<T extends SchoolDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SchoolDefaultArgs<ExtArgs>>): Prisma__SchoolClient<$Result.GetResult<Prisma.$SchoolPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    user<T extends Attendance_userDefaultArgs<ExtArgs> = {}>(args?: Subset<T, Attendance_userDefaultArgs<ExtArgs>>): Prisma__Attendance_userClient<$Result.GetResult<Prisma.$Attendance_userPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Admin model
   */
  interface AdminFieldRefs {
    readonly id: FieldRef<"Admin", 'Int'>
    readonly name: FieldRef<"Admin", 'String'>
    readonly designation: FieldRef<"Admin", 'String'>
    readonly gender: FieldRef<"Admin", 'String'>
    readonly mobile: FieldRef<"Admin", 'String'>
    readonly email: FieldRef<"Admin", 'String'>
    readonly photo: FieldRef<"Admin", 'Bytes'>
    readonly username: FieldRef<"Admin", 'String'>
    readonly school_id: FieldRef<"Admin", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Admin findUnique
   */
  export type AdminFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Admin
     */
    omit?: AdminOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminInclude<ExtArgs> | null
    /**
     * Filter, which Admin to fetch.
     */
    where: AdminWhereUniqueInput
  }

  /**
   * Admin findUniqueOrThrow
   */
  export type AdminFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Admin
     */
    omit?: AdminOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminInclude<ExtArgs> | null
    /**
     * Filter, which Admin to fetch.
     */
    where: AdminWhereUniqueInput
  }

  /**
   * Admin findFirst
   */
  export type AdminFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Admin
     */
    omit?: AdminOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminInclude<ExtArgs> | null
    /**
     * Filter, which Admin to fetch.
     */
    where?: AdminWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Admins to fetch.
     */
    orderBy?: AdminOrderByWithRelationInput | AdminOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Admins.
     */
    cursor?: AdminWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Admins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Admins.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Admins.
     */
    distinct?: AdminScalarFieldEnum | AdminScalarFieldEnum[]
  }

  /**
   * Admin findFirstOrThrow
   */
  export type AdminFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Admin
     */
    omit?: AdminOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminInclude<ExtArgs> | null
    /**
     * Filter, which Admin to fetch.
     */
    where?: AdminWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Admins to fetch.
     */
    orderBy?: AdminOrderByWithRelationInput | AdminOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Admins.
     */
    cursor?: AdminWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Admins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Admins.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Admins.
     */
    distinct?: AdminScalarFieldEnum | AdminScalarFieldEnum[]
  }

  /**
   * Admin findMany
   */
  export type AdminFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Admin
     */
    omit?: AdminOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminInclude<ExtArgs> | null
    /**
     * Filter, which Admins to fetch.
     */
    where?: AdminWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Admins to fetch.
     */
    orderBy?: AdminOrderByWithRelationInput | AdminOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Admins.
     */
    cursor?: AdminWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Admins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Admins.
     */
    skip?: number
    distinct?: AdminScalarFieldEnum | AdminScalarFieldEnum[]
  }

  /**
   * Admin create
   */
  export type AdminCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Admin
     */
    omit?: AdminOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminInclude<ExtArgs> | null
    /**
     * The data needed to create a Admin.
     */
    data: XOR<AdminCreateInput, AdminUncheckedCreateInput>
  }

  /**
   * Admin createMany
   */
  export type AdminCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Admins.
     */
    data: AdminCreateManyInput | AdminCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Admin update
   */
  export type AdminUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Admin
     */
    omit?: AdminOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminInclude<ExtArgs> | null
    /**
     * The data needed to update a Admin.
     */
    data: XOR<AdminUpdateInput, AdminUncheckedUpdateInput>
    /**
     * Choose, which Admin to update.
     */
    where: AdminWhereUniqueInput
  }

  /**
   * Admin updateMany
   */
  export type AdminUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Admins.
     */
    data: XOR<AdminUpdateManyMutationInput, AdminUncheckedUpdateManyInput>
    /**
     * Filter which Admins to update
     */
    where?: AdminWhereInput
    /**
     * Limit how many Admins to update.
     */
    limit?: number
  }

  /**
   * Admin upsert
   */
  export type AdminUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Admin
     */
    omit?: AdminOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminInclude<ExtArgs> | null
    /**
     * The filter to search for the Admin to update in case it exists.
     */
    where: AdminWhereUniqueInput
    /**
     * In case the Admin found by the `where` argument doesn't exist, create a new Admin with this data.
     */
    create: XOR<AdminCreateInput, AdminUncheckedCreateInput>
    /**
     * In case the Admin was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AdminUpdateInput, AdminUncheckedUpdateInput>
  }

  /**
   * Admin delete
   */
  export type AdminDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Admin
     */
    omit?: AdminOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminInclude<ExtArgs> | null
    /**
     * Filter which Admin to delete.
     */
    where: AdminWhereUniqueInput
  }

  /**
   * Admin deleteMany
   */
  export type AdminDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Admins to delete
     */
    where?: AdminWhereInput
    /**
     * Limit how many Admins to delete.
     */
    limit?: number
  }

  /**
   * Admin without action
   */
  export type AdminDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Admin
     */
    omit?: AdminOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminInclude<ExtArgs> | null
  }


  /**
   * Model Messages
   */

  export type AggregateMessages = {
    _count: MessagesCountAggregateOutputType | null
    _avg: MessagesAvgAggregateOutputType | null
    _sum: MessagesSumAggregateOutputType | null
    _min: MessagesMinAggregateOutputType | null
    _max: MessagesMaxAggregateOutputType | null
  }

  export type MessagesAvgAggregateOutputType = {
    id: number | null
    school_id: number | null
  }

  export type MessagesSumAggregateOutputType = {
    id: number | null
    school_id: number | null
  }

  export type MessagesMinAggregateOutputType = {
    id: number | null
    messages: string | null
    date: string | null
    school_id: number | null
  }

  export type MessagesMaxAggregateOutputType = {
    id: number | null
    messages: string | null
    date: string | null
    school_id: number | null
  }

  export type MessagesCountAggregateOutputType = {
    id: number
    messages: number
    date: number
    school_id: number
    _all: number
  }


  export type MessagesAvgAggregateInputType = {
    id?: true
    school_id?: true
  }

  export type MessagesSumAggregateInputType = {
    id?: true
    school_id?: true
  }

  export type MessagesMinAggregateInputType = {
    id?: true
    messages?: true
    date?: true
    school_id?: true
  }

  export type MessagesMaxAggregateInputType = {
    id?: true
    messages?: true
    date?: true
    school_id?: true
  }

  export type MessagesCountAggregateInputType = {
    id?: true
    messages?: true
    date?: true
    school_id?: true
    _all?: true
  }

  export type MessagesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Messages to aggregate.
     */
    where?: MessagesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Messages to fetch.
     */
    orderBy?: MessagesOrderByWithRelationInput | MessagesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MessagesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Messages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Messages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Messages
    **/
    _count?: true | MessagesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MessagesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MessagesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MessagesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MessagesMaxAggregateInputType
  }

  export type GetMessagesAggregateType<T extends MessagesAggregateArgs> = {
        [P in keyof T & keyof AggregateMessages]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMessages[P]>
      : GetScalarType<T[P], AggregateMessages[P]>
  }




  export type MessagesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MessagesWhereInput
    orderBy?: MessagesOrderByWithAggregationInput | MessagesOrderByWithAggregationInput[]
    by: MessagesScalarFieldEnum[] | MessagesScalarFieldEnum
    having?: MessagesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MessagesCountAggregateInputType | true
    _avg?: MessagesAvgAggregateInputType
    _sum?: MessagesSumAggregateInputType
    _min?: MessagesMinAggregateInputType
    _max?: MessagesMaxAggregateInputType
  }

  export type MessagesGroupByOutputType = {
    id: number
    messages: string
    date: string | null
    school_id: number
    _count: MessagesCountAggregateOutputType | null
    _avg: MessagesAvgAggregateOutputType | null
    _sum: MessagesSumAggregateOutputType | null
    _min: MessagesMinAggregateOutputType | null
    _max: MessagesMaxAggregateOutputType | null
  }

  type GetMessagesGroupByPayload<T extends MessagesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MessagesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MessagesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MessagesGroupByOutputType[P]>
            : GetScalarType<T[P], MessagesGroupByOutputType[P]>
        }
      >
    >


  export type MessagesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    messages?: boolean
    date?: boolean
    school_id?: boolean
    school?: boolean | SchoolDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["messages"]>



  export type MessagesSelectScalar = {
    id?: boolean
    messages?: boolean
    date?: boolean
    school_id?: boolean
  }

  export type MessagesOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "messages" | "date" | "school_id", ExtArgs["result"]["messages"]>
  export type MessagesInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    school?: boolean | SchoolDefaultArgs<ExtArgs>
  }

  export type $MessagesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Messages"
    objects: {
      school: Prisma.$SchoolPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      messages: string
      date: string | null
      school_id: number
    }, ExtArgs["result"]["messages"]>
    composites: {}
  }

  type MessagesGetPayload<S extends boolean | null | undefined | MessagesDefaultArgs> = $Result.GetResult<Prisma.$MessagesPayload, S>

  type MessagesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<MessagesFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: MessagesCountAggregateInputType | true
    }

  export interface MessagesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Messages'], meta: { name: 'Messages' } }
    /**
     * Find zero or one Messages that matches the filter.
     * @param {MessagesFindUniqueArgs} args - Arguments to find a Messages
     * @example
     * // Get one Messages
     * const messages = await prisma.messages.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MessagesFindUniqueArgs>(args: SelectSubset<T, MessagesFindUniqueArgs<ExtArgs>>): Prisma__MessagesClient<$Result.GetResult<Prisma.$MessagesPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Messages that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {MessagesFindUniqueOrThrowArgs} args - Arguments to find a Messages
     * @example
     * // Get one Messages
     * const messages = await prisma.messages.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MessagesFindUniqueOrThrowArgs>(args: SelectSubset<T, MessagesFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MessagesClient<$Result.GetResult<Prisma.$MessagesPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Messages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessagesFindFirstArgs} args - Arguments to find a Messages
     * @example
     * // Get one Messages
     * const messages = await prisma.messages.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MessagesFindFirstArgs>(args?: SelectSubset<T, MessagesFindFirstArgs<ExtArgs>>): Prisma__MessagesClient<$Result.GetResult<Prisma.$MessagesPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Messages that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessagesFindFirstOrThrowArgs} args - Arguments to find a Messages
     * @example
     * // Get one Messages
     * const messages = await prisma.messages.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MessagesFindFirstOrThrowArgs>(args?: SelectSubset<T, MessagesFindFirstOrThrowArgs<ExtArgs>>): Prisma__MessagesClient<$Result.GetResult<Prisma.$MessagesPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Messages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessagesFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Messages
     * const messages = await prisma.messages.findMany()
     * 
     * // Get first 10 Messages
     * const messages = await prisma.messages.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const messagesWithIdOnly = await prisma.messages.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MessagesFindManyArgs>(args?: SelectSubset<T, MessagesFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MessagesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Messages.
     * @param {MessagesCreateArgs} args - Arguments to create a Messages.
     * @example
     * // Create one Messages
     * const Messages = await prisma.messages.create({
     *   data: {
     *     // ... data to create a Messages
     *   }
     * })
     * 
     */
    create<T extends MessagesCreateArgs>(args: SelectSubset<T, MessagesCreateArgs<ExtArgs>>): Prisma__MessagesClient<$Result.GetResult<Prisma.$MessagesPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Messages.
     * @param {MessagesCreateManyArgs} args - Arguments to create many Messages.
     * @example
     * // Create many Messages
     * const messages = await prisma.messages.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MessagesCreateManyArgs>(args?: SelectSubset<T, MessagesCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Messages.
     * @param {MessagesDeleteArgs} args - Arguments to delete one Messages.
     * @example
     * // Delete one Messages
     * const Messages = await prisma.messages.delete({
     *   where: {
     *     // ... filter to delete one Messages
     *   }
     * })
     * 
     */
    delete<T extends MessagesDeleteArgs>(args: SelectSubset<T, MessagesDeleteArgs<ExtArgs>>): Prisma__MessagesClient<$Result.GetResult<Prisma.$MessagesPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Messages.
     * @param {MessagesUpdateArgs} args - Arguments to update one Messages.
     * @example
     * // Update one Messages
     * const messages = await prisma.messages.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MessagesUpdateArgs>(args: SelectSubset<T, MessagesUpdateArgs<ExtArgs>>): Prisma__MessagesClient<$Result.GetResult<Prisma.$MessagesPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Messages.
     * @param {MessagesDeleteManyArgs} args - Arguments to filter Messages to delete.
     * @example
     * // Delete a few Messages
     * const { count } = await prisma.messages.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MessagesDeleteManyArgs>(args?: SelectSubset<T, MessagesDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Messages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessagesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Messages
     * const messages = await prisma.messages.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MessagesUpdateManyArgs>(args: SelectSubset<T, MessagesUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Messages.
     * @param {MessagesUpsertArgs} args - Arguments to update or create a Messages.
     * @example
     * // Update or create a Messages
     * const messages = await prisma.messages.upsert({
     *   create: {
     *     // ... data to create a Messages
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Messages we want to update
     *   }
     * })
     */
    upsert<T extends MessagesUpsertArgs>(args: SelectSubset<T, MessagesUpsertArgs<ExtArgs>>): Prisma__MessagesClient<$Result.GetResult<Prisma.$MessagesPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Messages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessagesCountArgs} args - Arguments to filter Messages to count.
     * @example
     * // Count the number of Messages
     * const count = await prisma.messages.count({
     *   where: {
     *     // ... the filter for the Messages we want to count
     *   }
     * })
    **/
    count<T extends MessagesCountArgs>(
      args?: Subset<T, MessagesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MessagesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Messages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessagesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MessagesAggregateArgs>(args: Subset<T, MessagesAggregateArgs>): Prisma.PrismaPromise<GetMessagesAggregateType<T>>

    /**
     * Group by Messages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessagesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MessagesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MessagesGroupByArgs['orderBy'] }
        : { orderBy?: MessagesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MessagesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMessagesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Messages model
   */
  readonly fields: MessagesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Messages.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MessagesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    school<T extends SchoolDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SchoolDefaultArgs<ExtArgs>>): Prisma__SchoolClient<$Result.GetResult<Prisma.$SchoolPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Messages model
   */
  interface MessagesFieldRefs {
    readonly id: FieldRef<"Messages", 'Int'>
    readonly messages: FieldRef<"Messages", 'String'>
    readonly date: FieldRef<"Messages", 'String'>
    readonly school_id: FieldRef<"Messages", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Messages findUnique
   */
  export type MessagesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Messages
     */
    select?: MessagesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Messages
     */
    omit?: MessagesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessagesInclude<ExtArgs> | null
    /**
     * Filter, which Messages to fetch.
     */
    where: MessagesWhereUniqueInput
  }

  /**
   * Messages findUniqueOrThrow
   */
  export type MessagesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Messages
     */
    select?: MessagesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Messages
     */
    omit?: MessagesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessagesInclude<ExtArgs> | null
    /**
     * Filter, which Messages to fetch.
     */
    where: MessagesWhereUniqueInput
  }

  /**
   * Messages findFirst
   */
  export type MessagesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Messages
     */
    select?: MessagesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Messages
     */
    omit?: MessagesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessagesInclude<ExtArgs> | null
    /**
     * Filter, which Messages to fetch.
     */
    where?: MessagesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Messages to fetch.
     */
    orderBy?: MessagesOrderByWithRelationInput | MessagesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Messages.
     */
    cursor?: MessagesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Messages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Messages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Messages.
     */
    distinct?: MessagesScalarFieldEnum | MessagesScalarFieldEnum[]
  }

  /**
   * Messages findFirstOrThrow
   */
  export type MessagesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Messages
     */
    select?: MessagesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Messages
     */
    omit?: MessagesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessagesInclude<ExtArgs> | null
    /**
     * Filter, which Messages to fetch.
     */
    where?: MessagesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Messages to fetch.
     */
    orderBy?: MessagesOrderByWithRelationInput | MessagesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Messages.
     */
    cursor?: MessagesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Messages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Messages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Messages.
     */
    distinct?: MessagesScalarFieldEnum | MessagesScalarFieldEnum[]
  }

  /**
   * Messages findMany
   */
  export type MessagesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Messages
     */
    select?: MessagesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Messages
     */
    omit?: MessagesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessagesInclude<ExtArgs> | null
    /**
     * Filter, which Messages to fetch.
     */
    where?: MessagesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Messages to fetch.
     */
    orderBy?: MessagesOrderByWithRelationInput | MessagesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Messages.
     */
    cursor?: MessagesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Messages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Messages.
     */
    skip?: number
    distinct?: MessagesScalarFieldEnum | MessagesScalarFieldEnum[]
  }

  /**
   * Messages create
   */
  export type MessagesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Messages
     */
    select?: MessagesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Messages
     */
    omit?: MessagesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessagesInclude<ExtArgs> | null
    /**
     * The data needed to create a Messages.
     */
    data: XOR<MessagesCreateInput, MessagesUncheckedCreateInput>
  }

  /**
   * Messages createMany
   */
  export type MessagesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Messages.
     */
    data: MessagesCreateManyInput | MessagesCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Messages update
   */
  export type MessagesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Messages
     */
    select?: MessagesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Messages
     */
    omit?: MessagesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessagesInclude<ExtArgs> | null
    /**
     * The data needed to update a Messages.
     */
    data: XOR<MessagesUpdateInput, MessagesUncheckedUpdateInput>
    /**
     * Choose, which Messages to update.
     */
    where: MessagesWhereUniqueInput
  }

  /**
   * Messages updateMany
   */
  export type MessagesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Messages.
     */
    data: XOR<MessagesUpdateManyMutationInput, MessagesUncheckedUpdateManyInput>
    /**
     * Filter which Messages to update
     */
    where?: MessagesWhereInput
    /**
     * Limit how many Messages to update.
     */
    limit?: number
  }

  /**
   * Messages upsert
   */
  export type MessagesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Messages
     */
    select?: MessagesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Messages
     */
    omit?: MessagesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessagesInclude<ExtArgs> | null
    /**
     * The filter to search for the Messages to update in case it exists.
     */
    where: MessagesWhereUniqueInput
    /**
     * In case the Messages found by the `where` argument doesn't exist, create a new Messages with this data.
     */
    create: XOR<MessagesCreateInput, MessagesUncheckedCreateInput>
    /**
     * In case the Messages was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MessagesUpdateInput, MessagesUncheckedUpdateInput>
  }

  /**
   * Messages delete
   */
  export type MessagesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Messages
     */
    select?: MessagesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Messages
     */
    omit?: MessagesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessagesInclude<ExtArgs> | null
    /**
     * Filter which Messages to delete.
     */
    where: MessagesWhereUniqueInput
  }

  /**
   * Messages deleteMany
   */
  export type MessagesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Messages to delete
     */
    where?: MessagesWhereInput
    /**
     * Limit how many Messages to delete.
     */
    limit?: number
  }

  /**
   * Messages without action
   */
  export type MessagesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Messages
     */
    select?: MessagesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Messages
     */
    omit?: MessagesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessagesInclude<ExtArgs> | null
  }


  /**
   * Model LeaveRequest
   */

  export type AggregateLeaveRequest = {
    _count: LeaveRequestCountAggregateOutputType | null
    _avg: LeaveRequestAvgAggregateOutputType | null
    _sum: LeaveRequestSumAggregateOutputType | null
    _min: LeaveRequestMinAggregateOutputType | null
    _max: LeaveRequestMaxAggregateOutputType | null
  }

  export type LeaveRequestAvgAggregateOutputType = {
    id: number | null
    school_id: number | null
    class_id: number | null
  }

  export type LeaveRequestSumAggregateOutputType = {
    id: number | null
    school_id: number | null
    class_id: number | null
  }

  export type LeaveRequestMinAggregateOutputType = {
    id: number | null
    username: string | null
    role: $Enums.Role | null
    school_id: number | null
    class_id: number | null
    from_date: Date | null
    to_date: Date | null
    reason: string | null
    status: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type LeaveRequestMaxAggregateOutputType = {
    id: number | null
    username: string | null
    role: $Enums.Role | null
    school_id: number | null
    class_id: number | null
    from_date: Date | null
    to_date: Date | null
    reason: string | null
    status: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type LeaveRequestCountAggregateOutputType = {
    id: number
    username: number
    role: number
    school_id: number
    class_id: number
    from_date: number
    to_date: number
    reason: number
    status: number
    created_at: number
    updated_at: number
    _all: number
  }


  export type LeaveRequestAvgAggregateInputType = {
    id?: true
    school_id?: true
    class_id?: true
  }

  export type LeaveRequestSumAggregateInputType = {
    id?: true
    school_id?: true
    class_id?: true
  }

  export type LeaveRequestMinAggregateInputType = {
    id?: true
    username?: true
    role?: true
    school_id?: true
    class_id?: true
    from_date?: true
    to_date?: true
    reason?: true
    status?: true
    created_at?: true
    updated_at?: true
  }

  export type LeaveRequestMaxAggregateInputType = {
    id?: true
    username?: true
    role?: true
    school_id?: true
    class_id?: true
    from_date?: true
    to_date?: true
    reason?: true
    status?: true
    created_at?: true
    updated_at?: true
  }

  export type LeaveRequestCountAggregateInputType = {
    id?: true
    username?: true
    role?: true
    school_id?: true
    class_id?: true
    from_date?: true
    to_date?: true
    reason?: true
    status?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type LeaveRequestAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which LeaveRequest to aggregate.
     */
    where?: LeaveRequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LeaveRequests to fetch.
     */
    orderBy?: LeaveRequestOrderByWithRelationInput | LeaveRequestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LeaveRequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LeaveRequests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LeaveRequests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned LeaveRequests
    **/
    _count?: true | LeaveRequestCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: LeaveRequestAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: LeaveRequestSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LeaveRequestMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LeaveRequestMaxAggregateInputType
  }

  export type GetLeaveRequestAggregateType<T extends LeaveRequestAggregateArgs> = {
        [P in keyof T & keyof AggregateLeaveRequest]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLeaveRequest[P]>
      : GetScalarType<T[P], AggregateLeaveRequest[P]>
  }




  export type LeaveRequestGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LeaveRequestWhereInput
    orderBy?: LeaveRequestOrderByWithAggregationInput | LeaveRequestOrderByWithAggregationInput[]
    by: LeaveRequestScalarFieldEnum[] | LeaveRequestScalarFieldEnum
    having?: LeaveRequestScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LeaveRequestCountAggregateInputType | true
    _avg?: LeaveRequestAvgAggregateInputType
    _sum?: LeaveRequestSumAggregateInputType
    _min?: LeaveRequestMinAggregateInputType
    _max?: LeaveRequestMaxAggregateInputType
  }

  export type LeaveRequestGroupByOutputType = {
    id: number
    username: string
    role: $Enums.Role
    school_id: number
    class_id: number
    from_date: Date
    to_date: Date
    reason: string | null
    status: string
    created_at: Date
    updated_at: Date
    _count: LeaveRequestCountAggregateOutputType | null
    _avg: LeaveRequestAvgAggregateOutputType | null
    _sum: LeaveRequestSumAggregateOutputType | null
    _min: LeaveRequestMinAggregateOutputType | null
    _max: LeaveRequestMaxAggregateOutputType | null
  }

  type GetLeaveRequestGroupByPayload<T extends LeaveRequestGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LeaveRequestGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LeaveRequestGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LeaveRequestGroupByOutputType[P]>
            : GetScalarType<T[P], LeaveRequestGroupByOutputType[P]>
        }
      >
    >


  export type LeaveRequestSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    username?: boolean
    role?: boolean
    school_id?: boolean
    class_id?: boolean
    from_date?: boolean
    to_date?: boolean
    reason?: boolean
    status?: boolean
    created_at?: boolean
    updated_at?: boolean
  }, ExtArgs["result"]["leaveRequest"]>



  export type LeaveRequestSelectScalar = {
    id?: boolean
    username?: boolean
    role?: boolean
    school_id?: boolean
    class_id?: boolean
    from_date?: boolean
    to_date?: boolean
    reason?: boolean
    status?: boolean
    created_at?: boolean
    updated_at?: boolean
  }

  export type LeaveRequestOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "username" | "role" | "school_id" | "class_id" | "from_date" | "to_date" | "reason" | "status" | "created_at" | "updated_at", ExtArgs["result"]["leaveRequest"]>

  export type $LeaveRequestPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "LeaveRequest"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      username: string
      role: $Enums.Role
      school_id: number
      class_id: number
      from_date: Date
      to_date: Date
      reason: string | null
      status: string
      created_at: Date
      updated_at: Date
    }, ExtArgs["result"]["leaveRequest"]>
    composites: {}
  }

  type LeaveRequestGetPayload<S extends boolean | null | undefined | LeaveRequestDefaultArgs> = $Result.GetResult<Prisma.$LeaveRequestPayload, S>

  type LeaveRequestCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<LeaveRequestFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: LeaveRequestCountAggregateInputType | true
    }

  export interface LeaveRequestDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['LeaveRequest'], meta: { name: 'LeaveRequest' } }
    /**
     * Find zero or one LeaveRequest that matches the filter.
     * @param {LeaveRequestFindUniqueArgs} args - Arguments to find a LeaveRequest
     * @example
     * // Get one LeaveRequest
     * const leaveRequest = await prisma.leaveRequest.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends LeaveRequestFindUniqueArgs>(args: SelectSubset<T, LeaveRequestFindUniqueArgs<ExtArgs>>): Prisma__LeaveRequestClient<$Result.GetResult<Prisma.$LeaveRequestPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one LeaveRequest that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {LeaveRequestFindUniqueOrThrowArgs} args - Arguments to find a LeaveRequest
     * @example
     * // Get one LeaveRequest
     * const leaveRequest = await prisma.leaveRequest.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends LeaveRequestFindUniqueOrThrowArgs>(args: SelectSubset<T, LeaveRequestFindUniqueOrThrowArgs<ExtArgs>>): Prisma__LeaveRequestClient<$Result.GetResult<Prisma.$LeaveRequestPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first LeaveRequest that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeaveRequestFindFirstArgs} args - Arguments to find a LeaveRequest
     * @example
     * // Get one LeaveRequest
     * const leaveRequest = await prisma.leaveRequest.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends LeaveRequestFindFirstArgs>(args?: SelectSubset<T, LeaveRequestFindFirstArgs<ExtArgs>>): Prisma__LeaveRequestClient<$Result.GetResult<Prisma.$LeaveRequestPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first LeaveRequest that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeaveRequestFindFirstOrThrowArgs} args - Arguments to find a LeaveRequest
     * @example
     * // Get one LeaveRequest
     * const leaveRequest = await prisma.leaveRequest.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends LeaveRequestFindFirstOrThrowArgs>(args?: SelectSubset<T, LeaveRequestFindFirstOrThrowArgs<ExtArgs>>): Prisma__LeaveRequestClient<$Result.GetResult<Prisma.$LeaveRequestPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more LeaveRequests that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeaveRequestFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all LeaveRequests
     * const leaveRequests = await prisma.leaveRequest.findMany()
     * 
     * // Get first 10 LeaveRequests
     * const leaveRequests = await prisma.leaveRequest.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const leaveRequestWithIdOnly = await prisma.leaveRequest.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends LeaveRequestFindManyArgs>(args?: SelectSubset<T, LeaveRequestFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LeaveRequestPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a LeaveRequest.
     * @param {LeaveRequestCreateArgs} args - Arguments to create a LeaveRequest.
     * @example
     * // Create one LeaveRequest
     * const LeaveRequest = await prisma.leaveRequest.create({
     *   data: {
     *     // ... data to create a LeaveRequest
     *   }
     * })
     * 
     */
    create<T extends LeaveRequestCreateArgs>(args: SelectSubset<T, LeaveRequestCreateArgs<ExtArgs>>): Prisma__LeaveRequestClient<$Result.GetResult<Prisma.$LeaveRequestPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many LeaveRequests.
     * @param {LeaveRequestCreateManyArgs} args - Arguments to create many LeaveRequests.
     * @example
     * // Create many LeaveRequests
     * const leaveRequest = await prisma.leaveRequest.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends LeaveRequestCreateManyArgs>(args?: SelectSubset<T, LeaveRequestCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a LeaveRequest.
     * @param {LeaveRequestDeleteArgs} args - Arguments to delete one LeaveRequest.
     * @example
     * // Delete one LeaveRequest
     * const LeaveRequest = await prisma.leaveRequest.delete({
     *   where: {
     *     // ... filter to delete one LeaveRequest
     *   }
     * })
     * 
     */
    delete<T extends LeaveRequestDeleteArgs>(args: SelectSubset<T, LeaveRequestDeleteArgs<ExtArgs>>): Prisma__LeaveRequestClient<$Result.GetResult<Prisma.$LeaveRequestPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one LeaveRequest.
     * @param {LeaveRequestUpdateArgs} args - Arguments to update one LeaveRequest.
     * @example
     * // Update one LeaveRequest
     * const leaveRequest = await prisma.leaveRequest.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends LeaveRequestUpdateArgs>(args: SelectSubset<T, LeaveRequestUpdateArgs<ExtArgs>>): Prisma__LeaveRequestClient<$Result.GetResult<Prisma.$LeaveRequestPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more LeaveRequests.
     * @param {LeaveRequestDeleteManyArgs} args - Arguments to filter LeaveRequests to delete.
     * @example
     * // Delete a few LeaveRequests
     * const { count } = await prisma.leaveRequest.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends LeaveRequestDeleteManyArgs>(args?: SelectSubset<T, LeaveRequestDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more LeaveRequests.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeaveRequestUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many LeaveRequests
     * const leaveRequest = await prisma.leaveRequest.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends LeaveRequestUpdateManyArgs>(args: SelectSubset<T, LeaveRequestUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one LeaveRequest.
     * @param {LeaveRequestUpsertArgs} args - Arguments to update or create a LeaveRequest.
     * @example
     * // Update or create a LeaveRequest
     * const leaveRequest = await prisma.leaveRequest.upsert({
     *   create: {
     *     // ... data to create a LeaveRequest
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the LeaveRequest we want to update
     *   }
     * })
     */
    upsert<T extends LeaveRequestUpsertArgs>(args: SelectSubset<T, LeaveRequestUpsertArgs<ExtArgs>>): Prisma__LeaveRequestClient<$Result.GetResult<Prisma.$LeaveRequestPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of LeaveRequests.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeaveRequestCountArgs} args - Arguments to filter LeaveRequests to count.
     * @example
     * // Count the number of LeaveRequests
     * const count = await prisma.leaveRequest.count({
     *   where: {
     *     // ... the filter for the LeaveRequests we want to count
     *   }
     * })
    **/
    count<T extends LeaveRequestCountArgs>(
      args?: Subset<T, LeaveRequestCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LeaveRequestCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a LeaveRequest.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeaveRequestAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LeaveRequestAggregateArgs>(args: Subset<T, LeaveRequestAggregateArgs>): Prisma.PrismaPromise<GetLeaveRequestAggregateType<T>>

    /**
     * Group by LeaveRequest.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeaveRequestGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LeaveRequestGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LeaveRequestGroupByArgs['orderBy'] }
        : { orderBy?: LeaveRequestGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LeaveRequestGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLeaveRequestGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the LeaveRequest model
   */
  readonly fields: LeaveRequestFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for LeaveRequest.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__LeaveRequestClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the LeaveRequest model
   */
  interface LeaveRequestFieldRefs {
    readonly id: FieldRef<"LeaveRequest", 'Int'>
    readonly username: FieldRef<"LeaveRequest", 'String'>
    readonly role: FieldRef<"LeaveRequest", 'Role'>
    readonly school_id: FieldRef<"LeaveRequest", 'Int'>
    readonly class_id: FieldRef<"LeaveRequest", 'Int'>
    readonly from_date: FieldRef<"LeaveRequest", 'DateTime'>
    readonly to_date: FieldRef<"LeaveRequest", 'DateTime'>
    readonly reason: FieldRef<"LeaveRequest", 'String'>
    readonly status: FieldRef<"LeaveRequest", 'String'>
    readonly created_at: FieldRef<"LeaveRequest", 'DateTime'>
    readonly updated_at: FieldRef<"LeaveRequest", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * LeaveRequest findUnique
   */
  export type LeaveRequestFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeaveRequest
     */
    select?: LeaveRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LeaveRequest
     */
    omit?: LeaveRequestOmit<ExtArgs> | null
    /**
     * Filter, which LeaveRequest to fetch.
     */
    where: LeaveRequestWhereUniqueInput
  }

  /**
   * LeaveRequest findUniqueOrThrow
   */
  export type LeaveRequestFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeaveRequest
     */
    select?: LeaveRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LeaveRequest
     */
    omit?: LeaveRequestOmit<ExtArgs> | null
    /**
     * Filter, which LeaveRequest to fetch.
     */
    where: LeaveRequestWhereUniqueInput
  }

  /**
   * LeaveRequest findFirst
   */
  export type LeaveRequestFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeaveRequest
     */
    select?: LeaveRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LeaveRequest
     */
    omit?: LeaveRequestOmit<ExtArgs> | null
    /**
     * Filter, which LeaveRequest to fetch.
     */
    where?: LeaveRequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LeaveRequests to fetch.
     */
    orderBy?: LeaveRequestOrderByWithRelationInput | LeaveRequestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LeaveRequests.
     */
    cursor?: LeaveRequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LeaveRequests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LeaveRequests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LeaveRequests.
     */
    distinct?: LeaveRequestScalarFieldEnum | LeaveRequestScalarFieldEnum[]
  }

  /**
   * LeaveRequest findFirstOrThrow
   */
  export type LeaveRequestFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeaveRequest
     */
    select?: LeaveRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LeaveRequest
     */
    omit?: LeaveRequestOmit<ExtArgs> | null
    /**
     * Filter, which LeaveRequest to fetch.
     */
    where?: LeaveRequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LeaveRequests to fetch.
     */
    orderBy?: LeaveRequestOrderByWithRelationInput | LeaveRequestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LeaveRequests.
     */
    cursor?: LeaveRequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LeaveRequests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LeaveRequests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LeaveRequests.
     */
    distinct?: LeaveRequestScalarFieldEnum | LeaveRequestScalarFieldEnum[]
  }

  /**
   * LeaveRequest findMany
   */
  export type LeaveRequestFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeaveRequest
     */
    select?: LeaveRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LeaveRequest
     */
    omit?: LeaveRequestOmit<ExtArgs> | null
    /**
     * Filter, which LeaveRequests to fetch.
     */
    where?: LeaveRequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LeaveRequests to fetch.
     */
    orderBy?: LeaveRequestOrderByWithRelationInput | LeaveRequestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing LeaveRequests.
     */
    cursor?: LeaveRequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LeaveRequests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LeaveRequests.
     */
    skip?: number
    distinct?: LeaveRequestScalarFieldEnum | LeaveRequestScalarFieldEnum[]
  }

  /**
   * LeaveRequest create
   */
  export type LeaveRequestCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeaveRequest
     */
    select?: LeaveRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LeaveRequest
     */
    omit?: LeaveRequestOmit<ExtArgs> | null
    /**
     * The data needed to create a LeaveRequest.
     */
    data: XOR<LeaveRequestCreateInput, LeaveRequestUncheckedCreateInput>
  }

  /**
   * LeaveRequest createMany
   */
  export type LeaveRequestCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many LeaveRequests.
     */
    data: LeaveRequestCreateManyInput | LeaveRequestCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * LeaveRequest update
   */
  export type LeaveRequestUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeaveRequest
     */
    select?: LeaveRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LeaveRequest
     */
    omit?: LeaveRequestOmit<ExtArgs> | null
    /**
     * The data needed to update a LeaveRequest.
     */
    data: XOR<LeaveRequestUpdateInput, LeaveRequestUncheckedUpdateInput>
    /**
     * Choose, which LeaveRequest to update.
     */
    where: LeaveRequestWhereUniqueInput
  }

  /**
   * LeaveRequest updateMany
   */
  export type LeaveRequestUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update LeaveRequests.
     */
    data: XOR<LeaveRequestUpdateManyMutationInput, LeaveRequestUncheckedUpdateManyInput>
    /**
     * Filter which LeaveRequests to update
     */
    where?: LeaveRequestWhereInput
    /**
     * Limit how many LeaveRequests to update.
     */
    limit?: number
  }

  /**
   * LeaveRequest upsert
   */
  export type LeaveRequestUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeaveRequest
     */
    select?: LeaveRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LeaveRequest
     */
    omit?: LeaveRequestOmit<ExtArgs> | null
    /**
     * The filter to search for the LeaveRequest to update in case it exists.
     */
    where: LeaveRequestWhereUniqueInput
    /**
     * In case the LeaveRequest found by the `where` argument doesn't exist, create a new LeaveRequest with this data.
     */
    create: XOR<LeaveRequestCreateInput, LeaveRequestUncheckedCreateInput>
    /**
     * In case the LeaveRequest was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LeaveRequestUpdateInput, LeaveRequestUncheckedUpdateInput>
  }

  /**
   * LeaveRequest delete
   */
  export type LeaveRequestDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeaveRequest
     */
    select?: LeaveRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LeaveRequest
     */
    omit?: LeaveRequestOmit<ExtArgs> | null
    /**
     * Filter which LeaveRequest to delete.
     */
    where: LeaveRequestWhereUniqueInput
  }

  /**
   * LeaveRequest deleteMany
   */
  export type LeaveRequestDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which LeaveRequests to delete
     */
    where?: LeaveRequestWhereInput
    /**
     * Limit how many LeaveRequests to delete.
     */
    limit?: number
  }

  /**
   * LeaveRequest without action
   */
  export type LeaveRequestDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeaveRequest
     */
    select?: LeaveRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LeaveRequest
     */
    omit?: LeaveRequestOmit<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const Attendance_userScalarFieldEnum: {
    id: 'id',
    username: 'username',
    password: 'password',
    role: 'role',
    school_id: 'school_id'
  };

  export type Attendance_userScalarFieldEnum = (typeof Attendance_userScalarFieldEnum)[keyof typeof Attendance_userScalarFieldEnum]


  export const SchoolScalarFieldEnum: {
    id: 'id',
    name: 'name',
    address: 'address',
    photo: 'photo'
  };

  export type SchoolScalarFieldEnum = (typeof SchoolScalarFieldEnum)[keyof typeof SchoolScalarFieldEnum]


  export const ClassesScalarFieldEnum: {
    id: 'id',
    class: 'class',
    section: 'section',
    school_id: 'school_id'
  };

  export type ClassesScalarFieldEnum = (typeof ClassesScalarFieldEnum)[keyof typeof ClassesScalarFieldEnum]


  export const HolidaysScalarFieldEnum: {
    id: 'id',
    date: 'date',
    reason: 'reason',
    school_id: 'school_id',
    class_ids: 'class_ids',
    fn: 'fn',
    an: 'an'
  };

  export type HolidaysScalarFieldEnum = (typeof HolidaysScalarFieldEnum)[keyof typeof HolidaysScalarFieldEnum]


  export const StaffScalarFieldEnum: {
    id: 'id',
    username: 'username',
    designation: 'designation',
    name: 'name',
    email: 'email',
    gender: 'gender',
    mobile: 'mobile',
    school_id: 'school_id',
    password: 'password'
  };

  export type StaffScalarFieldEnum = (typeof StaffScalarFieldEnum)[keyof typeof StaffScalarFieldEnum]


  export const StaffAttendanceScalarFieldEnum: {
    username: 'username',
    date: 'date',
    fn_status: 'fn_status',
    an_status: 'an_status',
    school_id: 'school_id'
  };

  export type StaffAttendanceScalarFieldEnum = (typeof StaffAttendanceScalarFieldEnum)[keyof typeof StaffAttendanceScalarFieldEnum]


  export const StudentScalarFieldEnum: {
    id: 'id',
    username: 'username',
    name: 'name',
    gender: 'gender',
    email: 'email',
    mobile: 'mobile',
    class_id: 'class_id',
    school_id: 'school_id',
    photo: 'photo',
    password: 'password'
  };

  export type StudentScalarFieldEnum = (typeof StudentScalarFieldEnum)[keyof typeof StudentScalarFieldEnum]


  export const StudentAttendanceScalarFieldEnum: {
    username: 'username',
    date: 'date',
    fn_status: 'fn_status',
    an_status: 'an_status',
    school_id: 'school_id',
    class_id: 'class_id'
  };

  export type StudentAttendanceScalarFieldEnum = (typeof StudentAttendanceScalarFieldEnum)[keyof typeof StudentAttendanceScalarFieldEnum]


  export const ClassTimetableScalarFieldEnum: {
    id: 'id',
    schoolId: 'schoolId',
    classesId: 'classesId',
    dayOfWeek: 'dayOfWeek',
    periodNumber: 'periodNumber',
    subject: 'subject'
  };

  export type ClassTimetableScalarFieldEnum = (typeof ClassTimetableScalarFieldEnum)[keyof typeof ClassTimetableScalarFieldEnum]


  export const FeedbackScalarFieldEnum: {
    id: 'id',
    name: 'name',
    email: 'email',
    feedback: 'feedback',
    school_id: 'school_id',
    class_id: 'class_id',
    created_at: 'created_at'
  };

  export type FeedbackScalarFieldEnum = (typeof FeedbackScalarFieldEnum)[keyof typeof FeedbackScalarFieldEnum]


  export const AdminScalarFieldEnum: {
    id: 'id',
    name: 'name',
    designation: 'designation',
    gender: 'gender',
    mobile: 'mobile',
    email: 'email',
    photo: 'photo',
    username: 'username',
    school_id: 'school_id'
  };

  export type AdminScalarFieldEnum = (typeof AdminScalarFieldEnum)[keyof typeof AdminScalarFieldEnum]


  export const MessagesScalarFieldEnum: {
    id: 'id',
    messages: 'messages',
    date: 'date',
    school_id: 'school_id'
  };

  export type MessagesScalarFieldEnum = (typeof MessagesScalarFieldEnum)[keyof typeof MessagesScalarFieldEnum]


  export const LeaveRequestScalarFieldEnum: {
    id: 'id',
    username: 'username',
    role: 'role',
    school_id: 'school_id',
    class_id: 'class_id',
    from_date: 'from_date',
    to_date: 'to_date',
    reason: 'reason',
    status: 'status',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type LeaveRequestScalarFieldEnum = (typeof LeaveRequestScalarFieldEnum)[keyof typeof LeaveRequestScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const JsonNullValueInput: {
    JsonNull: typeof JsonNull
  };

  export type JsonNullValueInput = (typeof JsonNullValueInput)[keyof typeof JsonNullValueInput]


  export const Attendance_userOrderByRelevanceFieldEnum: {
    username: 'username',
    password: 'password',
    role: 'role'
  };

  export type Attendance_userOrderByRelevanceFieldEnum = (typeof Attendance_userOrderByRelevanceFieldEnum)[keyof typeof Attendance_userOrderByRelevanceFieldEnum]


  export const SchoolOrderByRelevanceFieldEnum: {
    name: 'name',
    address: 'address'
  };

  export type SchoolOrderByRelevanceFieldEnum = (typeof SchoolOrderByRelevanceFieldEnum)[keyof typeof SchoolOrderByRelevanceFieldEnum]


  export const ClassesOrderByRelevanceFieldEnum: {
    class: 'class',
    section: 'section'
  };

  export type ClassesOrderByRelevanceFieldEnum = (typeof ClassesOrderByRelevanceFieldEnum)[keyof typeof ClassesOrderByRelevanceFieldEnum]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const HolidaysOrderByRelevanceFieldEnum: {
    reason: 'reason',
    fn: 'fn',
    an: 'an'
  };

  export type HolidaysOrderByRelevanceFieldEnum = (typeof HolidaysOrderByRelevanceFieldEnum)[keyof typeof HolidaysOrderByRelevanceFieldEnum]


  export const StaffOrderByRelevanceFieldEnum: {
    username: 'username',
    designation: 'designation',
    name: 'name',
    email: 'email',
    mobile: 'mobile',
    password: 'password'
  };

  export type StaffOrderByRelevanceFieldEnum = (typeof StaffOrderByRelevanceFieldEnum)[keyof typeof StaffOrderByRelevanceFieldEnum]


  export const StaffAttendanceOrderByRelevanceFieldEnum: {
    username: 'username',
    fn_status: 'fn_status',
    an_status: 'an_status'
  };

  export type StaffAttendanceOrderByRelevanceFieldEnum = (typeof StaffAttendanceOrderByRelevanceFieldEnum)[keyof typeof StaffAttendanceOrderByRelevanceFieldEnum]


  export const StudentOrderByRelevanceFieldEnum: {
    username: 'username',
    name: 'name',
    email: 'email',
    mobile: 'mobile',
    password: 'password'
  };

  export type StudentOrderByRelevanceFieldEnum = (typeof StudentOrderByRelevanceFieldEnum)[keyof typeof StudentOrderByRelevanceFieldEnum]


  export const StudentAttendanceOrderByRelevanceFieldEnum: {
    username: 'username',
    fn_status: 'fn_status',
    an_status: 'an_status'
  };

  export type StudentAttendanceOrderByRelevanceFieldEnum = (typeof StudentAttendanceOrderByRelevanceFieldEnum)[keyof typeof StudentAttendanceOrderByRelevanceFieldEnum]


  export const ClassTimetableOrderByRelevanceFieldEnum: {
    subject: 'subject'
  };

  export type ClassTimetableOrderByRelevanceFieldEnum = (typeof ClassTimetableOrderByRelevanceFieldEnum)[keyof typeof ClassTimetableOrderByRelevanceFieldEnum]


  export const FeedbackOrderByRelevanceFieldEnum: {
    name: 'name',
    email: 'email',
    feedback: 'feedback'
  };

  export type FeedbackOrderByRelevanceFieldEnum = (typeof FeedbackOrderByRelevanceFieldEnum)[keyof typeof FeedbackOrderByRelevanceFieldEnum]


  export const AdminOrderByRelevanceFieldEnum: {
    name: 'name',
    designation: 'designation',
    gender: 'gender',
    mobile: 'mobile',
    email: 'email',
    username: 'username'
  };

  export type AdminOrderByRelevanceFieldEnum = (typeof AdminOrderByRelevanceFieldEnum)[keyof typeof AdminOrderByRelevanceFieldEnum]


  export const MessagesOrderByRelevanceFieldEnum: {
    messages: 'messages',
    date: 'date'
  };

  export type MessagesOrderByRelevanceFieldEnum = (typeof MessagesOrderByRelevanceFieldEnum)[keyof typeof MessagesOrderByRelevanceFieldEnum]


  export const LeaveRequestOrderByRelevanceFieldEnum: {
    username: 'username',
    reason: 'reason',
    status: 'status'
  };

  export type LeaveRequestOrderByRelevanceFieldEnum = (typeof LeaveRequestOrderByRelevanceFieldEnum)[keyof typeof LeaveRequestOrderByRelevanceFieldEnum]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'Bytes'
   */
  export type BytesFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Bytes'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


  /**
   * Reference to a field of type 'QueryMode'
   */
  export type EnumQueryModeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'QueryMode'>
    


  /**
   * Reference to a field of type 'Gender'
   */
  export type EnumGenderFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Gender'>
    


  /**
   * Reference to a field of type 'DayOfWeek'
   */
  export type EnumDayOfWeekFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DayOfWeek'>
    


  /**
   * Reference to a field of type 'Role'
   */
  export type EnumRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Role'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    
  /**
   * Deep Input Types
   */


  export type Attendance_userWhereInput = {
    AND?: Attendance_userWhereInput | Attendance_userWhereInput[]
    OR?: Attendance_userWhereInput[]
    NOT?: Attendance_userWhereInput | Attendance_userWhereInput[]
    id?: IntFilter<"Attendance_user"> | number
    username?: StringFilter<"Attendance_user"> | string
    password?: StringFilter<"Attendance_user"> | string
    role?: StringFilter<"Attendance_user"> | string
    school_id?: IntFilter<"Attendance_user"> | number
    school?: XOR<SchoolScalarRelationFilter, SchoolWhereInput>
    staff?: XOR<StaffNullableScalarRelationFilter, StaffWhereInput> | null
    students?: StudentListRelationFilter
    admin?: XOR<AdminNullableScalarRelationFilter, AdminWhereInput> | null
  }

  export type Attendance_userOrderByWithRelationInput = {
    id?: SortOrder
    username?: SortOrder
    password?: SortOrder
    role?: SortOrder
    school_id?: SortOrder
    school?: SchoolOrderByWithRelationInput
    staff?: StaffOrderByWithRelationInput
    students?: StudentOrderByRelationAggregateInput
    admin?: AdminOrderByWithRelationInput
    _relevance?: Attendance_userOrderByRelevanceInput
  }

  export type Attendance_userWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    username?: string
    AND?: Attendance_userWhereInput | Attendance_userWhereInput[]
    OR?: Attendance_userWhereInput[]
    NOT?: Attendance_userWhereInput | Attendance_userWhereInput[]
    password?: StringFilter<"Attendance_user"> | string
    role?: StringFilter<"Attendance_user"> | string
    school_id?: IntFilter<"Attendance_user"> | number
    school?: XOR<SchoolScalarRelationFilter, SchoolWhereInput>
    staff?: XOR<StaffNullableScalarRelationFilter, StaffWhereInput> | null
    students?: StudentListRelationFilter
    admin?: XOR<AdminNullableScalarRelationFilter, AdminWhereInput> | null
  }, "id" | "username">

  export type Attendance_userOrderByWithAggregationInput = {
    id?: SortOrder
    username?: SortOrder
    password?: SortOrder
    role?: SortOrder
    school_id?: SortOrder
    _count?: Attendance_userCountOrderByAggregateInput
    _avg?: Attendance_userAvgOrderByAggregateInput
    _max?: Attendance_userMaxOrderByAggregateInput
    _min?: Attendance_userMinOrderByAggregateInput
    _sum?: Attendance_userSumOrderByAggregateInput
  }

  export type Attendance_userScalarWhereWithAggregatesInput = {
    AND?: Attendance_userScalarWhereWithAggregatesInput | Attendance_userScalarWhereWithAggregatesInput[]
    OR?: Attendance_userScalarWhereWithAggregatesInput[]
    NOT?: Attendance_userScalarWhereWithAggregatesInput | Attendance_userScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Attendance_user"> | number
    username?: StringWithAggregatesFilter<"Attendance_user"> | string
    password?: StringWithAggregatesFilter<"Attendance_user"> | string
    role?: StringWithAggregatesFilter<"Attendance_user"> | string
    school_id?: IntWithAggregatesFilter<"Attendance_user"> | number
  }

  export type SchoolWhereInput = {
    AND?: SchoolWhereInput | SchoolWhereInput[]
    OR?: SchoolWhereInput[]
    NOT?: SchoolWhereInput | SchoolWhereInput[]
    id?: IntFilter<"School"> | number
    name?: StringFilter<"School"> | string
    address?: StringFilter<"School"> | string
    photo?: BytesFilter<"School"> | Uint8Array
    users?: Attendance_userListRelationFilter
    staff?: StaffListRelationFilter
    classes?: ClassesListRelationFilter
    holidays?: HolidaysListRelationFilter
    students?: StudentListRelationFilter
    feedbacks?: FeedbackListRelationFilter
    classTimetables?: ClassTimetableListRelationFilter
    staffAttendances?: StaffAttendanceListRelationFilter
    studentAttendances?: StudentAttendanceListRelationFilter
    admins?: AdminListRelationFilter
    Messages?: MessagesListRelationFilter
  }

  export type SchoolOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    address?: SortOrder
    photo?: SortOrder
    users?: Attendance_userOrderByRelationAggregateInput
    staff?: StaffOrderByRelationAggregateInput
    classes?: ClassesOrderByRelationAggregateInput
    holidays?: HolidaysOrderByRelationAggregateInput
    students?: StudentOrderByRelationAggregateInput
    feedbacks?: FeedbackOrderByRelationAggregateInput
    classTimetables?: ClassTimetableOrderByRelationAggregateInput
    staffAttendances?: StaffAttendanceOrderByRelationAggregateInput
    studentAttendances?: StudentAttendanceOrderByRelationAggregateInput
    admins?: AdminOrderByRelationAggregateInput
    Messages?: MessagesOrderByRelationAggregateInput
    _relevance?: SchoolOrderByRelevanceInput
  }

  export type SchoolWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    name?: string
    AND?: SchoolWhereInput | SchoolWhereInput[]
    OR?: SchoolWhereInput[]
    NOT?: SchoolWhereInput | SchoolWhereInput[]
    address?: StringFilter<"School"> | string
    photo?: BytesFilter<"School"> | Uint8Array
    users?: Attendance_userListRelationFilter
    staff?: StaffListRelationFilter
    classes?: ClassesListRelationFilter
    holidays?: HolidaysListRelationFilter
    students?: StudentListRelationFilter
    feedbacks?: FeedbackListRelationFilter
    classTimetables?: ClassTimetableListRelationFilter
    staffAttendances?: StaffAttendanceListRelationFilter
    studentAttendances?: StudentAttendanceListRelationFilter
    admins?: AdminListRelationFilter
    Messages?: MessagesListRelationFilter
  }, "id" | "name">

  export type SchoolOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    address?: SortOrder
    photo?: SortOrder
    _count?: SchoolCountOrderByAggregateInput
    _avg?: SchoolAvgOrderByAggregateInput
    _max?: SchoolMaxOrderByAggregateInput
    _min?: SchoolMinOrderByAggregateInput
    _sum?: SchoolSumOrderByAggregateInput
  }

  export type SchoolScalarWhereWithAggregatesInput = {
    AND?: SchoolScalarWhereWithAggregatesInput | SchoolScalarWhereWithAggregatesInput[]
    OR?: SchoolScalarWhereWithAggregatesInput[]
    NOT?: SchoolScalarWhereWithAggregatesInput | SchoolScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"School"> | number
    name?: StringWithAggregatesFilter<"School"> | string
    address?: StringWithAggregatesFilter<"School"> | string
    photo?: BytesWithAggregatesFilter<"School"> | Uint8Array
  }

  export type ClassesWhereInput = {
    AND?: ClassesWhereInput | ClassesWhereInput[]
    OR?: ClassesWhereInput[]
    NOT?: ClassesWhereInput | ClassesWhereInput[]
    id?: IntFilter<"Classes"> | number
    class?: StringFilter<"Classes"> | string
    section?: StringFilter<"Classes"> | string
    school_id?: IntFilter<"Classes"> | number
    school?: XOR<SchoolScalarRelationFilter, SchoolWhereInput>
    holidays?: HolidaysListRelationFilter
    students?: StudentListRelationFilter
    studentAttendance?: StudentAttendanceListRelationFilter
    classTimetables?: ClassTimetableListRelationFilter
    feedbacks?: FeedbackListRelationFilter
  }

  export type ClassesOrderByWithRelationInput = {
    id?: SortOrder
    class?: SortOrder
    section?: SortOrder
    school_id?: SortOrder
    school?: SchoolOrderByWithRelationInput
    holidays?: HolidaysOrderByRelationAggregateInput
    students?: StudentOrderByRelationAggregateInput
    studentAttendance?: StudentAttendanceOrderByRelationAggregateInput
    classTimetables?: ClassTimetableOrderByRelationAggregateInput
    feedbacks?: FeedbackOrderByRelationAggregateInput
    _relevance?: ClassesOrderByRelevanceInput
  }

  export type ClassesWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ClassesWhereInput | ClassesWhereInput[]
    OR?: ClassesWhereInput[]
    NOT?: ClassesWhereInput | ClassesWhereInput[]
    class?: StringFilter<"Classes"> | string
    section?: StringFilter<"Classes"> | string
    school_id?: IntFilter<"Classes"> | number
    school?: XOR<SchoolScalarRelationFilter, SchoolWhereInput>
    holidays?: HolidaysListRelationFilter
    students?: StudentListRelationFilter
    studentAttendance?: StudentAttendanceListRelationFilter
    classTimetables?: ClassTimetableListRelationFilter
    feedbacks?: FeedbackListRelationFilter
  }, "id">

  export type ClassesOrderByWithAggregationInput = {
    id?: SortOrder
    class?: SortOrder
    section?: SortOrder
    school_id?: SortOrder
    _count?: ClassesCountOrderByAggregateInput
    _avg?: ClassesAvgOrderByAggregateInput
    _max?: ClassesMaxOrderByAggregateInput
    _min?: ClassesMinOrderByAggregateInput
    _sum?: ClassesSumOrderByAggregateInput
  }

  export type ClassesScalarWhereWithAggregatesInput = {
    AND?: ClassesScalarWhereWithAggregatesInput | ClassesScalarWhereWithAggregatesInput[]
    OR?: ClassesScalarWhereWithAggregatesInput[]
    NOT?: ClassesScalarWhereWithAggregatesInput | ClassesScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Classes"> | number
    class?: StringWithAggregatesFilter<"Classes"> | string
    section?: StringWithAggregatesFilter<"Classes"> | string
    school_id?: IntWithAggregatesFilter<"Classes"> | number
  }

  export type HolidaysWhereInput = {
    AND?: HolidaysWhereInput | HolidaysWhereInput[]
    OR?: HolidaysWhereInput[]
    NOT?: HolidaysWhereInput | HolidaysWhereInput[]
    id?: IntFilter<"Holidays"> | number
    date?: DateTimeFilter<"Holidays"> | Date | string
    reason?: StringFilter<"Holidays"> | string
    school_id?: IntNullableFilter<"Holidays"> | number | null
    class_ids?: JsonFilter<"Holidays">
    fn?: StringNullableFilter<"Holidays"> | string | null
    an?: StringFilter<"Holidays"> | string
    school?: XOR<SchoolNullableScalarRelationFilter, SchoolWhereInput> | null
    classes?: ClassesListRelationFilter
  }

  export type HolidaysOrderByWithRelationInput = {
    id?: SortOrder
    date?: SortOrder
    reason?: SortOrder
    school_id?: SortOrderInput | SortOrder
    class_ids?: SortOrder
    fn?: SortOrderInput | SortOrder
    an?: SortOrder
    school?: SchoolOrderByWithRelationInput
    classes?: ClassesOrderByRelationAggregateInput
    _relevance?: HolidaysOrderByRelevanceInput
  }

  export type HolidaysWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: HolidaysWhereInput | HolidaysWhereInput[]
    OR?: HolidaysWhereInput[]
    NOT?: HolidaysWhereInput | HolidaysWhereInput[]
    date?: DateTimeFilter<"Holidays"> | Date | string
    reason?: StringFilter<"Holidays"> | string
    school_id?: IntNullableFilter<"Holidays"> | number | null
    class_ids?: JsonFilter<"Holidays">
    fn?: StringNullableFilter<"Holidays"> | string | null
    an?: StringFilter<"Holidays"> | string
    school?: XOR<SchoolNullableScalarRelationFilter, SchoolWhereInput> | null
    classes?: ClassesListRelationFilter
  }, "id">

  export type HolidaysOrderByWithAggregationInput = {
    id?: SortOrder
    date?: SortOrder
    reason?: SortOrder
    school_id?: SortOrderInput | SortOrder
    class_ids?: SortOrder
    fn?: SortOrderInput | SortOrder
    an?: SortOrder
    _count?: HolidaysCountOrderByAggregateInput
    _avg?: HolidaysAvgOrderByAggregateInput
    _max?: HolidaysMaxOrderByAggregateInput
    _min?: HolidaysMinOrderByAggregateInput
    _sum?: HolidaysSumOrderByAggregateInput
  }

  export type HolidaysScalarWhereWithAggregatesInput = {
    AND?: HolidaysScalarWhereWithAggregatesInput | HolidaysScalarWhereWithAggregatesInput[]
    OR?: HolidaysScalarWhereWithAggregatesInput[]
    NOT?: HolidaysScalarWhereWithAggregatesInput | HolidaysScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Holidays"> | number
    date?: DateTimeWithAggregatesFilter<"Holidays"> | Date | string
    reason?: StringWithAggregatesFilter<"Holidays"> | string
    school_id?: IntNullableWithAggregatesFilter<"Holidays"> | number | null
    class_ids?: JsonWithAggregatesFilter<"Holidays">
    fn?: StringNullableWithAggregatesFilter<"Holidays"> | string | null
    an?: StringWithAggregatesFilter<"Holidays"> | string
  }

  export type StaffWhereInput = {
    AND?: StaffWhereInput | StaffWhereInput[]
    OR?: StaffWhereInput[]
    NOT?: StaffWhereInput | StaffWhereInput[]
    id?: IntFilter<"Staff"> | number
    username?: StringFilter<"Staff"> | string
    designation?: StringFilter<"Staff"> | string
    name?: StringNullableFilter<"Staff"> | string | null
    email?: StringFilter<"Staff"> | string
    gender?: EnumGenderNullableFilter<"Staff"> | $Enums.Gender | null
    mobile?: StringFilter<"Staff"> | string
    school_id?: IntFilter<"Staff"> | number
    password?: StringFilter<"Staff"> | string
    school?: XOR<SchoolScalarRelationFilter, SchoolWhereInput>
    user?: XOR<Attendance_userScalarRelationFilter, Attendance_userWhereInput>
    attendances?: StaffAttendanceListRelationFilter
  }

  export type StaffOrderByWithRelationInput = {
    id?: SortOrder
    username?: SortOrder
    designation?: SortOrder
    name?: SortOrderInput | SortOrder
    email?: SortOrder
    gender?: SortOrderInput | SortOrder
    mobile?: SortOrder
    school_id?: SortOrder
    password?: SortOrder
    school?: SchoolOrderByWithRelationInput
    user?: Attendance_userOrderByWithRelationInput
    attendances?: StaffAttendanceOrderByRelationAggregateInput
    _relevance?: StaffOrderByRelevanceInput
  }

  export type StaffWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    username?: string
    email?: string
    mobile?: string
    AND?: StaffWhereInput | StaffWhereInput[]
    OR?: StaffWhereInput[]
    NOT?: StaffWhereInput | StaffWhereInput[]
    designation?: StringFilter<"Staff"> | string
    name?: StringNullableFilter<"Staff"> | string | null
    gender?: EnumGenderNullableFilter<"Staff"> | $Enums.Gender | null
    school_id?: IntFilter<"Staff"> | number
    password?: StringFilter<"Staff"> | string
    school?: XOR<SchoolScalarRelationFilter, SchoolWhereInput>
    user?: XOR<Attendance_userScalarRelationFilter, Attendance_userWhereInput>
    attendances?: StaffAttendanceListRelationFilter
  }, "id" | "username" | "email" | "mobile">

  export type StaffOrderByWithAggregationInput = {
    id?: SortOrder
    username?: SortOrder
    designation?: SortOrder
    name?: SortOrderInput | SortOrder
    email?: SortOrder
    gender?: SortOrderInput | SortOrder
    mobile?: SortOrder
    school_id?: SortOrder
    password?: SortOrder
    _count?: StaffCountOrderByAggregateInput
    _avg?: StaffAvgOrderByAggregateInput
    _max?: StaffMaxOrderByAggregateInput
    _min?: StaffMinOrderByAggregateInput
    _sum?: StaffSumOrderByAggregateInput
  }

  export type StaffScalarWhereWithAggregatesInput = {
    AND?: StaffScalarWhereWithAggregatesInput | StaffScalarWhereWithAggregatesInput[]
    OR?: StaffScalarWhereWithAggregatesInput[]
    NOT?: StaffScalarWhereWithAggregatesInput | StaffScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Staff"> | number
    username?: StringWithAggregatesFilter<"Staff"> | string
    designation?: StringWithAggregatesFilter<"Staff"> | string
    name?: StringNullableWithAggregatesFilter<"Staff"> | string | null
    email?: StringWithAggregatesFilter<"Staff"> | string
    gender?: EnumGenderNullableWithAggregatesFilter<"Staff"> | $Enums.Gender | null
    mobile?: StringWithAggregatesFilter<"Staff"> | string
    school_id?: IntWithAggregatesFilter<"Staff"> | number
    password?: StringWithAggregatesFilter<"Staff"> | string
  }

  export type StaffAttendanceWhereInput = {
    AND?: StaffAttendanceWhereInput | StaffAttendanceWhereInput[]
    OR?: StaffAttendanceWhereInput[]
    NOT?: StaffAttendanceWhereInput | StaffAttendanceWhereInput[]
    username?: StringFilter<"StaffAttendance"> | string
    date?: DateTimeFilter<"StaffAttendance"> | Date | string
    fn_status?: StringFilter<"StaffAttendance"> | string
    an_status?: StringFilter<"StaffAttendance"> | string
    school_id?: IntNullableFilter<"StaffAttendance"> | number | null
    school?: XOR<SchoolNullableScalarRelationFilter, SchoolWhereInput> | null
    staff?: XOR<StaffScalarRelationFilter, StaffWhereInput>
  }

  export type StaffAttendanceOrderByWithRelationInput = {
    username?: SortOrder
    date?: SortOrder
    fn_status?: SortOrder
    an_status?: SortOrder
    school_id?: SortOrderInput | SortOrder
    school?: SchoolOrderByWithRelationInput
    staff?: StaffOrderByWithRelationInput
    _relevance?: StaffAttendanceOrderByRelevanceInput
  }

  export type StaffAttendanceWhereUniqueInput = Prisma.AtLeast<{
    username_date?: StaffAttendanceUsernameDateCompoundUniqueInput
    AND?: StaffAttendanceWhereInput | StaffAttendanceWhereInput[]
    OR?: StaffAttendanceWhereInput[]
    NOT?: StaffAttendanceWhereInput | StaffAttendanceWhereInput[]
    username?: StringFilter<"StaffAttendance"> | string
    date?: DateTimeFilter<"StaffAttendance"> | Date | string
    fn_status?: StringFilter<"StaffAttendance"> | string
    an_status?: StringFilter<"StaffAttendance"> | string
    school_id?: IntNullableFilter<"StaffAttendance"> | number | null
    school?: XOR<SchoolNullableScalarRelationFilter, SchoolWhereInput> | null
    staff?: XOR<StaffScalarRelationFilter, StaffWhereInput>
  }, "username_date">

  export type StaffAttendanceOrderByWithAggregationInput = {
    username?: SortOrder
    date?: SortOrder
    fn_status?: SortOrder
    an_status?: SortOrder
    school_id?: SortOrderInput | SortOrder
    _count?: StaffAttendanceCountOrderByAggregateInput
    _avg?: StaffAttendanceAvgOrderByAggregateInput
    _max?: StaffAttendanceMaxOrderByAggregateInput
    _min?: StaffAttendanceMinOrderByAggregateInput
    _sum?: StaffAttendanceSumOrderByAggregateInput
  }

  export type StaffAttendanceScalarWhereWithAggregatesInput = {
    AND?: StaffAttendanceScalarWhereWithAggregatesInput | StaffAttendanceScalarWhereWithAggregatesInput[]
    OR?: StaffAttendanceScalarWhereWithAggregatesInput[]
    NOT?: StaffAttendanceScalarWhereWithAggregatesInput | StaffAttendanceScalarWhereWithAggregatesInput[]
    username?: StringWithAggregatesFilter<"StaffAttendance"> | string
    date?: DateTimeWithAggregatesFilter<"StaffAttendance"> | Date | string
    fn_status?: StringWithAggregatesFilter<"StaffAttendance"> | string
    an_status?: StringWithAggregatesFilter<"StaffAttendance"> | string
    school_id?: IntNullableWithAggregatesFilter<"StaffAttendance"> | number | null
  }

  export type StudentWhereInput = {
    AND?: StudentWhereInput | StudentWhereInput[]
    OR?: StudentWhereInput[]
    NOT?: StudentWhereInput | StudentWhereInput[]
    id?: IntFilter<"Student"> | number
    username?: StringFilter<"Student"> | string
    name?: StringNullableFilter<"Student"> | string | null
    gender?: EnumGenderNullableFilter<"Student"> | $Enums.Gender | null
    email?: StringFilter<"Student"> | string
    mobile?: StringFilter<"Student"> | string
    class_id?: IntFilter<"Student"> | number
    school_id?: IntFilter<"Student"> | number
    photo?: BytesNullableFilter<"Student"> | Uint8Array | null
    password?: StringFilter<"Student"> | string
    class?: XOR<ClassesScalarRelationFilter, ClassesWhereInput>
    school?: XOR<SchoolScalarRelationFilter, SchoolWhereInput>
    user?: XOR<Attendance_userScalarRelationFilter, Attendance_userWhereInput>
    attendance?: StudentAttendanceListRelationFilter
  }

  export type StudentOrderByWithRelationInput = {
    id?: SortOrder
    username?: SortOrder
    name?: SortOrderInput | SortOrder
    gender?: SortOrderInput | SortOrder
    email?: SortOrder
    mobile?: SortOrder
    class_id?: SortOrder
    school_id?: SortOrder
    photo?: SortOrderInput | SortOrder
    password?: SortOrder
    class?: ClassesOrderByWithRelationInput
    school?: SchoolOrderByWithRelationInput
    user?: Attendance_userOrderByWithRelationInput
    attendance?: StudentAttendanceOrderByRelationAggregateInput
    _relevance?: StudentOrderByRelevanceInput
  }

  export type StudentWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    username?: string
    AND?: StudentWhereInput | StudentWhereInput[]
    OR?: StudentWhereInput[]
    NOT?: StudentWhereInput | StudentWhereInput[]
    name?: StringNullableFilter<"Student"> | string | null
    gender?: EnumGenderNullableFilter<"Student"> | $Enums.Gender | null
    email?: StringFilter<"Student"> | string
    mobile?: StringFilter<"Student"> | string
    class_id?: IntFilter<"Student"> | number
    school_id?: IntFilter<"Student"> | number
    photo?: BytesNullableFilter<"Student"> | Uint8Array | null
    password?: StringFilter<"Student"> | string
    class?: XOR<ClassesScalarRelationFilter, ClassesWhereInput>
    school?: XOR<SchoolScalarRelationFilter, SchoolWhereInput>
    user?: XOR<Attendance_userScalarRelationFilter, Attendance_userWhereInput>
    attendance?: StudentAttendanceListRelationFilter
  }, "id" | "username">

  export type StudentOrderByWithAggregationInput = {
    id?: SortOrder
    username?: SortOrder
    name?: SortOrderInput | SortOrder
    gender?: SortOrderInput | SortOrder
    email?: SortOrder
    mobile?: SortOrder
    class_id?: SortOrder
    school_id?: SortOrder
    photo?: SortOrderInput | SortOrder
    password?: SortOrder
    _count?: StudentCountOrderByAggregateInput
    _avg?: StudentAvgOrderByAggregateInput
    _max?: StudentMaxOrderByAggregateInput
    _min?: StudentMinOrderByAggregateInput
    _sum?: StudentSumOrderByAggregateInput
  }

  export type StudentScalarWhereWithAggregatesInput = {
    AND?: StudentScalarWhereWithAggregatesInput | StudentScalarWhereWithAggregatesInput[]
    OR?: StudentScalarWhereWithAggregatesInput[]
    NOT?: StudentScalarWhereWithAggregatesInput | StudentScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Student"> | number
    username?: StringWithAggregatesFilter<"Student"> | string
    name?: StringNullableWithAggregatesFilter<"Student"> | string | null
    gender?: EnumGenderNullableWithAggregatesFilter<"Student"> | $Enums.Gender | null
    email?: StringWithAggregatesFilter<"Student"> | string
    mobile?: StringWithAggregatesFilter<"Student"> | string
    class_id?: IntWithAggregatesFilter<"Student"> | number
    school_id?: IntWithAggregatesFilter<"Student"> | number
    photo?: BytesNullableWithAggregatesFilter<"Student"> | Uint8Array | null
    password?: StringWithAggregatesFilter<"Student"> | string
  }

  export type StudentAttendanceWhereInput = {
    AND?: StudentAttendanceWhereInput | StudentAttendanceWhereInput[]
    OR?: StudentAttendanceWhereInput[]
    NOT?: StudentAttendanceWhereInput | StudentAttendanceWhereInput[]
    username?: StringFilter<"StudentAttendance"> | string
    date?: DateTimeFilter<"StudentAttendance"> | Date | string
    fn_status?: StringFilter<"StudentAttendance"> | string
    an_status?: StringFilter<"StudentAttendance"> | string
    school_id?: IntFilter<"StudentAttendance"> | number
    class_id?: IntFilter<"StudentAttendance"> | number
    class?: XOR<ClassesScalarRelationFilter, ClassesWhereInput>
    student?: XOR<StudentScalarRelationFilter, StudentWhereInput>
    school?: XOR<SchoolScalarRelationFilter, SchoolWhereInput>
  }

  export type StudentAttendanceOrderByWithRelationInput = {
    username?: SortOrder
    date?: SortOrder
    fn_status?: SortOrder
    an_status?: SortOrder
    school_id?: SortOrder
    class_id?: SortOrder
    class?: ClassesOrderByWithRelationInput
    student?: StudentOrderByWithRelationInput
    school?: SchoolOrderByWithRelationInput
    _relevance?: StudentAttendanceOrderByRelevanceInput
  }

  export type StudentAttendanceWhereUniqueInput = Prisma.AtLeast<{
    username_date?: StudentAttendanceUsername_dateCompoundUniqueInput
    AND?: StudentAttendanceWhereInput | StudentAttendanceWhereInput[]
    OR?: StudentAttendanceWhereInput[]
    NOT?: StudentAttendanceWhereInput | StudentAttendanceWhereInput[]
    username?: StringFilter<"StudentAttendance"> | string
    date?: DateTimeFilter<"StudentAttendance"> | Date | string
    fn_status?: StringFilter<"StudentAttendance"> | string
    an_status?: StringFilter<"StudentAttendance"> | string
    school_id?: IntFilter<"StudentAttendance"> | number
    class_id?: IntFilter<"StudentAttendance"> | number
    class?: XOR<ClassesScalarRelationFilter, ClassesWhereInput>
    student?: XOR<StudentScalarRelationFilter, StudentWhereInput>
    school?: XOR<SchoolScalarRelationFilter, SchoolWhereInput>
  }, "username_date">

  export type StudentAttendanceOrderByWithAggregationInput = {
    username?: SortOrder
    date?: SortOrder
    fn_status?: SortOrder
    an_status?: SortOrder
    school_id?: SortOrder
    class_id?: SortOrder
    _count?: StudentAttendanceCountOrderByAggregateInput
    _avg?: StudentAttendanceAvgOrderByAggregateInput
    _max?: StudentAttendanceMaxOrderByAggregateInput
    _min?: StudentAttendanceMinOrderByAggregateInput
    _sum?: StudentAttendanceSumOrderByAggregateInput
  }

  export type StudentAttendanceScalarWhereWithAggregatesInput = {
    AND?: StudentAttendanceScalarWhereWithAggregatesInput | StudentAttendanceScalarWhereWithAggregatesInput[]
    OR?: StudentAttendanceScalarWhereWithAggregatesInput[]
    NOT?: StudentAttendanceScalarWhereWithAggregatesInput | StudentAttendanceScalarWhereWithAggregatesInput[]
    username?: StringWithAggregatesFilter<"StudentAttendance"> | string
    date?: DateTimeWithAggregatesFilter<"StudentAttendance"> | Date | string
    fn_status?: StringWithAggregatesFilter<"StudentAttendance"> | string
    an_status?: StringWithAggregatesFilter<"StudentAttendance"> | string
    school_id?: IntWithAggregatesFilter<"StudentAttendance"> | number
    class_id?: IntWithAggregatesFilter<"StudentAttendance"> | number
  }

  export type ClassTimetableWhereInput = {
    AND?: ClassTimetableWhereInput | ClassTimetableWhereInput[]
    OR?: ClassTimetableWhereInput[]
    NOT?: ClassTimetableWhereInput | ClassTimetableWhereInput[]
    id?: IntFilter<"ClassTimetable"> | number
    schoolId?: IntNullableFilter<"ClassTimetable"> | number | null
    classesId?: IntNullableFilter<"ClassTimetable"> | number | null
    dayOfWeek?: EnumDayOfWeekFilter<"ClassTimetable"> | $Enums.DayOfWeek
    periodNumber?: IntFilter<"ClassTimetable"> | number
    subject?: StringFilter<"ClassTimetable"> | string
    School?: XOR<SchoolNullableScalarRelationFilter, SchoolWhereInput> | null
    Classes?: XOR<ClassesNullableScalarRelationFilter, ClassesWhereInput> | null
  }

  export type ClassTimetableOrderByWithRelationInput = {
    id?: SortOrder
    schoolId?: SortOrderInput | SortOrder
    classesId?: SortOrderInput | SortOrder
    dayOfWeek?: SortOrder
    periodNumber?: SortOrder
    subject?: SortOrder
    School?: SchoolOrderByWithRelationInput
    Classes?: ClassesOrderByWithRelationInput
    _relevance?: ClassTimetableOrderByRelevanceInput
  }

  export type ClassTimetableWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ClassTimetableWhereInput | ClassTimetableWhereInput[]
    OR?: ClassTimetableWhereInput[]
    NOT?: ClassTimetableWhereInput | ClassTimetableWhereInput[]
    schoolId?: IntNullableFilter<"ClassTimetable"> | number | null
    classesId?: IntNullableFilter<"ClassTimetable"> | number | null
    dayOfWeek?: EnumDayOfWeekFilter<"ClassTimetable"> | $Enums.DayOfWeek
    periodNumber?: IntFilter<"ClassTimetable"> | number
    subject?: StringFilter<"ClassTimetable"> | string
    School?: XOR<SchoolNullableScalarRelationFilter, SchoolWhereInput> | null
    Classes?: XOR<ClassesNullableScalarRelationFilter, ClassesWhereInput> | null
  }, "id">

  export type ClassTimetableOrderByWithAggregationInput = {
    id?: SortOrder
    schoolId?: SortOrderInput | SortOrder
    classesId?: SortOrderInput | SortOrder
    dayOfWeek?: SortOrder
    periodNumber?: SortOrder
    subject?: SortOrder
    _count?: ClassTimetableCountOrderByAggregateInput
    _avg?: ClassTimetableAvgOrderByAggregateInput
    _max?: ClassTimetableMaxOrderByAggregateInput
    _min?: ClassTimetableMinOrderByAggregateInput
    _sum?: ClassTimetableSumOrderByAggregateInput
  }

  export type ClassTimetableScalarWhereWithAggregatesInput = {
    AND?: ClassTimetableScalarWhereWithAggregatesInput | ClassTimetableScalarWhereWithAggregatesInput[]
    OR?: ClassTimetableScalarWhereWithAggregatesInput[]
    NOT?: ClassTimetableScalarWhereWithAggregatesInput | ClassTimetableScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"ClassTimetable"> | number
    schoolId?: IntNullableWithAggregatesFilter<"ClassTimetable"> | number | null
    classesId?: IntNullableWithAggregatesFilter<"ClassTimetable"> | number | null
    dayOfWeek?: EnumDayOfWeekWithAggregatesFilter<"ClassTimetable"> | $Enums.DayOfWeek
    periodNumber?: IntWithAggregatesFilter<"ClassTimetable"> | number
    subject?: StringWithAggregatesFilter<"ClassTimetable"> | string
  }

  export type FeedbackWhereInput = {
    AND?: FeedbackWhereInput | FeedbackWhereInput[]
    OR?: FeedbackWhereInput[]
    NOT?: FeedbackWhereInput | FeedbackWhereInput[]
    id?: IntFilter<"Feedback"> | number
    name?: StringFilter<"Feedback"> | string
    email?: StringFilter<"Feedback"> | string
    feedback?: StringFilter<"Feedback"> | string
    school_id?: IntFilter<"Feedback"> | number
    class_id?: IntFilter<"Feedback"> | number
    created_at?: DateTimeFilter<"Feedback"> | Date | string
    school?: XOR<SchoolScalarRelationFilter, SchoolWhereInput>
    class?: XOR<ClassesScalarRelationFilter, ClassesWhereInput>
  }

  export type FeedbackOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    feedback?: SortOrder
    school_id?: SortOrder
    class_id?: SortOrder
    created_at?: SortOrder
    school?: SchoolOrderByWithRelationInput
    class?: ClassesOrderByWithRelationInput
    _relevance?: FeedbackOrderByRelevanceInput
  }

  export type FeedbackWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: FeedbackWhereInput | FeedbackWhereInput[]
    OR?: FeedbackWhereInput[]
    NOT?: FeedbackWhereInput | FeedbackWhereInput[]
    name?: StringFilter<"Feedback"> | string
    email?: StringFilter<"Feedback"> | string
    feedback?: StringFilter<"Feedback"> | string
    school_id?: IntFilter<"Feedback"> | number
    class_id?: IntFilter<"Feedback"> | number
    created_at?: DateTimeFilter<"Feedback"> | Date | string
    school?: XOR<SchoolScalarRelationFilter, SchoolWhereInput>
    class?: XOR<ClassesScalarRelationFilter, ClassesWhereInput>
  }, "id">

  export type FeedbackOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    feedback?: SortOrder
    school_id?: SortOrder
    class_id?: SortOrder
    created_at?: SortOrder
    _count?: FeedbackCountOrderByAggregateInput
    _avg?: FeedbackAvgOrderByAggregateInput
    _max?: FeedbackMaxOrderByAggregateInput
    _min?: FeedbackMinOrderByAggregateInput
    _sum?: FeedbackSumOrderByAggregateInput
  }

  export type FeedbackScalarWhereWithAggregatesInput = {
    AND?: FeedbackScalarWhereWithAggregatesInput | FeedbackScalarWhereWithAggregatesInput[]
    OR?: FeedbackScalarWhereWithAggregatesInput[]
    NOT?: FeedbackScalarWhereWithAggregatesInput | FeedbackScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Feedback"> | number
    name?: StringWithAggregatesFilter<"Feedback"> | string
    email?: StringWithAggregatesFilter<"Feedback"> | string
    feedback?: StringWithAggregatesFilter<"Feedback"> | string
    school_id?: IntWithAggregatesFilter<"Feedback"> | number
    class_id?: IntWithAggregatesFilter<"Feedback"> | number
    created_at?: DateTimeWithAggregatesFilter<"Feedback"> | Date | string
  }

  export type AdminWhereInput = {
    AND?: AdminWhereInput | AdminWhereInput[]
    OR?: AdminWhereInput[]
    NOT?: AdminWhereInput | AdminWhereInput[]
    id?: IntFilter<"Admin"> | number
    name?: StringNullableFilter<"Admin"> | string | null
    designation?: StringFilter<"Admin"> | string
    gender?: StringFilter<"Admin"> | string
    mobile?: StringFilter<"Admin"> | string
    email?: StringFilter<"Admin"> | string
    photo?: BytesNullableFilter<"Admin"> | Uint8Array | null
    username?: StringFilter<"Admin"> | string
    school_id?: IntFilter<"Admin"> | number
    school?: XOR<SchoolScalarRelationFilter, SchoolWhereInput>
    user?: XOR<Attendance_userScalarRelationFilter, Attendance_userWhereInput>
  }

  export type AdminOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrderInput | SortOrder
    designation?: SortOrder
    gender?: SortOrder
    mobile?: SortOrder
    email?: SortOrder
    photo?: SortOrderInput | SortOrder
    username?: SortOrder
    school_id?: SortOrder
    school?: SchoolOrderByWithRelationInput
    user?: Attendance_userOrderByWithRelationInput
    _relevance?: AdminOrderByRelevanceInput
  }

  export type AdminWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    mobile?: string
    username?: string
    AND?: AdminWhereInput | AdminWhereInput[]
    OR?: AdminWhereInput[]
    NOT?: AdminWhereInput | AdminWhereInput[]
    name?: StringNullableFilter<"Admin"> | string | null
    designation?: StringFilter<"Admin"> | string
    gender?: StringFilter<"Admin"> | string
    email?: StringFilter<"Admin"> | string
    photo?: BytesNullableFilter<"Admin"> | Uint8Array | null
    school_id?: IntFilter<"Admin"> | number
    school?: XOR<SchoolScalarRelationFilter, SchoolWhereInput>
    user?: XOR<Attendance_userScalarRelationFilter, Attendance_userWhereInput>
  }, "id" | "mobile" | "username">

  export type AdminOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrderInput | SortOrder
    designation?: SortOrder
    gender?: SortOrder
    mobile?: SortOrder
    email?: SortOrder
    photo?: SortOrderInput | SortOrder
    username?: SortOrder
    school_id?: SortOrder
    _count?: AdminCountOrderByAggregateInput
    _avg?: AdminAvgOrderByAggregateInput
    _max?: AdminMaxOrderByAggregateInput
    _min?: AdminMinOrderByAggregateInput
    _sum?: AdminSumOrderByAggregateInput
  }

  export type AdminScalarWhereWithAggregatesInput = {
    AND?: AdminScalarWhereWithAggregatesInput | AdminScalarWhereWithAggregatesInput[]
    OR?: AdminScalarWhereWithAggregatesInput[]
    NOT?: AdminScalarWhereWithAggregatesInput | AdminScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Admin"> | number
    name?: StringNullableWithAggregatesFilter<"Admin"> | string | null
    designation?: StringWithAggregatesFilter<"Admin"> | string
    gender?: StringWithAggregatesFilter<"Admin"> | string
    mobile?: StringWithAggregatesFilter<"Admin"> | string
    email?: StringWithAggregatesFilter<"Admin"> | string
    photo?: BytesNullableWithAggregatesFilter<"Admin"> | Uint8Array | null
    username?: StringWithAggregatesFilter<"Admin"> | string
    school_id?: IntWithAggregatesFilter<"Admin"> | number
  }

  export type MessagesWhereInput = {
    AND?: MessagesWhereInput | MessagesWhereInput[]
    OR?: MessagesWhereInput[]
    NOT?: MessagesWhereInput | MessagesWhereInput[]
    id?: IntFilter<"Messages"> | number
    messages?: StringFilter<"Messages"> | string
    date?: StringNullableFilter<"Messages"> | string | null
    school_id?: IntFilter<"Messages"> | number
    school?: XOR<SchoolScalarRelationFilter, SchoolWhereInput>
  }

  export type MessagesOrderByWithRelationInput = {
    id?: SortOrder
    messages?: SortOrder
    date?: SortOrderInput | SortOrder
    school_id?: SortOrder
    school?: SchoolOrderByWithRelationInput
    _relevance?: MessagesOrderByRelevanceInput
  }

  export type MessagesWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: MessagesWhereInput | MessagesWhereInput[]
    OR?: MessagesWhereInput[]
    NOT?: MessagesWhereInput | MessagesWhereInput[]
    messages?: StringFilter<"Messages"> | string
    date?: StringNullableFilter<"Messages"> | string | null
    school_id?: IntFilter<"Messages"> | number
    school?: XOR<SchoolScalarRelationFilter, SchoolWhereInput>
  }, "id">

  export type MessagesOrderByWithAggregationInput = {
    id?: SortOrder
    messages?: SortOrder
    date?: SortOrderInput | SortOrder
    school_id?: SortOrder
    _count?: MessagesCountOrderByAggregateInput
    _avg?: MessagesAvgOrderByAggregateInput
    _max?: MessagesMaxOrderByAggregateInput
    _min?: MessagesMinOrderByAggregateInput
    _sum?: MessagesSumOrderByAggregateInput
  }

  export type MessagesScalarWhereWithAggregatesInput = {
    AND?: MessagesScalarWhereWithAggregatesInput | MessagesScalarWhereWithAggregatesInput[]
    OR?: MessagesScalarWhereWithAggregatesInput[]
    NOT?: MessagesScalarWhereWithAggregatesInput | MessagesScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Messages"> | number
    messages?: StringWithAggregatesFilter<"Messages"> | string
    date?: StringNullableWithAggregatesFilter<"Messages"> | string | null
    school_id?: IntWithAggregatesFilter<"Messages"> | number
  }

  export type LeaveRequestWhereInput = {
    AND?: LeaveRequestWhereInput | LeaveRequestWhereInput[]
    OR?: LeaveRequestWhereInput[]
    NOT?: LeaveRequestWhereInput | LeaveRequestWhereInput[]
    id?: IntFilter<"LeaveRequest"> | number
    username?: StringFilter<"LeaveRequest"> | string
    role?: EnumRoleFilter<"LeaveRequest"> | $Enums.Role
    school_id?: IntFilter<"LeaveRequest"> | number
    class_id?: IntFilter<"LeaveRequest"> | number
    from_date?: DateTimeFilter<"LeaveRequest"> | Date | string
    to_date?: DateTimeFilter<"LeaveRequest"> | Date | string
    reason?: StringNullableFilter<"LeaveRequest"> | string | null
    status?: StringFilter<"LeaveRequest"> | string
    created_at?: DateTimeFilter<"LeaveRequest"> | Date | string
    updated_at?: DateTimeFilter<"LeaveRequest"> | Date | string
  }

  export type LeaveRequestOrderByWithRelationInput = {
    id?: SortOrder
    username?: SortOrder
    role?: SortOrder
    school_id?: SortOrder
    class_id?: SortOrder
    from_date?: SortOrder
    to_date?: SortOrder
    reason?: SortOrderInput | SortOrder
    status?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    _relevance?: LeaveRequestOrderByRelevanceInput
  }

  export type LeaveRequestWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: LeaveRequestWhereInput | LeaveRequestWhereInput[]
    OR?: LeaveRequestWhereInput[]
    NOT?: LeaveRequestWhereInput | LeaveRequestWhereInput[]
    username?: StringFilter<"LeaveRequest"> | string
    role?: EnumRoleFilter<"LeaveRequest"> | $Enums.Role
    school_id?: IntFilter<"LeaveRequest"> | number
    class_id?: IntFilter<"LeaveRequest"> | number
    from_date?: DateTimeFilter<"LeaveRequest"> | Date | string
    to_date?: DateTimeFilter<"LeaveRequest"> | Date | string
    reason?: StringNullableFilter<"LeaveRequest"> | string | null
    status?: StringFilter<"LeaveRequest"> | string
    created_at?: DateTimeFilter<"LeaveRequest"> | Date | string
    updated_at?: DateTimeFilter<"LeaveRequest"> | Date | string
  }, "id">

  export type LeaveRequestOrderByWithAggregationInput = {
    id?: SortOrder
    username?: SortOrder
    role?: SortOrder
    school_id?: SortOrder
    class_id?: SortOrder
    from_date?: SortOrder
    to_date?: SortOrder
    reason?: SortOrderInput | SortOrder
    status?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    _count?: LeaveRequestCountOrderByAggregateInput
    _avg?: LeaveRequestAvgOrderByAggregateInput
    _max?: LeaveRequestMaxOrderByAggregateInput
    _min?: LeaveRequestMinOrderByAggregateInput
    _sum?: LeaveRequestSumOrderByAggregateInput
  }

  export type LeaveRequestScalarWhereWithAggregatesInput = {
    AND?: LeaveRequestScalarWhereWithAggregatesInput | LeaveRequestScalarWhereWithAggregatesInput[]
    OR?: LeaveRequestScalarWhereWithAggregatesInput[]
    NOT?: LeaveRequestScalarWhereWithAggregatesInput | LeaveRequestScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"LeaveRequest"> | number
    username?: StringWithAggregatesFilter<"LeaveRequest"> | string
    role?: EnumRoleWithAggregatesFilter<"LeaveRequest"> | $Enums.Role
    school_id?: IntWithAggregatesFilter<"LeaveRequest"> | number
    class_id?: IntWithAggregatesFilter<"LeaveRequest"> | number
    from_date?: DateTimeWithAggregatesFilter<"LeaveRequest"> | Date | string
    to_date?: DateTimeWithAggregatesFilter<"LeaveRequest"> | Date | string
    reason?: StringNullableWithAggregatesFilter<"LeaveRequest"> | string | null
    status?: StringWithAggregatesFilter<"LeaveRequest"> | string
    created_at?: DateTimeWithAggregatesFilter<"LeaveRequest"> | Date | string
    updated_at?: DateTimeWithAggregatesFilter<"LeaveRequest"> | Date | string
  }

  export type Attendance_userCreateInput = {
    username: string
    password: string
    role: string
    school: SchoolCreateNestedOneWithoutUsersInput
    staff?: StaffCreateNestedOneWithoutUserInput
    students?: StudentCreateNestedManyWithoutUserInput
    admin?: AdminCreateNestedOneWithoutUserInput
  }

  export type Attendance_userUncheckedCreateInput = {
    id?: number
    username: string
    password: string
    role: string
    school_id: number
    staff?: StaffUncheckedCreateNestedOneWithoutUserInput
    students?: StudentUncheckedCreateNestedManyWithoutUserInput
    admin?: AdminUncheckedCreateNestedOneWithoutUserInput
  }

  export type Attendance_userUpdateInput = {
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    school?: SchoolUpdateOneRequiredWithoutUsersNestedInput
    staff?: StaffUpdateOneWithoutUserNestedInput
    students?: StudentUpdateManyWithoutUserNestedInput
    admin?: AdminUpdateOneWithoutUserNestedInput
  }

  export type Attendance_userUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    school_id?: IntFieldUpdateOperationsInput | number
    staff?: StaffUncheckedUpdateOneWithoutUserNestedInput
    students?: StudentUncheckedUpdateManyWithoutUserNestedInput
    admin?: AdminUncheckedUpdateOneWithoutUserNestedInput
  }

  export type Attendance_userCreateManyInput = {
    id?: number
    username: string
    password: string
    role: string
    school_id: number
  }

  export type Attendance_userUpdateManyMutationInput = {
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
  }

  export type Attendance_userUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    school_id?: IntFieldUpdateOperationsInput | number
  }

  export type SchoolCreateInput = {
    name: string
    address: string
    photo: Uint8Array
    users?: Attendance_userCreateNestedManyWithoutSchoolInput
    staff?: StaffCreateNestedManyWithoutSchoolInput
    classes?: ClassesCreateNestedManyWithoutSchoolInput
    holidays?: HolidaysCreateNestedManyWithoutSchoolInput
    students?: StudentCreateNestedManyWithoutSchoolInput
    feedbacks?: FeedbackCreateNestedManyWithoutSchoolInput
    classTimetables?: ClassTimetableCreateNestedManyWithoutSchoolInput
    staffAttendances?: StaffAttendanceCreateNestedManyWithoutSchoolInput
    studentAttendances?: StudentAttendanceCreateNestedManyWithoutSchoolInput
    admins?: AdminCreateNestedManyWithoutSchoolInput
    Messages?: MessagesCreateNestedManyWithoutSchoolInput
  }

  export type SchoolUncheckedCreateInput = {
    id?: number
    name: string
    address: string
    photo: Uint8Array
    users?: Attendance_userUncheckedCreateNestedManyWithoutSchoolInput
    staff?: StaffUncheckedCreateNestedManyWithoutSchoolInput
    classes?: ClassesUncheckedCreateNestedManyWithoutSchoolInput
    holidays?: HolidaysUncheckedCreateNestedManyWithoutSchoolInput
    students?: StudentUncheckedCreateNestedManyWithoutSchoolInput
    feedbacks?: FeedbackUncheckedCreateNestedManyWithoutSchoolInput
    classTimetables?: ClassTimetableUncheckedCreateNestedManyWithoutSchoolInput
    staffAttendances?: StaffAttendanceUncheckedCreateNestedManyWithoutSchoolInput
    studentAttendances?: StudentAttendanceUncheckedCreateNestedManyWithoutSchoolInput
    admins?: AdminUncheckedCreateNestedManyWithoutSchoolInput
    Messages?: MessagesUncheckedCreateNestedManyWithoutSchoolInput
  }

  export type SchoolUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    photo?: BytesFieldUpdateOperationsInput | Uint8Array
    users?: Attendance_userUpdateManyWithoutSchoolNestedInput
    staff?: StaffUpdateManyWithoutSchoolNestedInput
    classes?: ClassesUpdateManyWithoutSchoolNestedInput
    holidays?: HolidaysUpdateManyWithoutSchoolNestedInput
    students?: StudentUpdateManyWithoutSchoolNestedInput
    feedbacks?: FeedbackUpdateManyWithoutSchoolNestedInput
    classTimetables?: ClassTimetableUpdateManyWithoutSchoolNestedInput
    staffAttendances?: StaffAttendanceUpdateManyWithoutSchoolNestedInput
    studentAttendances?: StudentAttendanceUpdateManyWithoutSchoolNestedInput
    admins?: AdminUpdateManyWithoutSchoolNestedInput
    Messages?: MessagesUpdateManyWithoutSchoolNestedInput
  }

  export type SchoolUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    photo?: BytesFieldUpdateOperationsInput | Uint8Array
    users?: Attendance_userUncheckedUpdateManyWithoutSchoolNestedInput
    staff?: StaffUncheckedUpdateManyWithoutSchoolNestedInput
    classes?: ClassesUncheckedUpdateManyWithoutSchoolNestedInput
    holidays?: HolidaysUncheckedUpdateManyWithoutSchoolNestedInput
    students?: StudentUncheckedUpdateManyWithoutSchoolNestedInput
    feedbacks?: FeedbackUncheckedUpdateManyWithoutSchoolNestedInput
    classTimetables?: ClassTimetableUncheckedUpdateManyWithoutSchoolNestedInput
    staffAttendances?: StaffAttendanceUncheckedUpdateManyWithoutSchoolNestedInput
    studentAttendances?: StudentAttendanceUncheckedUpdateManyWithoutSchoolNestedInput
    admins?: AdminUncheckedUpdateManyWithoutSchoolNestedInput
    Messages?: MessagesUncheckedUpdateManyWithoutSchoolNestedInput
  }

  export type SchoolCreateManyInput = {
    id?: number
    name: string
    address: string
    photo: Uint8Array
  }

  export type SchoolUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    photo?: BytesFieldUpdateOperationsInput | Uint8Array
  }

  export type SchoolUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    photo?: BytesFieldUpdateOperationsInput | Uint8Array
  }

  export type ClassesCreateInput = {
    class: string
    section: string
    school: SchoolCreateNestedOneWithoutClassesInput
    holidays?: HolidaysCreateNestedManyWithoutClassesInput
    students?: StudentCreateNestedManyWithoutClassInput
    studentAttendance?: StudentAttendanceCreateNestedManyWithoutClassInput
    classTimetables?: ClassTimetableCreateNestedManyWithoutClassesInput
    feedbacks?: FeedbackCreateNestedManyWithoutClassInput
  }

  export type ClassesUncheckedCreateInput = {
    id?: number
    class: string
    section: string
    school_id: number
    holidays?: HolidaysUncheckedCreateNestedManyWithoutClassesInput
    students?: StudentUncheckedCreateNestedManyWithoutClassInput
    studentAttendance?: StudentAttendanceUncheckedCreateNestedManyWithoutClassInput
    classTimetables?: ClassTimetableUncheckedCreateNestedManyWithoutClassesInput
    feedbacks?: FeedbackUncheckedCreateNestedManyWithoutClassInput
  }

  export type ClassesUpdateInput = {
    class?: StringFieldUpdateOperationsInput | string
    section?: StringFieldUpdateOperationsInput | string
    school?: SchoolUpdateOneRequiredWithoutClassesNestedInput
    holidays?: HolidaysUpdateManyWithoutClassesNestedInput
    students?: StudentUpdateManyWithoutClassNestedInput
    studentAttendance?: StudentAttendanceUpdateManyWithoutClassNestedInput
    classTimetables?: ClassTimetableUpdateManyWithoutClassesNestedInput
    feedbacks?: FeedbackUpdateManyWithoutClassNestedInput
  }

  export type ClassesUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    class?: StringFieldUpdateOperationsInput | string
    section?: StringFieldUpdateOperationsInput | string
    school_id?: IntFieldUpdateOperationsInput | number
    holidays?: HolidaysUncheckedUpdateManyWithoutClassesNestedInput
    students?: StudentUncheckedUpdateManyWithoutClassNestedInput
    studentAttendance?: StudentAttendanceUncheckedUpdateManyWithoutClassNestedInput
    classTimetables?: ClassTimetableUncheckedUpdateManyWithoutClassesNestedInput
    feedbacks?: FeedbackUncheckedUpdateManyWithoutClassNestedInput
  }

  export type ClassesCreateManyInput = {
    id?: number
    class: string
    section: string
    school_id: number
  }

  export type ClassesUpdateManyMutationInput = {
    class?: StringFieldUpdateOperationsInput | string
    section?: StringFieldUpdateOperationsInput | string
  }

  export type ClassesUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    class?: StringFieldUpdateOperationsInput | string
    section?: StringFieldUpdateOperationsInput | string
    school_id?: IntFieldUpdateOperationsInput | number
  }

  export type HolidaysCreateInput = {
    date: Date | string
    reason: string
    class_ids: JsonNullValueInput | InputJsonValue
    fn?: string | null
    an: string
    school?: SchoolCreateNestedOneWithoutHolidaysInput
    classes?: ClassesCreateNestedManyWithoutHolidaysInput
  }

  export type HolidaysUncheckedCreateInput = {
    id?: number
    date: Date | string
    reason: string
    school_id?: number | null
    class_ids: JsonNullValueInput | InputJsonValue
    fn?: string | null
    an: string
    classes?: ClassesUncheckedCreateNestedManyWithoutHolidaysInput
  }

  export type HolidaysUpdateInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    reason?: StringFieldUpdateOperationsInput | string
    class_ids?: JsonNullValueInput | InputJsonValue
    fn?: NullableStringFieldUpdateOperationsInput | string | null
    an?: StringFieldUpdateOperationsInput | string
    school?: SchoolUpdateOneWithoutHolidaysNestedInput
    classes?: ClassesUpdateManyWithoutHolidaysNestedInput
  }

  export type HolidaysUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    reason?: StringFieldUpdateOperationsInput | string
    school_id?: NullableIntFieldUpdateOperationsInput | number | null
    class_ids?: JsonNullValueInput | InputJsonValue
    fn?: NullableStringFieldUpdateOperationsInput | string | null
    an?: StringFieldUpdateOperationsInput | string
    classes?: ClassesUncheckedUpdateManyWithoutHolidaysNestedInput
  }

  export type HolidaysCreateManyInput = {
    id?: number
    date: Date | string
    reason: string
    school_id?: number | null
    class_ids: JsonNullValueInput | InputJsonValue
    fn?: string | null
    an: string
  }

  export type HolidaysUpdateManyMutationInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    reason?: StringFieldUpdateOperationsInput | string
    class_ids?: JsonNullValueInput | InputJsonValue
    fn?: NullableStringFieldUpdateOperationsInput | string | null
    an?: StringFieldUpdateOperationsInput | string
  }

  export type HolidaysUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    reason?: StringFieldUpdateOperationsInput | string
    school_id?: NullableIntFieldUpdateOperationsInput | number | null
    class_ids?: JsonNullValueInput | InputJsonValue
    fn?: NullableStringFieldUpdateOperationsInput | string | null
    an?: StringFieldUpdateOperationsInput | string
  }

  export type StaffCreateInput = {
    designation: string
    name?: string | null
    email: string
    gender?: $Enums.Gender | null
    mobile: string
    password: string
    school: SchoolCreateNestedOneWithoutStaffInput
    user: Attendance_userCreateNestedOneWithoutStaffInput
    attendances?: StaffAttendanceCreateNestedManyWithoutStaffInput
  }

  export type StaffUncheckedCreateInput = {
    id?: number
    username: string
    designation: string
    name?: string | null
    email: string
    gender?: $Enums.Gender | null
    mobile: string
    school_id: number
    password: string
    attendances?: StaffAttendanceUncheckedCreateNestedManyWithoutStaffInput
  }

  export type StaffUpdateInput = {
    designation?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    gender?: NullableEnumGenderFieldUpdateOperationsInput | $Enums.Gender | null
    mobile?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    school?: SchoolUpdateOneRequiredWithoutStaffNestedInput
    user?: Attendance_userUpdateOneRequiredWithoutStaffNestedInput
    attendances?: StaffAttendanceUpdateManyWithoutStaffNestedInput
  }

  export type StaffUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    designation?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    gender?: NullableEnumGenderFieldUpdateOperationsInput | $Enums.Gender | null
    mobile?: StringFieldUpdateOperationsInput | string
    school_id?: IntFieldUpdateOperationsInput | number
    password?: StringFieldUpdateOperationsInput | string
    attendances?: StaffAttendanceUncheckedUpdateManyWithoutStaffNestedInput
  }

  export type StaffCreateManyInput = {
    id?: number
    username: string
    designation: string
    name?: string | null
    email: string
    gender?: $Enums.Gender | null
    mobile: string
    school_id: number
    password: string
  }

  export type StaffUpdateManyMutationInput = {
    designation?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    gender?: NullableEnumGenderFieldUpdateOperationsInput | $Enums.Gender | null
    mobile?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type StaffUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    designation?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    gender?: NullableEnumGenderFieldUpdateOperationsInput | $Enums.Gender | null
    mobile?: StringFieldUpdateOperationsInput | string
    school_id?: IntFieldUpdateOperationsInput | number
    password?: StringFieldUpdateOperationsInput | string
  }

  export type StaffAttendanceCreateInput = {
    date: Date | string
    fn_status?: string
    an_status?: string
    school?: SchoolCreateNestedOneWithoutStaffAttendancesInput
    staff: StaffCreateNestedOneWithoutAttendancesInput
  }

  export type StaffAttendanceUncheckedCreateInput = {
    username: string
    date: Date | string
    fn_status?: string
    an_status?: string
    school_id?: number | null
  }

  export type StaffAttendanceUpdateInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    fn_status?: StringFieldUpdateOperationsInput | string
    an_status?: StringFieldUpdateOperationsInput | string
    school?: SchoolUpdateOneWithoutStaffAttendancesNestedInput
    staff?: StaffUpdateOneRequiredWithoutAttendancesNestedInput
  }

  export type StaffAttendanceUncheckedUpdateInput = {
    username?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    fn_status?: StringFieldUpdateOperationsInput | string
    an_status?: StringFieldUpdateOperationsInput | string
    school_id?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type StaffAttendanceCreateManyInput = {
    username: string
    date: Date | string
    fn_status?: string
    an_status?: string
    school_id?: number | null
  }

  export type StaffAttendanceUpdateManyMutationInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    fn_status?: StringFieldUpdateOperationsInput | string
    an_status?: StringFieldUpdateOperationsInput | string
  }

  export type StaffAttendanceUncheckedUpdateManyInput = {
    username?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    fn_status?: StringFieldUpdateOperationsInput | string
    an_status?: StringFieldUpdateOperationsInput | string
    school_id?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type StudentCreateInput = {
    name?: string | null
    gender?: $Enums.Gender | null
    email: string
    mobile: string
    photo?: Uint8Array | null
    password: string
    class: ClassesCreateNestedOneWithoutStudentsInput
    school: SchoolCreateNestedOneWithoutStudentsInput
    user: Attendance_userCreateNestedOneWithoutStudentsInput
    attendance?: StudentAttendanceCreateNestedManyWithoutStudentInput
  }

  export type StudentUncheckedCreateInput = {
    id?: number
    username: string
    name?: string | null
    gender?: $Enums.Gender | null
    email: string
    mobile: string
    class_id: number
    school_id: number
    photo?: Uint8Array | null
    password: string
    attendance?: StudentAttendanceUncheckedCreateNestedManyWithoutStudentInput
  }

  export type StudentUpdateInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableEnumGenderFieldUpdateOperationsInput | $Enums.Gender | null
    email?: StringFieldUpdateOperationsInput | string
    mobile?: StringFieldUpdateOperationsInput | string
    photo?: NullableBytesFieldUpdateOperationsInput | Uint8Array | null
    password?: StringFieldUpdateOperationsInput | string
    class?: ClassesUpdateOneRequiredWithoutStudentsNestedInput
    school?: SchoolUpdateOneRequiredWithoutStudentsNestedInput
    user?: Attendance_userUpdateOneRequiredWithoutStudentsNestedInput
    attendance?: StudentAttendanceUpdateManyWithoutStudentNestedInput
  }

  export type StudentUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableEnumGenderFieldUpdateOperationsInput | $Enums.Gender | null
    email?: StringFieldUpdateOperationsInput | string
    mobile?: StringFieldUpdateOperationsInput | string
    class_id?: IntFieldUpdateOperationsInput | number
    school_id?: IntFieldUpdateOperationsInput | number
    photo?: NullableBytesFieldUpdateOperationsInput | Uint8Array | null
    password?: StringFieldUpdateOperationsInput | string
    attendance?: StudentAttendanceUncheckedUpdateManyWithoutStudentNestedInput
  }

  export type StudentCreateManyInput = {
    id?: number
    username: string
    name?: string | null
    gender?: $Enums.Gender | null
    email: string
    mobile: string
    class_id: number
    school_id: number
    photo?: Uint8Array | null
    password: string
  }

  export type StudentUpdateManyMutationInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableEnumGenderFieldUpdateOperationsInput | $Enums.Gender | null
    email?: StringFieldUpdateOperationsInput | string
    mobile?: StringFieldUpdateOperationsInput | string
    photo?: NullableBytesFieldUpdateOperationsInput | Uint8Array | null
    password?: StringFieldUpdateOperationsInput | string
  }

  export type StudentUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableEnumGenderFieldUpdateOperationsInput | $Enums.Gender | null
    email?: StringFieldUpdateOperationsInput | string
    mobile?: StringFieldUpdateOperationsInput | string
    class_id?: IntFieldUpdateOperationsInput | number
    school_id?: IntFieldUpdateOperationsInput | number
    photo?: NullableBytesFieldUpdateOperationsInput | Uint8Array | null
    password?: StringFieldUpdateOperationsInput | string
  }

  export type StudentAttendanceCreateInput = {
    date: Date | string
    fn_status?: string
    an_status?: string
    class: ClassesCreateNestedOneWithoutStudentAttendanceInput
    student: StudentCreateNestedOneWithoutAttendanceInput
    school: SchoolCreateNestedOneWithoutStudentAttendancesInput
  }

  export type StudentAttendanceUncheckedCreateInput = {
    username: string
    date: Date | string
    fn_status?: string
    an_status?: string
    school_id: number
    class_id: number
  }

  export type StudentAttendanceUpdateInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    fn_status?: StringFieldUpdateOperationsInput | string
    an_status?: StringFieldUpdateOperationsInput | string
    class?: ClassesUpdateOneRequiredWithoutStudentAttendanceNestedInput
    student?: StudentUpdateOneRequiredWithoutAttendanceNestedInput
    school?: SchoolUpdateOneRequiredWithoutStudentAttendancesNestedInput
  }

  export type StudentAttendanceUncheckedUpdateInput = {
    username?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    fn_status?: StringFieldUpdateOperationsInput | string
    an_status?: StringFieldUpdateOperationsInput | string
    school_id?: IntFieldUpdateOperationsInput | number
    class_id?: IntFieldUpdateOperationsInput | number
  }

  export type StudentAttendanceCreateManyInput = {
    username: string
    date: Date | string
    fn_status?: string
    an_status?: string
    school_id: number
    class_id: number
  }

  export type StudentAttendanceUpdateManyMutationInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    fn_status?: StringFieldUpdateOperationsInput | string
    an_status?: StringFieldUpdateOperationsInput | string
  }

  export type StudentAttendanceUncheckedUpdateManyInput = {
    username?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    fn_status?: StringFieldUpdateOperationsInput | string
    an_status?: StringFieldUpdateOperationsInput | string
    school_id?: IntFieldUpdateOperationsInput | number
    class_id?: IntFieldUpdateOperationsInput | number
  }

  export type ClassTimetableCreateInput = {
    dayOfWeek: $Enums.DayOfWeek
    periodNumber: number
    subject: string
    School?: SchoolCreateNestedOneWithoutClassTimetablesInput
    Classes?: ClassesCreateNestedOneWithoutClassTimetablesInput
  }

  export type ClassTimetableUncheckedCreateInput = {
    id?: number
    schoolId?: number | null
    classesId?: number | null
    dayOfWeek: $Enums.DayOfWeek
    periodNumber: number
    subject: string
  }

  export type ClassTimetableUpdateInput = {
    dayOfWeek?: EnumDayOfWeekFieldUpdateOperationsInput | $Enums.DayOfWeek
    periodNumber?: IntFieldUpdateOperationsInput | number
    subject?: StringFieldUpdateOperationsInput | string
    School?: SchoolUpdateOneWithoutClassTimetablesNestedInput
    Classes?: ClassesUpdateOneWithoutClassTimetablesNestedInput
  }

  export type ClassTimetableUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    schoolId?: NullableIntFieldUpdateOperationsInput | number | null
    classesId?: NullableIntFieldUpdateOperationsInput | number | null
    dayOfWeek?: EnumDayOfWeekFieldUpdateOperationsInput | $Enums.DayOfWeek
    periodNumber?: IntFieldUpdateOperationsInput | number
    subject?: StringFieldUpdateOperationsInput | string
  }

  export type ClassTimetableCreateManyInput = {
    id?: number
    schoolId?: number | null
    classesId?: number | null
    dayOfWeek: $Enums.DayOfWeek
    periodNumber: number
    subject: string
  }

  export type ClassTimetableUpdateManyMutationInput = {
    dayOfWeek?: EnumDayOfWeekFieldUpdateOperationsInput | $Enums.DayOfWeek
    periodNumber?: IntFieldUpdateOperationsInput | number
    subject?: StringFieldUpdateOperationsInput | string
  }

  export type ClassTimetableUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    schoolId?: NullableIntFieldUpdateOperationsInput | number | null
    classesId?: NullableIntFieldUpdateOperationsInput | number | null
    dayOfWeek?: EnumDayOfWeekFieldUpdateOperationsInput | $Enums.DayOfWeek
    periodNumber?: IntFieldUpdateOperationsInput | number
    subject?: StringFieldUpdateOperationsInput | string
  }

  export type FeedbackCreateInput = {
    name: string
    email: string
    feedback: string
    created_at?: Date | string
    school: SchoolCreateNestedOneWithoutFeedbacksInput
    class: ClassesCreateNestedOneWithoutFeedbacksInput
  }

  export type FeedbackUncheckedCreateInput = {
    id?: number
    name: string
    email: string
    feedback: string
    school_id: number
    class_id: number
    created_at?: Date | string
  }

  export type FeedbackUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    feedback?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    school?: SchoolUpdateOneRequiredWithoutFeedbacksNestedInput
    class?: ClassesUpdateOneRequiredWithoutFeedbacksNestedInput
  }

  export type FeedbackUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    feedback?: StringFieldUpdateOperationsInput | string
    school_id?: IntFieldUpdateOperationsInput | number
    class_id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FeedbackCreateManyInput = {
    id?: number
    name: string
    email: string
    feedback: string
    school_id: number
    class_id: number
    created_at?: Date | string
  }

  export type FeedbackUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    feedback?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FeedbackUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    feedback?: StringFieldUpdateOperationsInput | string
    school_id?: IntFieldUpdateOperationsInput | number
    class_id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AdminCreateInput = {
    name?: string | null
    designation: string
    gender?: string
    mobile: string
    email?: string
    photo?: Uint8Array | null
    school: SchoolCreateNestedOneWithoutAdminsInput
    user: Attendance_userCreateNestedOneWithoutAdminInput
  }

  export type AdminUncheckedCreateInput = {
    id?: number
    name?: string | null
    designation: string
    gender?: string
    mobile: string
    email?: string
    photo?: Uint8Array | null
    username: string
    school_id: number
  }

  export type AdminUpdateInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    designation?: StringFieldUpdateOperationsInput | string
    gender?: StringFieldUpdateOperationsInput | string
    mobile?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    photo?: NullableBytesFieldUpdateOperationsInput | Uint8Array | null
    school?: SchoolUpdateOneRequiredWithoutAdminsNestedInput
    user?: Attendance_userUpdateOneRequiredWithoutAdminNestedInput
  }

  export type AdminUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    designation?: StringFieldUpdateOperationsInput | string
    gender?: StringFieldUpdateOperationsInput | string
    mobile?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    photo?: NullableBytesFieldUpdateOperationsInput | Uint8Array | null
    username?: StringFieldUpdateOperationsInput | string
    school_id?: IntFieldUpdateOperationsInput | number
  }

  export type AdminCreateManyInput = {
    id?: number
    name?: string | null
    designation: string
    gender?: string
    mobile: string
    email?: string
    photo?: Uint8Array | null
    username: string
    school_id: number
  }

  export type AdminUpdateManyMutationInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    designation?: StringFieldUpdateOperationsInput | string
    gender?: StringFieldUpdateOperationsInput | string
    mobile?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    photo?: NullableBytesFieldUpdateOperationsInput | Uint8Array | null
  }

  export type AdminUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    designation?: StringFieldUpdateOperationsInput | string
    gender?: StringFieldUpdateOperationsInput | string
    mobile?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    photo?: NullableBytesFieldUpdateOperationsInput | Uint8Array | null
    username?: StringFieldUpdateOperationsInput | string
    school_id?: IntFieldUpdateOperationsInput | number
  }

  export type MessagesCreateInput = {
    messages: string
    date?: string | null
    school: SchoolCreateNestedOneWithoutMessagesInput
  }

  export type MessagesUncheckedCreateInput = {
    id?: number
    messages: string
    date?: string | null
    school_id: number
  }

  export type MessagesUpdateInput = {
    messages?: StringFieldUpdateOperationsInput | string
    date?: NullableStringFieldUpdateOperationsInput | string | null
    school?: SchoolUpdateOneRequiredWithoutMessagesNestedInput
  }

  export type MessagesUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    messages?: StringFieldUpdateOperationsInput | string
    date?: NullableStringFieldUpdateOperationsInput | string | null
    school_id?: IntFieldUpdateOperationsInput | number
  }

  export type MessagesCreateManyInput = {
    id?: number
    messages: string
    date?: string | null
    school_id: number
  }

  export type MessagesUpdateManyMutationInput = {
    messages?: StringFieldUpdateOperationsInput | string
    date?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type MessagesUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    messages?: StringFieldUpdateOperationsInput | string
    date?: NullableStringFieldUpdateOperationsInput | string | null
    school_id?: IntFieldUpdateOperationsInput | number
  }

  export type LeaveRequestCreateInput = {
    username: string
    role?: $Enums.Role
    school_id: number
    class_id: number
    from_date: Date | string
    to_date: Date | string
    reason?: string | null
    status?: string
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type LeaveRequestUncheckedCreateInput = {
    id?: number
    username: string
    role?: $Enums.Role
    school_id: number
    class_id: number
    from_date: Date | string
    to_date: Date | string
    reason?: string | null
    status?: string
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type LeaveRequestUpdateInput = {
    username?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    school_id?: IntFieldUpdateOperationsInput | number
    class_id?: IntFieldUpdateOperationsInput | number
    from_date?: DateTimeFieldUpdateOperationsInput | Date | string
    to_date?: DateTimeFieldUpdateOperationsInput | Date | string
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LeaveRequestUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    school_id?: IntFieldUpdateOperationsInput | number
    class_id?: IntFieldUpdateOperationsInput | number
    from_date?: DateTimeFieldUpdateOperationsInput | Date | string
    to_date?: DateTimeFieldUpdateOperationsInput | Date | string
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LeaveRequestCreateManyInput = {
    id?: number
    username: string
    role?: $Enums.Role
    school_id: number
    class_id: number
    from_date: Date | string
    to_date: Date | string
    reason?: string | null
    status?: string
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type LeaveRequestUpdateManyMutationInput = {
    username?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    school_id?: IntFieldUpdateOperationsInput | number
    class_id?: IntFieldUpdateOperationsInput | number
    from_date?: DateTimeFieldUpdateOperationsInput | Date | string
    to_date?: DateTimeFieldUpdateOperationsInput | Date | string
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LeaveRequestUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    school_id?: IntFieldUpdateOperationsInput | number
    class_id?: IntFieldUpdateOperationsInput | number
    from_date?: DateTimeFieldUpdateOperationsInput | Date | string
    to_date?: DateTimeFieldUpdateOperationsInput | Date | string
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type SchoolScalarRelationFilter = {
    is?: SchoolWhereInput
    isNot?: SchoolWhereInput
  }

  export type StaffNullableScalarRelationFilter = {
    is?: StaffWhereInput | null
    isNot?: StaffWhereInput | null
  }

  export type StudentListRelationFilter = {
    every?: StudentWhereInput
    some?: StudentWhereInput
    none?: StudentWhereInput
  }

  export type AdminNullableScalarRelationFilter = {
    is?: AdminWhereInput | null
    isNot?: AdminWhereInput | null
  }

  export type StudentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type Attendance_userOrderByRelevanceInput = {
    fields: Attendance_userOrderByRelevanceFieldEnum | Attendance_userOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type Attendance_userCountOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    password?: SortOrder
    role?: SortOrder
    school_id?: SortOrder
  }

  export type Attendance_userAvgOrderByAggregateInput = {
    id?: SortOrder
    school_id?: SortOrder
  }

  export type Attendance_userMaxOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    password?: SortOrder
    role?: SortOrder
    school_id?: SortOrder
  }

  export type Attendance_userMinOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    password?: SortOrder
    role?: SortOrder
    school_id?: SortOrder
  }

  export type Attendance_userSumOrderByAggregateInput = {
    id?: SortOrder
    school_id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type BytesFilter<$PrismaModel = never> = {
    equals?: Uint8Array | BytesFieldRefInput<$PrismaModel>
    in?: Uint8Array[]
    notIn?: Uint8Array[]
    not?: NestedBytesFilter<$PrismaModel> | Uint8Array
  }

  export type Attendance_userListRelationFilter = {
    every?: Attendance_userWhereInput
    some?: Attendance_userWhereInput
    none?: Attendance_userWhereInput
  }

  export type StaffListRelationFilter = {
    every?: StaffWhereInput
    some?: StaffWhereInput
    none?: StaffWhereInput
  }

  export type ClassesListRelationFilter = {
    every?: ClassesWhereInput
    some?: ClassesWhereInput
    none?: ClassesWhereInput
  }

  export type HolidaysListRelationFilter = {
    every?: HolidaysWhereInput
    some?: HolidaysWhereInput
    none?: HolidaysWhereInput
  }

  export type FeedbackListRelationFilter = {
    every?: FeedbackWhereInput
    some?: FeedbackWhereInput
    none?: FeedbackWhereInput
  }

  export type ClassTimetableListRelationFilter = {
    every?: ClassTimetableWhereInput
    some?: ClassTimetableWhereInput
    none?: ClassTimetableWhereInput
  }

  export type StaffAttendanceListRelationFilter = {
    every?: StaffAttendanceWhereInput
    some?: StaffAttendanceWhereInput
    none?: StaffAttendanceWhereInput
  }

  export type StudentAttendanceListRelationFilter = {
    every?: StudentAttendanceWhereInput
    some?: StudentAttendanceWhereInput
    none?: StudentAttendanceWhereInput
  }

  export type AdminListRelationFilter = {
    every?: AdminWhereInput
    some?: AdminWhereInput
    none?: AdminWhereInput
  }

  export type MessagesListRelationFilter = {
    every?: MessagesWhereInput
    some?: MessagesWhereInput
    none?: MessagesWhereInput
  }

  export type Attendance_userOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type StaffOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ClassesOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type HolidaysOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type FeedbackOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ClassTimetableOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type StaffAttendanceOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type StudentAttendanceOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AdminOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MessagesOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SchoolOrderByRelevanceInput = {
    fields: SchoolOrderByRelevanceFieldEnum | SchoolOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type SchoolCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    address?: SortOrder
    photo?: SortOrder
  }

  export type SchoolAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type SchoolMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    address?: SortOrder
    photo?: SortOrder
  }

  export type SchoolMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    address?: SortOrder
    photo?: SortOrder
  }

  export type SchoolSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type BytesWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Uint8Array | BytesFieldRefInput<$PrismaModel>
    in?: Uint8Array[]
    notIn?: Uint8Array[]
    not?: NestedBytesWithAggregatesFilter<$PrismaModel> | Uint8Array
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBytesFilter<$PrismaModel>
    _max?: NestedBytesFilter<$PrismaModel>
  }

  export type ClassesOrderByRelevanceInput = {
    fields: ClassesOrderByRelevanceFieldEnum | ClassesOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type ClassesCountOrderByAggregateInput = {
    id?: SortOrder
    class?: SortOrder
    section?: SortOrder
    school_id?: SortOrder
  }

  export type ClassesAvgOrderByAggregateInput = {
    id?: SortOrder
    school_id?: SortOrder
  }

  export type ClassesMaxOrderByAggregateInput = {
    id?: SortOrder
    class?: SortOrder
    section?: SortOrder
    school_id?: SortOrder
  }

  export type ClassesMinOrderByAggregateInput = {
    id?: SortOrder
    class?: SortOrder
    section?: SortOrder
    school_id?: SortOrder
  }

  export type ClassesSumOrderByAggregateInput = {
    id?: SortOrder
    school_id?: SortOrder
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }
  export type JsonFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonFilterBase<$PrismaModel>>, 'path'>>

  export type JsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue
    lte?: InputJsonValue
    gt?: InputJsonValue
    gte?: InputJsonValue
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type SchoolNullableScalarRelationFilter = {
    is?: SchoolWhereInput | null
    isNot?: SchoolWhereInput | null
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type HolidaysOrderByRelevanceInput = {
    fields: HolidaysOrderByRelevanceFieldEnum | HolidaysOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type HolidaysCountOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    reason?: SortOrder
    school_id?: SortOrder
    class_ids?: SortOrder
    fn?: SortOrder
    an?: SortOrder
  }

  export type HolidaysAvgOrderByAggregateInput = {
    id?: SortOrder
    school_id?: SortOrder
  }

  export type HolidaysMaxOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    reason?: SortOrder
    school_id?: SortOrder
    fn?: SortOrder
    an?: SortOrder
  }

  export type HolidaysMinOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    reason?: SortOrder
    school_id?: SortOrder
    fn?: SortOrder
    an?: SortOrder
  }

  export type HolidaysSumOrderByAggregateInput = {
    id?: SortOrder
    school_id?: SortOrder
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }
  export type JsonWithAggregatesFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue
    lte?: InputJsonValue
    gt?: InputJsonValue
    gte?: InputJsonValue
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedJsonFilter<$PrismaModel>
    _max?: NestedJsonFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type EnumGenderNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.Gender | EnumGenderFieldRefInput<$PrismaModel> | null
    in?: $Enums.Gender[] | null
    notIn?: $Enums.Gender[] | null
    not?: NestedEnumGenderNullableFilter<$PrismaModel> | $Enums.Gender | null
  }

  export type Attendance_userScalarRelationFilter = {
    is?: Attendance_userWhereInput
    isNot?: Attendance_userWhereInput
  }

  export type StaffOrderByRelevanceInput = {
    fields: StaffOrderByRelevanceFieldEnum | StaffOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type StaffCountOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    designation?: SortOrder
    name?: SortOrder
    email?: SortOrder
    gender?: SortOrder
    mobile?: SortOrder
    school_id?: SortOrder
    password?: SortOrder
  }

  export type StaffAvgOrderByAggregateInput = {
    id?: SortOrder
    school_id?: SortOrder
  }

  export type StaffMaxOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    designation?: SortOrder
    name?: SortOrder
    email?: SortOrder
    gender?: SortOrder
    mobile?: SortOrder
    school_id?: SortOrder
    password?: SortOrder
  }

  export type StaffMinOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    designation?: SortOrder
    name?: SortOrder
    email?: SortOrder
    gender?: SortOrder
    mobile?: SortOrder
    school_id?: SortOrder
    password?: SortOrder
  }

  export type StaffSumOrderByAggregateInput = {
    id?: SortOrder
    school_id?: SortOrder
  }

  export type EnumGenderNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Gender | EnumGenderFieldRefInput<$PrismaModel> | null
    in?: $Enums.Gender[] | null
    notIn?: $Enums.Gender[] | null
    not?: NestedEnumGenderNullableWithAggregatesFilter<$PrismaModel> | $Enums.Gender | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumGenderNullableFilter<$PrismaModel>
    _max?: NestedEnumGenderNullableFilter<$PrismaModel>
  }

  export type StaffScalarRelationFilter = {
    is?: StaffWhereInput
    isNot?: StaffWhereInput
  }

  export type StaffAttendanceOrderByRelevanceInput = {
    fields: StaffAttendanceOrderByRelevanceFieldEnum | StaffAttendanceOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type StaffAttendanceUsernameDateCompoundUniqueInput = {
    username: string
    date: Date | string
  }

  export type StaffAttendanceCountOrderByAggregateInput = {
    username?: SortOrder
    date?: SortOrder
    fn_status?: SortOrder
    an_status?: SortOrder
    school_id?: SortOrder
  }

  export type StaffAttendanceAvgOrderByAggregateInput = {
    school_id?: SortOrder
  }

  export type StaffAttendanceMaxOrderByAggregateInput = {
    username?: SortOrder
    date?: SortOrder
    fn_status?: SortOrder
    an_status?: SortOrder
    school_id?: SortOrder
  }

  export type StaffAttendanceMinOrderByAggregateInput = {
    username?: SortOrder
    date?: SortOrder
    fn_status?: SortOrder
    an_status?: SortOrder
    school_id?: SortOrder
  }

  export type StaffAttendanceSumOrderByAggregateInput = {
    school_id?: SortOrder
  }

  export type BytesNullableFilter<$PrismaModel = never> = {
    equals?: Uint8Array | BytesFieldRefInput<$PrismaModel> | null
    in?: Uint8Array[] | null
    notIn?: Uint8Array[] | null
    not?: NestedBytesNullableFilter<$PrismaModel> | Uint8Array | null
  }

  export type ClassesScalarRelationFilter = {
    is?: ClassesWhereInput
    isNot?: ClassesWhereInput
  }

  export type StudentOrderByRelevanceInput = {
    fields: StudentOrderByRelevanceFieldEnum | StudentOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type StudentCountOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    name?: SortOrder
    gender?: SortOrder
    email?: SortOrder
    mobile?: SortOrder
    class_id?: SortOrder
    school_id?: SortOrder
    photo?: SortOrder
    password?: SortOrder
  }

  export type StudentAvgOrderByAggregateInput = {
    id?: SortOrder
    class_id?: SortOrder
    school_id?: SortOrder
  }

  export type StudentMaxOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    name?: SortOrder
    gender?: SortOrder
    email?: SortOrder
    mobile?: SortOrder
    class_id?: SortOrder
    school_id?: SortOrder
    photo?: SortOrder
    password?: SortOrder
  }

  export type StudentMinOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    name?: SortOrder
    gender?: SortOrder
    email?: SortOrder
    mobile?: SortOrder
    class_id?: SortOrder
    school_id?: SortOrder
    photo?: SortOrder
    password?: SortOrder
  }

  export type StudentSumOrderByAggregateInput = {
    id?: SortOrder
    class_id?: SortOrder
    school_id?: SortOrder
  }

  export type BytesNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Uint8Array | BytesFieldRefInput<$PrismaModel> | null
    in?: Uint8Array[] | null
    notIn?: Uint8Array[] | null
    not?: NestedBytesNullableWithAggregatesFilter<$PrismaModel> | Uint8Array | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedBytesNullableFilter<$PrismaModel>
    _max?: NestedBytesNullableFilter<$PrismaModel>
  }

  export type StudentScalarRelationFilter = {
    is?: StudentWhereInput
    isNot?: StudentWhereInput
  }

  export type StudentAttendanceOrderByRelevanceInput = {
    fields: StudentAttendanceOrderByRelevanceFieldEnum | StudentAttendanceOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type StudentAttendanceUsername_dateCompoundUniqueInput = {
    username: string
    date: Date | string
  }

  export type StudentAttendanceCountOrderByAggregateInput = {
    username?: SortOrder
    date?: SortOrder
    fn_status?: SortOrder
    an_status?: SortOrder
    school_id?: SortOrder
    class_id?: SortOrder
  }

  export type StudentAttendanceAvgOrderByAggregateInput = {
    school_id?: SortOrder
    class_id?: SortOrder
  }

  export type StudentAttendanceMaxOrderByAggregateInput = {
    username?: SortOrder
    date?: SortOrder
    fn_status?: SortOrder
    an_status?: SortOrder
    school_id?: SortOrder
    class_id?: SortOrder
  }

  export type StudentAttendanceMinOrderByAggregateInput = {
    username?: SortOrder
    date?: SortOrder
    fn_status?: SortOrder
    an_status?: SortOrder
    school_id?: SortOrder
    class_id?: SortOrder
  }

  export type StudentAttendanceSumOrderByAggregateInput = {
    school_id?: SortOrder
    class_id?: SortOrder
  }

  export type EnumDayOfWeekFilter<$PrismaModel = never> = {
    equals?: $Enums.DayOfWeek | EnumDayOfWeekFieldRefInput<$PrismaModel>
    in?: $Enums.DayOfWeek[]
    notIn?: $Enums.DayOfWeek[]
    not?: NestedEnumDayOfWeekFilter<$PrismaModel> | $Enums.DayOfWeek
  }

  export type ClassesNullableScalarRelationFilter = {
    is?: ClassesWhereInput | null
    isNot?: ClassesWhereInput | null
  }

  export type ClassTimetableOrderByRelevanceInput = {
    fields: ClassTimetableOrderByRelevanceFieldEnum | ClassTimetableOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type ClassTimetableCountOrderByAggregateInput = {
    id?: SortOrder
    schoolId?: SortOrder
    classesId?: SortOrder
    dayOfWeek?: SortOrder
    periodNumber?: SortOrder
    subject?: SortOrder
  }

  export type ClassTimetableAvgOrderByAggregateInput = {
    id?: SortOrder
    schoolId?: SortOrder
    classesId?: SortOrder
    periodNumber?: SortOrder
  }

  export type ClassTimetableMaxOrderByAggregateInput = {
    id?: SortOrder
    schoolId?: SortOrder
    classesId?: SortOrder
    dayOfWeek?: SortOrder
    periodNumber?: SortOrder
    subject?: SortOrder
  }

  export type ClassTimetableMinOrderByAggregateInput = {
    id?: SortOrder
    schoolId?: SortOrder
    classesId?: SortOrder
    dayOfWeek?: SortOrder
    periodNumber?: SortOrder
    subject?: SortOrder
  }

  export type ClassTimetableSumOrderByAggregateInput = {
    id?: SortOrder
    schoolId?: SortOrder
    classesId?: SortOrder
    periodNumber?: SortOrder
  }

  export type EnumDayOfWeekWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.DayOfWeek | EnumDayOfWeekFieldRefInput<$PrismaModel>
    in?: $Enums.DayOfWeek[]
    notIn?: $Enums.DayOfWeek[]
    not?: NestedEnumDayOfWeekWithAggregatesFilter<$PrismaModel> | $Enums.DayOfWeek
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumDayOfWeekFilter<$PrismaModel>
    _max?: NestedEnumDayOfWeekFilter<$PrismaModel>
  }

  export type FeedbackOrderByRelevanceInput = {
    fields: FeedbackOrderByRelevanceFieldEnum | FeedbackOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type FeedbackCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    feedback?: SortOrder
    school_id?: SortOrder
    class_id?: SortOrder
    created_at?: SortOrder
  }

  export type FeedbackAvgOrderByAggregateInput = {
    id?: SortOrder
    school_id?: SortOrder
    class_id?: SortOrder
  }

  export type FeedbackMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    feedback?: SortOrder
    school_id?: SortOrder
    class_id?: SortOrder
    created_at?: SortOrder
  }

  export type FeedbackMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    feedback?: SortOrder
    school_id?: SortOrder
    class_id?: SortOrder
    created_at?: SortOrder
  }

  export type FeedbackSumOrderByAggregateInput = {
    id?: SortOrder
    school_id?: SortOrder
    class_id?: SortOrder
  }

  export type AdminOrderByRelevanceInput = {
    fields: AdminOrderByRelevanceFieldEnum | AdminOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type AdminCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    designation?: SortOrder
    gender?: SortOrder
    mobile?: SortOrder
    email?: SortOrder
    photo?: SortOrder
    username?: SortOrder
    school_id?: SortOrder
  }

  export type AdminAvgOrderByAggregateInput = {
    id?: SortOrder
    school_id?: SortOrder
  }

  export type AdminMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    designation?: SortOrder
    gender?: SortOrder
    mobile?: SortOrder
    email?: SortOrder
    photo?: SortOrder
    username?: SortOrder
    school_id?: SortOrder
  }

  export type AdminMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    designation?: SortOrder
    gender?: SortOrder
    mobile?: SortOrder
    email?: SortOrder
    photo?: SortOrder
    username?: SortOrder
    school_id?: SortOrder
  }

  export type AdminSumOrderByAggregateInput = {
    id?: SortOrder
    school_id?: SortOrder
  }

  export type MessagesOrderByRelevanceInput = {
    fields: MessagesOrderByRelevanceFieldEnum | MessagesOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type MessagesCountOrderByAggregateInput = {
    id?: SortOrder
    messages?: SortOrder
    date?: SortOrder
    school_id?: SortOrder
  }

  export type MessagesAvgOrderByAggregateInput = {
    id?: SortOrder
    school_id?: SortOrder
  }

  export type MessagesMaxOrderByAggregateInput = {
    id?: SortOrder
    messages?: SortOrder
    date?: SortOrder
    school_id?: SortOrder
  }

  export type MessagesMinOrderByAggregateInput = {
    id?: SortOrder
    messages?: SortOrder
    date?: SortOrder
    school_id?: SortOrder
  }

  export type MessagesSumOrderByAggregateInput = {
    id?: SortOrder
    school_id?: SortOrder
  }

  export type EnumRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[]
    notIn?: $Enums.Role[]
    not?: NestedEnumRoleFilter<$PrismaModel> | $Enums.Role
  }

  export type LeaveRequestOrderByRelevanceInput = {
    fields: LeaveRequestOrderByRelevanceFieldEnum | LeaveRequestOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type LeaveRequestCountOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    role?: SortOrder
    school_id?: SortOrder
    class_id?: SortOrder
    from_date?: SortOrder
    to_date?: SortOrder
    reason?: SortOrder
    status?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type LeaveRequestAvgOrderByAggregateInput = {
    id?: SortOrder
    school_id?: SortOrder
    class_id?: SortOrder
  }

  export type LeaveRequestMaxOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    role?: SortOrder
    school_id?: SortOrder
    class_id?: SortOrder
    from_date?: SortOrder
    to_date?: SortOrder
    reason?: SortOrder
    status?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type LeaveRequestMinOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    role?: SortOrder
    school_id?: SortOrder
    class_id?: SortOrder
    from_date?: SortOrder
    to_date?: SortOrder
    reason?: SortOrder
    status?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type LeaveRequestSumOrderByAggregateInput = {
    id?: SortOrder
    school_id?: SortOrder
    class_id?: SortOrder
  }

  export type EnumRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[]
    notIn?: $Enums.Role[]
    not?: NestedEnumRoleWithAggregatesFilter<$PrismaModel> | $Enums.Role
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoleFilter<$PrismaModel>
    _max?: NestedEnumRoleFilter<$PrismaModel>
  }

  export type SchoolCreateNestedOneWithoutUsersInput = {
    create?: XOR<SchoolCreateWithoutUsersInput, SchoolUncheckedCreateWithoutUsersInput>
    connectOrCreate?: SchoolCreateOrConnectWithoutUsersInput
    connect?: SchoolWhereUniqueInput
  }

  export type StaffCreateNestedOneWithoutUserInput = {
    create?: XOR<StaffCreateWithoutUserInput, StaffUncheckedCreateWithoutUserInput>
    connectOrCreate?: StaffCreateOrConnectWithoutUserInput
    connect?: StaffWhereUniqueInput
  }

  export type StudentCreateNestedManyWithoutUserInput = {
    create?: XOR<StudentCreateWithoutUserInput, StudentUncheckedCreateWithoutUserInput> | StudentCreateWithoutUserInput[] | StudentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: StudentCreateOrConnectWithoutUserInput | StudentCreateOrConnectWithoutUserInput[]
    createMany?: StudentCreateManyUserInputEnvelope
    connect?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
  }

  export type AdminCreateNestedOneWithoutUserInput = {
    create?: XOR<AdminCreateWithoutUserInput, AdminUncheckedCreateWithoutUserInput>
    connectOrCreate?: AdminCreateOrConnectWithoutUserInput
    connect?: AdminWhereUniqueInput
  }

  export type StaffUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<StaffCreateWithoutUserInput, StaffUncheckedCreateWithoutUserInput>
    connectOrCreate?: StaffCreateOrConnectWithoutUserInput
    connect?: StaffWhereUniqueInput
  }

  export type StudentUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<StudentCreateWithoutUserInput, StudentUncheckedCreateWithoutUserInput> | StudentCreateWithoutUserInput[] | StudentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: StudentCreateOrConnectWithoutUserInput | StudentCreateOrConnectWithoutUserInput[]
    createMany?: StudentCreateManyUserInputEnvelope
    connect?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
  }

  export type AdminUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<AdminCreateWithoutUserInput, AdminUncheckedCreateWithoutUserInput>
    connectOrCreate?: AdminCreateOrConnectWithoutUserInput
    connect?: AdminWhereUniqueInput
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type SchoolUpdateOneRequiredWithoutUsersNestedInput = {
    create?: XOR<SchoolCreateWithoutUsersInput, SchoolUncheckedCreateWithoutUsersInput>
    connectOrCreate?: SchoolCreateOrConnectWithoutUsersInput
    upsert?: SchoolUpsertWithoutUsersInput
    connect?: SchoolWhereUniqueInput
    update?: XOR<XOR<SchoolUpdateToOneWithWhereWithoutUsersInput, SchoolUpdateWithoutUsersInput>, SchoolUncheckedUpdateWithoutUsersInput>
  }

  export type StaffUpdateOneWithoutUserNestedInput = {
    create?: XOR<StaffCreateWithoutUserInput, StaffUncheckedCreateWithoutUserInput>
    connectOrCreate?: StaffCreateOrConnectWithoutUserInput
    upsert?: StaffUpsertWithoutUserInput
    disconnect?: StaffWhereInput | boolean
    delete?: StaffWhereInput | boolean
    connect?: StaffWhereUniqueInput
    update?: XOR<XOR<StaffUpdateToOneWithWhereWithoutUserInput, StaffUpdateWithoutUserInput>, StaffUncheckedUpdateWithoutUserInput>
  }

  export type StudentUpdateManyWithoutUserNestedInput = {
    create?: XOR<StudentCreateWithoutUserInput, StudentUncheckedCreateWithoutUserInput> | StudentCreateWithoutUserInput[] | StudentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: StudentCreateOrConnectWithoutUserInput | StudentCreateOrConnectWithoutUserInput[]
    upsert?: StudentUpsertWithWhereUniqueWithoutUserInput | StudentUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: StudentCreateManyUserInputEnvelope
    set?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    disconnect?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    delete?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    connect?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    update?: StudentUpdateWithWhereUniqueWithoutUserInput | StudentUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: StudentUpdateManyWithWhereWithoutUserInput | StudentUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: StudentScalarWhereInput | StudentScalarWhereInput[]
  }

  export type AdminUpdateOneWithoutUserNestedInput = {
    create?: XOR<AdminCreateWithoutUserInput, AdminUncheckedCreateWithoutUserInput>
    connectOrCreate?: AdminCreateOrConnectWithoutUserInput
    upsert?: AdminUpsertWithoutUserInput
    disconnect?: AdminWhereInput | boolean
    delete?: AdminWhereInput | boolean
    connect?: AdminWhereUniqueInput
    update?: XOR<XOR<AdminUpdateToOneWithWhereWithoutUserInput, AdminUpdateWithoutUserInput>, AdminUncheckedUpdateWithoutUserInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type StaffUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<StaffCreateWithoutUserInput, StaffUncheckedCreateWithoutUserInput>
    connectOrCreate?: StaffCreateOrConnectWithoutUserInput
    upsert?: StaffUpsertWithoutUserInput
    disconnect?: StaffWhereInput | boolean
    delete?: StaffWhereInput | boolean
    connect?: StaffWhereUniqueInput
    update?: XOR<XOR<StaffUpdateToOneWithWhereWithoutUserInput, StaffUpdateWithoutUserInput>, StaffUncheckedUpdateWithoutUserInput>
  }

  export type StudentUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<StudentCreateWithoutUserInput, StudentUncheckedCreateWithoutUserInput> | StudentCreateWithoutUserInput[] | StudentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: StudentCreateOrConnectWithoutUserInput | StudentCreateOrConnectWithoutUserInput[]
    upsert?: StudentUpsertWithWhereUniqueWithoutUserInput | StudentUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: StudentCreateManyUserInputEnvelope
    set?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    disconnect?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    delete?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    connect?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    update?: StudentUpdateWithWhereUniqueWithoutUserInput | StudentUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: StudentUpdateManyWithWhereWithoutUserInput | StudentUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: StudentScalarWhereInput | StudentScalarWhereInput[]
  }

  export type AdminUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<AdminCreateWithoutUserInput, AdminUncheckedCreateWithoutUserInput>
    connectOrCreate?: AdminCreateOrConnectWithoutUserInput
    upsert?: AdminUpsertWithoutUserInput
    disconnect?: AdminWhereInput | boolean
    delete?: AdminWhereInput | boolean
    connect?: AdminWhereUniqueInput
    update?: XOR<XOR<AdminUpdateToOneWithWhereWithoutUserInput, AdminUpdateWithoutUserInput>, AdminUncheckedUpdateWithoutUserInput>
  }

  export type Attendance_userCreateNestedManyWithoutSchoolInput = {
    create?: XOR<Attendance_userCreateWithoutSchoolInput, Attendance_userUncheckedCreateWithoutSchoolInput> | Attendance_userCreateWithoutSchoolInput[] | Attendance_userUncheckedCreateWithoutSchoolInput[]
    connectOrCreate?: Attendance_userCreateOrConnectWithoutSchoolInput | Attendance_userCreateOrConnectWithoutSchoolInput[]
    createMany?: Attendance_userCreateManySchoolInputEnvelope
    connect?: Attendance_userWhereUniqueInput | Attendance_userWhereUniqueInput[]
  }

  export type StaffCreateNestedManyWithoutSchoolInput = {
    create?: XOR<StaffCreateWithoutSchoolInput, StaffUncheckedCreateWithoutSchoolInput> | StaffCreateWithoutSchoolInput[] | StaffUncheckedCreateWithoutSchoolInput[]
    connectOrCreate?: StaffCreateOrConnectWithoutSchoolInput | StaffCreateOrConnectWithoutSchoolInput[]
    createMany?: StaffCreateManySchoolInputEnvelope
    connect?: StaffWhereUniqueInput | StaffWhereUniqueInput[]
  }

  export type ClassesCreateNestedManyWithoutSchoolInput = {
    create?: XOR<ClassesCreateWithoutSchoolInput, ClassesUncheckedCreateWithoutSchoolInput> | ClassesCreateWithoutSchoolInput[] | ClassesUncheckedCreateWithoutSchoolInput[]
    connectOrCreate?: ClassesCreateOrConnectWithoutSchoolInput | ClassesCreateOrConnectWithoutSchoolInput[]
    createMany?: ClassesCreateManySchoolInputEnvelope
    connect?: ClassesWhereUniqueInput | ClassesWhereUniqueInput[]
  }

  export type HolidaysCreateNestedManyWithoutSchoolInput = {
    create?: XOR<HolidaysCreateWithoutSchoolInput, HolidaysUncheckedCreateWithoutSchoolInput> | HolidaysCreateWithoutSchoolInput[] | HolidaysUncheckedCreateWithoutSchoolInput[]
    connectOrCreate?: HolidaysCreateOrConnectWithoutSchoolInput | HolidaysCreateOrConnectWithoutSchoolInput[]
    createMany?: HolidaysCreateManySchoolInputEnvelope
    connect?: HolidaysWhereUniqueInput | HolidaysWhereUniqueInput[]
  }

  export type StudentCreateNestedManyWithoutSchoolInput = {
    create?: XOR<StudentCreateWithoutSchoolInput, StudentUncheckedCreateWithoutSchoolInput> | StudentCreateWithoutSchoolInput[] | StudentUncheckedCreateWithoutSchoolInput[]
    connectOrCreate?: StudentCreateOrConnectWithoutSchoolInput | StudentCreateOrConnectWithoutSchoolInput[]
    createMany?: StudentCreateManySchoolInputEnvelope
    connect?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
  }

  export type FeedbackCreateNestedManyWithoutSchoolInput = {
    create?: XOR<FeedbackCreateWithoutSchoolInput, FeedbackUncheckedCreateWithoutSchoolInput> | FeedbackCreateWithoutSchoolInput[] | FeedbackUncheckedCreateWithoutSchoolInput[]
    connectOrCreate?: FeedbackCreateOrConnectWithoutSchoolInput | FeedbackCreateOrConnectWithoutSchoolInput[]
    createMany?: FeedbackCreateManySchoolInputEnvelope
    connect?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
  }

  export type ClassTimetableCreateNestedManyWithoutSchoolInput = {
    create?: XOR<ClassTimetableCreateWithoutSchoolInput, ClassTimetableUncheckedCreateWithoutSchoolInput> | ClassTimetableCreateWithoutSchoolInput[] | ClassTimetableUncheckedCreateWithoutSchoolInput[]
    connectOrCreate?: ClassTimetableCreateOrConnectWithoutSchoolInput | ClassTimetableCreateOrConnectWithoutSchoolInput[]
    createMany?: ClassTimetableCreateManySchoolInputEnvelope
    connect?: ClassTimetableWhereUniqueInput | ClassTimetableWhereUniqueInput[]
  }

  export type StaffAttendanceCreateNestedManyWithoutSchoolInput = {
    create?: XOR<StaffAttendanceCreateWithoutSchoolInput, StaffAttendanceUncheckedCreateWithoutSchoolInput> | StaffAttendanceCreateWithoutSchoolInput[] | StaffAttendanceUncheckedCreateWithoutSchoolInput[]
    connectOrCreate?: StaffAttendanceCreateOrConnectWithoutSchoolInput | StaffAttendanceCreateOrConnectWithoutSchoolInput[]
    createMany?: StaffAttendanceCreateManySchoolInputEnvelope
    connect?: StaffAttendanceWhereUniqueInput | StaffAttendanceWhereUniqueInput[]
  }

  export type StudentAttendanceCreateNestedManyWithoutSchoolInput = {
    create?: XOR<StudentAttendanceCreateWithoutSchoolInput, StudentAttendanceUncheckedCreateWithoutSchoolInput> | StudentAttendanceCreateWithoutSchoolInput[] | StudentAttendanceUncheckedCreateWithoutSchoolInput[]
    connectOrCreate?: StudentAttendanceCreateOrConnectWithoutSchoolInput | StudentAttendanceCreateOrConnectWithoutSchoolInput[]
    createMany?: StudentAttendanceCreateManySchoolInputEnvelope
    connect?: StudentAttendanceWhereUniqueInput | StudentAttendanceWhereUniqueInput[]
  }

  export type AdminCreateNestedManyWithoutSchoolInput = {
    create?: XOR<AdminCreateWithoutSchoolInput, AdminUncheckedCreateWithoutSchoolInput> | AdminCreateWithoutSchoolInput[] | AdminUncheckedCreateWithoutSchoolInput[]
    connectOrCreate?: AdminCreateOrConnectWithoutSchoolInput | AdminCreateOrConnectWithoutSchoolInput[]
    createMany?: AdminCreateManySchoolInputEnvelope
    connect?: AdminWhereUniqueInput | AdminWhereUniqueInput[]
  }

  export type MessagesCreateNestedManyWithoutSchoolInput = {
    create?: XOR<MessagesCreateWithoutSchoolInput, MessagesUncheckedCreateWithoutSchoolInput> | MessagesCreateWithoutSchoolInput[] | MessagesUncheckedCreateWithoutSchoolInput[]
    connectOrCreate?: MessagesCreateOrConnectWithoutSchoolInput | MessagesCreateOrConnectWithoutSchoolInput[]
    createMany?: MessagesCreateManySchoolInputEnvelope
    connect?: MessagesWhereUniqueInput | MessagesWhereUniqueInput[]
  }

  export type Attendance_userUncheckedCreateNestedManyWithoutSchoolInput = {
    create?: XOR<Attendance_userCreateWithoutSchoolInput, Attendance_userUncheckedCreateWithoutSchoolInput> | Attendance_userCreateWithoutSchoolInput[] | Attendance_userUncheckedCreateWithoutSchoolInput[]
    connectOrCreate?: Attendance_userCreateOrConnectWithoutSchoolInput | Attendance_userCreateOrConnectWithoutSchoolInput[]
    createMany?: Attendance_userCreateManySchoolInputEnvelope
    connect?: Attendance_userWhereUniqueInput | Attendance_userWhereUniqueInput[]
  }

  export type StaffUncheckedCreateNestedManyWithoutSchoolInput = {
    create?: XOR<StaffCreateWithoutSchoolInput, StaffUncheckedCreateWithoutSchoolInput> | StaffCreateWithoutSchoolInput[] | StaffUncheckedCreateWithoutSchoolInput[]
    connectOrCreate?: StaffCreateOrConnectWithoutSchoolInput | StaffCreateOrConnectWithoutSchoolInput[]
    createMany?: StaffCreateManySchoolInputEnvelope
    connect?: StaffWhereUniqueInput | StaffWhereUniqueInput[]
  }

  export type ClassesUncheckedCreateNestedManyWithoutSchoolInput = {
    create?: XOR<ClassesCreateWithoutSchoolInput, ClassesUncheckedCreateWithoutSchoolInput> | ClassesCreateWithoutSchoolInput[] | ClassesUncheckedCreateWithoutSchoolInput[]
    connectOrCreate?: ClassesCreateOrConnectWithoutSchoolInput | ClassesCreateOrConnectWithoutSchoolInput[]
    createMany?: ClassesCreateManySchoolInputEnvelope
    connect?: ClassesWhereUniqueInput | ClassesWhereUniqueInput[]
  }

  export type HolidaysUncheckedCreateNestedManyWithoutSchoolInput = {
    create?: XOR<HolidaysCreateWithoutSchoolInput, HolidaysUncheckedCreateWithoutSchoolInput> | HolidaysCreateWithoutSchoolInput[] | HolidaysUncheckedCreateWithoutSchoolInput[]
    connectOrCreate?: HolidaysCreateOrConnectWithoutSchoolInput | HolidaysCreateOrConnectWithoutSchoolInput[]
    createMany?: HolidaysCreateManySchoolInputEnvelope
    connect?: HolidaysWhereUniqueInput | HolidaysWhereUniqueInput[]
  }

  export type StudentUncheckedCreateNestedManyWithoutSchoolInput = {
    create?: XOR<StudentCreateWithoutSchoolInput, StudentUncheckedCreateWithoutSchoolInput> | StudentCreateWithoutSchoolInput[] | StudentUncheckedCreateWithoutSchoolInput[]
    connectOrCreate?: StudentCreateOrConnectWithoutSchoolInput | StudentCreateOrConnectWithoutSchoolInput[]
    createMany?: StudentCreateManySchoolInputEnvelope
    connect?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
  }

  export type FeedbackUncheckedCreateNestedManyWithoutSchoolInput = {
    create?: XOR<FeedbackCreateWithoutSchoolInput, FeedbackUncheckedCreateWithoutSchoolInput> | FeedbackCreateWithoutSchoolInput[] | FeedbackUncheckedCreateWithoutSchoolInput[]
    connectOrCreate?: FeedbackCreateOrConnectWithoutSchoolInput | FeedbackCreateOrConnectWithoutSchoolInput[]
    createMany?: FeedbackCreateManySchoolInputEnvelope
    connect?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
  }

  export type ClassTimetableUncheckedCreateNestedManyWithoutSchoolInput = {
    create?: XOR<ClassTimetableCreateWithoutSchoolInput, ClassTimetableUncheckedCreateWithoutSchoolInput> | ClassTimetableCreateWithoutSchoolInput[] | ClassTimetableUncheckedCreateWithoutSchoolInput[]
    connectOrCreate?: ClassTimetableCreateOrConnectWithoutSchoolInput | ClassTimetableCreateOrConnectWithoutSchoolInput[]
    createMany?: ClassTimetableCreateManySchoolInputEnvelope
    connect?: ClassTimetableWhereUniqueInput | ClassTimetableWhereUniqueInput[]
  }

  export type StaffAttendanceUncheckedCreateNestedManyWithoutSchoolInput = {
    create?: XOR<StaffAttendanceCreateWithoutSchoolInput, StaffAttendanceUncheckedCreateWithoutSchoolInput> | StaffAttendanceCreateWithoutSchoolInput[] | StaffAttendanceUncheckedCreateWithoutSchoolInput[]
    connectOrCreate?: StaffAttendanceCreateOrConnectWithoutSchoolInput | StaffAttendanceCreateOrConnectWithoutSchoolInput[]
    createMany?: StaffAttendanceCreateManySchoolInputEnvelope
    connect?: StaffAttendanceWhereUniqueInput | StaffAttendanceWhereUniqueInput[]
  }

  export type StudentAttendanceUncheckedCreateNestedManyWithoutSchoolInput = {
    create?: XOR<StudentAttendanceCreateWithoutSchoolInput, StudentAttendanceUncheckedCreateWithoutSchoolInput> | StudentAttendanceCreateWithoutSchoolInput[] | StudentAttendanceUncheckedCreateWithoutSchoolInput[]
    connectOrCreate?: StudentAttendanceCreateOrConnectWithoutSchoolInput | StudentAttendanceCreateOrConnectWithoutSchoolInput[]
    createMany?: StudentAttendanceCreateManySchoolInputEnvelope
    connect?: StudentAttendanceWhereUniqueInput | StudentAttendanceWhereUniqueInput[]
  }

  export type AdminUncheckedCreateNestedManyWithoutSchoolInput = {
    create?: XOR<AdminCreateWithoutSchoolInput, AdminUncheckedCreateWithoutSchoolInput> | AdminCreateWithoutSchoolInput[] | AdminUncheckedCreateWithoutSchoolInput[]
    connectOrCreate?: AdminCreateOrConnectWithoutSchoolInput | AdminCreateOrConnectWithoutSchoolInput[]
    createMany?: AdminCreateManySchoolInputEnvelope
    connect?: AdminWhereUniqueInput | AdminWhereUniqueInput[]
  }

  export type MessagesUncheckedCreateNestedManyWithoutSchoolInput = {
    create?: XOR<MessagesCreateWithoutSchoolInput, MessagesUncheckedCreateWithoutSchoolInput> | MessagesCreateWithoutSchoolInput[] | MessagesUncheckedCreateWithoutSchoolInput[]
    connectOrCreate?: MessagesCreateOrConnectWithoutSchoolInput | MessagesCreateOrConnectWithoutSchoolInput[]
    createMany?: MessagesCreateManySchoolInputEnvelope
    connect?: MessagesWhereUniqueInput | MessagesWhereUniqueInput[]
  }

  export type BytesFieldUpdateOperationsInput = {
    set?: Uint8Array
  }

  export type Attendance_userUpdateManyWithoutSchoolNestedInput = {
    create?: XOR<Attendance_userCreateWithoutSchoolInput, Attendance_userUncheckedCreateWithoutSchoolInput> | Attendance_userCreateWithoutSchoolInput[] | Attendance_userUncheckedCreateWithoutSchoolInput[]
    connectOrCreate?: Attendance_userCreateOrConnectWithoutSchoolInput | Attendance_userCreateOrConnectWithoutSchoolInput[]
    upsert?: Attendance_userUpsertWithWhereUniqueWithoutSchoolInput | Attendance_userUpsertWithWhereUniqueWithoutSchoolInput[]
    createMany?: Attendance_userCreateManySchoolInputEnvelope
    set?: Attendance_userWhereUniqueInput | Attendance_userWhereUniqueInput[]
    disconnect?: Attendance_userWhereUniqueInput | Attendance_userWhereUniqueInput[]
    delete?: Attendance_userWhereUniqueInput | Attendance_userWhereUniqueInput[]
    connect?: Attendance_userWhereUniqueInput | Attendance_userWhereUniqueInput[]
    update?: Attendance_userUpdateWithWhereUniqueWithoutSchoolInput | Attendance_userUpdateWithWhereUniqueWithoutSchoolInput[]
    updateMany?: Attendance_userUpdateManyWithWhereWithoutSchoolInput | Attendance_userUpdateManyWithWhereWithoutSchoolInput[]
    deleteMany?: Attendance_userScalarWhereInput | Attendance_userScalarWhereInput[]
  }

  export type StaffUpdateManyWithoutSchoolNestedInput = {
    create?: XOR<StaffCreateWithoutSchoolInput, StaffUncheckedCreateWithoutSchoolInput> | StaffCreateWithoutSchoolInput[] | StaffUncheckedCreateWithoutSchoolInput[]
    connectOrCreate?: StaffCreateOrConnectWithoutSchoolInput | StaffCreateOrConnectWithoutSchoolInput[]
    upsert?: StaffUpsertWithWhereUniqueWithoutSchoolInput | StaffUpsertWithWhereUniqueWithoutSchoolInput[]
    createMany?: StaffCreateManySchoolInputEnvelope
    set?: StaffWhereUniqueInput | StaffWhereUniqueInput[]
    disconnect?: StaffWhereUniqueInput | StaffWhereUniqueInput[]
    delete?: StaffWhereUniqueInput | StaffWhereUniqueInput[]
    connect?: StaffWhereUniqueInput | StaffWhereUniqueInput[]
    update?: StaffUpdateWithWhereUniqueWithoutSchoolInput | StaffUpdateWithWhereUniqueWithoutSchoolInput[]
    updateMany?: StaffUpdateManyWithWhereWithoutSchoolInput | StaffUpdateManyWithWhereWithoutSchoolInput[]
    deleteMany?: StaffScalarWhereInput | StaffScalarWhereInput[]
  }

  export type ClassesUpdateManyWithoutSchoolNestedInput = {
    create?: XOR<ClassesCreateWithoutSchoolInput, ClassesUncheckedCreateWithoutSchoolInput> | ClassesCreateWithoutSchoolInput[] | ClassesUncheckedCreateWithoutSchoolInput[]
    connectOrCreate?: ClassesCreateOrConnectWithoutSchoolInput | ClassesCreateOrConnectWithoutSchoolInput[]
    upsert?: ClassesUpsertWithWhereUniqueWithoutSchoolInput | ClassesUpsertWithWhereUniqueWithoutSchoolInput[]
    createMany?: ClassesCreateManySchoolInputEnvelope
    set?: ClassesWhereUniqueInput | ClassesWhereUniqueInput[]
    disconnect?: ClassesWhereUniqueInput | ClassesWhereUniqueInput[]
    delete?: ClassesWhereUniqueInput | ClassesWhereUniqueInput[]
    connect?: ClassesWhereUniqueInput | ClassesWhereUniqueInput[]
    update?: ClassesUpdateWithWhereUniqueWithoutSchoolInput | ClassesUpdateWithWhereUniqueWithoutSchoolInput[]
    updateMany?: ClassesUpdateManyWithWhereWithoutSchoolInput | ClassesUpdateManyWithWhereWithoutSchoolInput[]
    deleteMany?: ClassesScalarWhereInput | ClassesScalarWhereInput[]
  }

  export type HolidaysUpdateManyWithoutSchoolNestedInput = {
    create?: XOR<HolidaysCreateWithoutSchoolInput, HolidaysUncheckedCreateWithoutSchoolInput> | HolidaysCreateWithoutSchoolInput[] | HolidaysUncheckedCreateWithoutSchoolInput[]
    connectOrCreate?: HolidaysCreateOrConnectWithoutSchoolInput | HolidaysCreateOrConnectWithoutSchoolInput[]
    upsert?: HolidaysUpsertWithWhereUniqueWithoutSchoolInput | HolidaysUpsertWithWhereUniqueWithoutSchoolInput[]
    createMany?: HolidaysCreateManySchoolInputEnvelope
    set?: HolidaysWhereUniqueInput | HolidaysWhereUniqueInput[]
    disconnect?: HolidaysWhereUniqueInput | HolidaysWhereUniqueInput[]
    delete?: HolidaysWhereUniqueInput | HolidaysWhereUniqueInput[]
    connect?: HolidaysWhereUniqueInput | HolidaysWhereUniqueInput[]
    update?: HolidaysUpdateWithWhereUniqueWithoutSchoolInput | HolidaysUpdateWithWhereUniqueWithoutSchoolInput[]
    updateMany?: HolidaysUpdateManyWithWhereWithoutSchoolInput | HolidaysUpdateManyWithWhereWithoutSchoolInput[]
    deleteMany?: HolidaysScalarWhereInput | HolidaysScalarWhereInput[]
  }

  export type StudentUpdateManyWithoutSchoolNestedInput = {
    create?: XOR<StudentCreateWithoutSchoolInput, StudentUncheckedCreateWithoutSchoolInput> | StudentCreateWithoutSchoolInput[] | StudentUncheckedCreateWithoutSchoolInput[]
    connectOrCreate?: StudentCreateOrConnectWithoutSchoolInput | StudentCreateOrConnectWithoutSchoolInput[]
    upsert?: StudentUpsertWithWhereUniqueWithoutSchoolInput | StudentUpsertWithWhereUniqueWithoutSchoolInput[]
    createMany?: StudentCreateManySchoolInputEnvelope
    set?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    disconnect?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    delete?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    connect?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    update?: StudentUpdateWithWhereUniqueWithoutSchoolInput | StudentUpdateWithWhereUniqueWithoutSchoolInput[]
    updateMany?: StudentUpdateManyWithWhereWithoutSchoolInput | StudentUpdateManyWithWhereWithoutSchoolInput[]
    deleteMany?: StudentScalarWhereInput | StudentScalarWhereInput[]
  }

  export type FeedbackUpdateManyWithoutSchoolNestedInput = {
    create?: XOR<FeedbackCreateWithoutSchoolInput, FeedbackUncheckedCreateWithoutSchoolInput> | FeedbackCreateWithoutSchoolInput[] | FeedbackUncheckedCreateWithoutSchoolInput[]
    connectOrCreate?: FeedbackCreateOrConnectWithoutSchoolInput | FeedbackCreateOrConnectWithoutSchoolInput[]
    upsert?: FeedbackUpsertWithWhereUniqueWithoutSchoolInput | FeedbackUpsertWithWhereUniqueWithoutSchoolInput[]
    createMany?: FeedbackCreateManySchoolInputEnvelope
    set?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    disconnect?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    delete?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    connect?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    update?: FeedbackUpdateWithWhereUniqueWithoutSchoolInput | FeedbackUpdateWithWhereUniqueWithoutSchoolInput[]
    updateMany?: FeedbackUpdateManyWithWhereWithoutSchoolInput | FeedbackUpdateManyWithWhereWithoutSchoolInput[]
    deleteMany?: FeedbackScalarWhereInput | FeedbackScalarWhereInput[]
  }

  export type ClassTimetableUpdateManyWithoutSchoolNestedInput = {
    create?: XOR<ClassTimetableCreateWithoutSchoolInput, ClassTimetableUncheckedCreateWithoutSchoolInput> | ClassTimetableCreateWithoutSchoolInput[] | ClassTimetableUncheckedCreateWithoutSchoolInput[]
    connectOrCreate?: ClassTimetableCreateOrConnectWithoutSchoolInput | ClassTimetableCreateOrConnectWithoutSchoolInput[]
    upsert?: ClassTimetableUpsertWithWhereUniqueWithoutSchoolInput | ClassTimetableUpsertWithWhereUniqueWithoutSchoolInput[]
    createMany?: ClassTimetableCreateManySchoolInputEnvelope
    set?: ClassTimetableWhereUniqueInput | ClassTimetableWhereUniqueInput[]
    disconnect?: ClassTimetableWhereUniqueInput | ClassTimetableWhereUniqueInput[]
    delete?: ClassTimetableWhereUniqueInput | ClassTimetableWhereUniqueInput[]
    connect?: ClassTimetableWhereUniqueInput | ClassTimetableWhereUniqueInput[]
    update?: ClassTimetableUpdateWithWhereUniqueWithoutSchoolInput | ClassTimetableUpdateWithWhereUniqueWithoutSchoolInput[]
    updateMany?: ClassTimetableUpdateManyWithWhereWithoutSchoolInput | ClassTimetableUpdateManyWithWhereWithoutSchoolInput[]
    deleteMany?: ClassTimetableScalarWhereInput | ClassTimetableScalarWhereInput[]
  }

  export type StaffAttendanceUpdateManyWithoutSchoolNestedInput = {
    create?: XOR<StaffAttendanceCreateWithoutSchoolInput, StaffAttendanceUncheckedCreateWithoutSchoolInput> | StaffAttendanceCreateWithoutSchoolInput[] | StaffAttendanceUncheckedCreateWithoutSchoolInput[]
    connectOrCreate?: StaffAttendanceCreateOrConnectWithoutSchoolInput | StaffAttendanceCreateOrConnectWithoutSchoolInput[]
    upsert?: StaffAttendanceUpsertWithWhereUniqueWithoutSchoolInput | StaffAttendanceUpsertWithWhereUniqueWithoutSchoolInput[]
    createMany?: StaffAttendanceCreateManySchoolInputEnvelope
    set?: StaffAttendanceWhereUniqueInput | StaffAttendanceWhereUniqueInput[]
    disconnect?: StaffAttendanceWhereUniqueInput | StaffAttendanceWhereUniqueInput[]
    delete?: StaffAttendanceWhereUniqueInput | StaffAttendanceWhereUniqueInput[]
    connect?: StaffAttendanceWhereUniqueInput | StaffAttendanceWhereUniqueInput[]
    update?: StaffAttendanceUpdateWithWhereUniqueWithoutSchoolInput | StaffAttendanceUpdateWithWhereUniqueWithoutSchoolInput[]
    updateMany?: StaffAttendanceUpdateManyWithWhereWithoutSchoolInput | StaffAttendanceUpdateManyWithWhereWithoutSchoolInput[]
    deleteMany?: StaffAttendanceScalarWhereInput | StaffAttendanceScalarWhereInput[]
  }

  export type StudentAttendanceUpdateManyWithoutSchoolNestedInput = {
    create?: XOR<StudentAttendanceCreateWithoutSchoolInput, StudentAttendanceUncheckedCreateWithoutSchoolInput> | StudentAttendanceCreateWithoutSchoolInput[] | StudentAttendanceUncheckedCreateWithoutSchoolInput[]
    connectOrCreate?: StudentAttendanceCreateOrConnectWithoutSchoolInput | StudentAttendanceCreateOrConnectWithoutSchoolInput[]
    upsert?: StudentAttendanceUpsertWithWhereUniqueWithoutSchoolInput | StudentAttendanceUpsertWithWhereUniqueWithoutSchoolInput[]
    createMany?: StudentAttendanceCreateManySchoolInputEnvelope
    set?: StudentAttendanceWhereUniqueInput | StudentAttendanceWhereUniqueInput[]
    disconnect?: StudentAttendanceWhereUniqueInput | StudentAttendanceWhereUniqueInput[]
    delete?: StudentAttendanceWhereUniqueInput | StudentAttendanceWhereUniqueInput[]
    connect?: StudentAttendanceWhereUniqueInput | StudentAttendanceWhereUniqueInput[]
    update?: StudentAttendanceUpdateWithWhereUniqueWithoutSchoolInput | StudentAttendanceUpdateWithWhereUniqueWithoutSchoolInput[]
    updateMany?: StudentAttendanceUpdateManyWithWhereWithoutSchoolInput | StudentAttendanceUpdateManyWithWhereWithoutSchoolInput[]
    deleteMany?: StudentAttendanceScalarWhereInput | StudentAttendanceScalarWhereInput[]
  }

  export type AdminUpdateManyWithoutSchoolNestedInput = {
    create?: XOR<AdminCreateWithoutSchoolInput, AdminUncheckedCreateWithoutSchoolInput> | AdminCreateWithoutSchoolInput[] | AdminUncheckedCreateWithoutSchoolInput[]
    connectOrCreate?: AdminCreateOrConnectWithoutSchoolInput | AdminCreateOrConnectWithoutSchoolInput[]
    upsert?: AdminUpsertWithWhereUniqueWithoutSchoolInput | AdminUpsertWithWhereUniqueWithoutSchoolInput[]
    createMany?: AdminCreateManySchoolInputEnvelope
    set?: AdminWhereUniqueInput | AdminWhereUniqueInput[]
    disconnect?: AdminWhereUniqueInput | AdminWhereUniqueInput[]
    delete?: AdminWhereUniqueInput | AdminWhereUniqueInput[]
    connect?: AdminWhereUniqueInput | AdminWhereUniqueInput[]
    update?: AdminUpdateWithWhereUniqueWithoutSchoolInput | AdminUpdateWithWhereUniqueWithoutSchoolInput[]
    updateMany?: AdminUpdateManyWithWhereWithoutSchoolInput | AdminUpdateManyWithWhereWithoutSchoolInput[]
    deleteMany?: AdminScalarWhereInput | AdminScalarWhereInput[]
  }

  export type MessagesUpdateManyWithoutSchoolNestedInput = {
    create?: XOR<MessagesCreateWithoutSchoolInput, MessagesUncheckedCreateWithoutSchoolInput> | MessagesCreateWithoutSchoolInput[] | MessagesUncheckedCreateWithoutSchoolInput[]
    connectOrCreate?: MessagesCreateOrConnectWithoutSchoolInput | MessagesCreateOrConnectWithoutSchoolInput[]
    upsert?: MessagesUpsertWithWhereUniqueWithoutSchoolInput | MessagesUpsertWithWhereUniqueWithoutSchoolInput[]
    createMany?: MessagesCreateManySchoolInputEnvelope
    set?: MessagesWhereUniqueInput | MessagesWhereUniqueInput[]
    disconnect?: MessagesWhereUniqueInput | MessagesWhereUniqueInput[]
    delete?: MessagesWhereUniqueInput | MessagesWhereUniqueInput[]
    connect?: MessagesWhereUniqueInput | MessagesWhereUniqueInput[]
    update?: MessagesUpdateWithWhereUniqueWithoutSchoolInput | MessagesUpdateWithWhereUniqueWithoutSchoolInput[]
    updateMany?: MessagesUpdateManyWithWhereWithoutSchoolInput | MessagesUpdateManyWithWhereWithoutSchoolInput[]
    deleteMany?: MessagesScalarWhereInput | MessagesScalarWhereInput[]
  }

  export type Attendance_userUncheckedUpdateManyWithoutSchoolNestedInput = {
    create?: XOR<Attendance_userCreateWithoutSchoolInput, Attendance_userUncheckedCreateWithoutSchoolInput> | Attendance_userCreateWithoutSchoolInput[] | Attendance_userUncheckedCreateWithoutSchoolInput[]
    connectOrCreate?: Attendance_userCreateOrConnectWithoutSchoolInput | Attendance_userCreateOrConnectWithoutSchoolInput[]
    upsert?: Attendance_userUpsertWithWhereUniqueWithoutSchoolInput | Attendance_userUpsertWithWhereUniqueWithoutSchoolInput[]
    createMany?: Attendance_userCreateManySchoolInputEnvelope
    set?: Attendance_userWhereUniqueInput | Attendance_userWhereUniqueInput[]
    disconnect?: Attendance_userWhereUniqueInput | Attendance_userWhereUniqueInput[]
    delete?: Attendance_userWhereUniqueInput | Attendance_userWhereUniqueInput[]
    connect?: Attendance_userWhereUniqueInput | Attendance_userWhereUniqueInput[]
    update?: Attendance_userUpdateWithWhereUniqueWithoutSchoolInput | Attendance_userUpdateWithWhereUniqueWithoutSchoolInput[]
    updateMany?: Attendance_userUpdateManyWithWhereWithoutSchoolInput | Attendance_userUpdateManyWithWhereWithoutSchoolInput[]
    deleteMany?: Attendance_userScalarWhereInput | Attendance_userScalarWhereInput[]
  }

  export type StaffUncheckedUpdateManyWithoutSchoolNestedInput = {
    create?: XOR<StaffCreateWithoutSchoolInput, StaffUncheckedCreateWithoutSchoolInput> | StaffCreateWithoutSchoolInput[] | StaffUncheckedCreateWithoutSchoolInput[]
    connectOrCreate?: StaffCreateOrConnectWithoutSchoolInput | StaffCreateOrConnectWithoutSchoolInput[]
    upsert?: StaffUpsertWithWhereUniqueWithoutSchoolInput | StaffUpsertWithWhereUniqueWithoutSchoolInput[]
    createMany?: StaffCreateManySchoolInputEnvelope
    set?: StaffWhereUniqueInput | StaffWhereUniqueInput[]
    disconnect?: StaffWhereUniqueInput | StaffWhereUniqueInput[]
    delete?: StaffWhereUniqueInput | StaffWhereUniqueInput[]
    connect?: StaffWhereUniqueInput | StaffWhereUniqueInput[]
    update?: StaffUpdateWithWhereUniqueWithoutSchoolInput | StaffUpdateWithWhereUniqueWithoutSchoolInput[]
    updateMany?: StaffUpdateManyWithWhereWithoutSchoolInput | StaffUpdateManyWithWhereWithoutSchoolInput[]
    deleteMany?: StaffScalarWhereInput | StaffScalarWhereInput[]
  }

  export type ClassesUncheckedUpdateManyWithoutSchoolNestedInput = {
    create?: XOR<ClassesCreateWithoutSchoolInput, ClassesUncheckedCreateWithoutSchoolInput> | ClassesCreateWithoutSchoolInput[] | ClassesUncheckedCreateWithoutSchoolInput[]
    connectOrCreate?: ClassesCreateOrConnectWithoutSchoolInput | ClassesCreateOrConnectWithoutSchoolInput[]
    upsert?: ClassesUpsertWithWhereUniqueWithoutSchoolInput | ClassesUpsertWithWhereUniqueWithoutSchoolInput[]
    createMany?: ClassesCreateManySchoolInputEnvelope
    set?: ClassesWhereUniqueInput | ClassesWhereUniqueInput[]
    disconnect?: ClassesWhereUniqueInput | ClassesWhereUniqueInput[]
    delete?: ClassesWhereUniqueInput | ClassesWhereUniqueInput[]
    connect?: ClassesWhereUniqueInput | ClassesWhereUniqueInput[]
    update?: ClassesUpdateWithWhereUniqueWithoutSchoolInput | ClassesUpdateWithWhereUniqueWithoutSchoolInput[]
    updateMany?: ClassesUpdateManyWithWhereWithoutSchoolInput | ClassesUpdateManyWithWhereWithoutSchoolInput[]
    deleteMany?: ClassesScalarWhereInput | ClassesScalarWhereInput[]
  }

  export type HolidaysUncheckedUpdateManyWithoutSchoolNestedInput = {
    create?: XOR<HolidaysCreateWithoutSchoolInput, HolidaysUncheckedCreateWithoutSchoolInput> | HolidaysCreateWithoutSchoolInput[] | HolidaysUncheckedCreateWithoutSchoolInput[]
    connectOrCreate?: HolidaysCreateOrConnectWithoutSchoolInput | HolidaysCreateOrConnectWithoutSchoolInput[]
    upsert?: HolidaysUpsertWithWhereUniqueWithoutSchoolInput | HolidaysUpsertWithWhereUniqueWithoutSchoolInput[]
    createMany?: HolidaysCreateManySchoolInputEnvelope
    set?: HolidaysWhereUniqueInput | HolidaysWhereUniqueInput[]
    disconnect?: HolidaysWhereUniqueInput | HolidaysWhereUniqueInput[]
    delete?: HolidaysWhereUniqueInput | HolidaysWhereUniqueInput[]
    connect?: HolidaysWhereUniqueInput | HolidaysWhereUniqueInput[]
    update?: HolidaysUpdateWithWhereUniqueWithoutSchoolInput | HolidaysUpdateWithWhereUniqueWithoutSchoolInput[]
    updateMany?: HolidaysUpdateManyWithWhereWithoutSchoolInput | HolidaysUpdateManyWithWhereWithoutSchoolInput[]
    deleteMany?: HolidaysScalarWhereInput | HolidaysScalarWhereInput[]
  }

  export type StudentUncheckedUpdateManyWithoutSchoolNestedInput = {
    create?: XOR<StudentCreateWithoutSchoolInput, StudentUncheckedCreateWithoutSchoolInput> | StudentCreateWithoutSchoolInput[] | StudentUncheckedCreateWithoutSchoolInput[]
    connectOrCreate?: StudentCreateOrConnectWithoutSchoolInput | StudentCreateOrConnectWithoutSchoolInput[]
    upsert?: StudentUpsertWithWhereUniqueWithoutSchoolInput | StudentUpsertWithWhereUniqueWithoutSchoolInput[]
    createMany?: StudentCreateManySchoolInputEnvelope
    set?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    disconnect?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    delete?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    connect?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    update?: StudentUpdateWithWhereUniqueWithoutSchoolInput | StudentUpdateWithWhereUniqueWithoutSchoolInput[]
    updateMany?: StudentUpdateManyWithWhereWithoutSchoolInput | StudentUpdateManyWithWhereWithoutSchoolInput[]
    deleteMany?: StudentScalarWhereInput | StudentScalarWhereInput[]
  }

  export type FeedbackUncheckedUpdateManyWithoutSchoolNestedInput = {
    create?: XOR<FeedbackCreateWithoutSchoolInput, FeedbackUncheckedCreateWithoutSchoolInput> | FeedbackCreateWithoutSchoolInput[] | FeedbackUncheckedCreateWithoutSchoolInput[]
    connectOrCreate?: FeedbackCreateOrConnectWithoutSchoolInput | FeedbackCreateOrConnectWithoutSchoolInput[]
    upsert?: FeedbackUpsertWithWhereUniqueWithoutSchoolInput | FeedbackUpsertWithWhereUniqueWithoutSchoolInput[]
    createMany?: FeedbackCreateManySchoolInputEnvelope
    set?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    disconnect?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    delete?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    connect?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    update?: FeedbackUpdateWithWhereUniqueWithoutSchoolInput | FeedbackUpdateWithWhereUniqueWithoutSchoolInput[]
    updateMany?: FeedbackUpdateManyWithWhereWithoutSchoolInput | FeedbackUpdateManyWithWhereWithoutSchoolInput[]
    deleteMany?: FeedbackScalarWhereInput | FeedbackScalarWhereInput[]
  }

  export type ClassTimetableUncheckedUpdateManyWithoutSchoolNestedInput = {
    create?: XOR<ClassTimetableCreateWithoutSchoolInput, ClassTimetableUncheckedCreateWithoutSchoolInput> | ClassTimetableCreateWithoutSchoolInput[] | ClassTimetableUncheckedCreateWithoutSchoolInput[]
    connectOrCreate?: ClassTimetableCreateOrConnectWithoutSchoolInput | ClassTimetableCreateOrConnectWithoutSchoolInput[]
    upsert?: ClassTimetableUpsertWithWhereUniqueWithoutSchoolInput | ClassTimetableUpsertWithWhereUniqueWithoutSchoolInput[]
    createMany?: ClassTimetableCreateManySchoolInputEnvelope
    set?: ClassTimetableWhereUniqueInput | ClassTimetableWhereUniqueInput[]
    disconnect?: ClassTimetableWhereUniqueInput | ClassTimetableWhereUniqueInput[]
    delete?: ClassTimetableWhereUniqueInput | ClassTimetableWhereUniqueInput[]
    connect?: ClassTimetableWhereUniqueInput | ClassTimetableWhereUniqueInput[]
    update?: ClassTimetableUpdateWithWhereUniqueWithoutSchoolInput | ClassTimetableUpdateWithWhereUniqueWithoutSchoolInput[]
    updateMany?: ClassTimetableUpdateManyWithWhereWithoutSchoolInput | ClassTimetableUpdateManyWithWhereWithoutSchoolInput[]
    deleteMany?: ClassTimetableScalarWhereInput | ClassTimetableScalarWhereInput[]
  }

  export type StaffAttendanceUncheckedUpdateManyWithoutSchoolNestedInput = {
    create?: XOR<StaffAttendanceCreateWithoutSchoolInput, StaffAttendanceUncheckedCreateWithoutSchoolInput> | StaffAttendanceCreateWithoutSchoolInput[] | StaffAttendanceUncheckedCreateWithoutSchoolInput[]
    connectOrCreate?: StaffAttendanceCreateOrConnectWithoutSchoolInput | StaffAttendanceCreateOrConnectWithoutSchoolInput[]
    upsert?: StaffAttendanceUpsertWithWhereUniqueWithoutSchoolInput | StaffAttendanceUpsertWithWhereUniqueWithoutSchoolInput[]
    createMany?: StaffAttendanceCreateManySchoolInputEnvelope
    set?: StaffAttendanceWhereUniqueInput | StaffAttendanceWhereUniqueInput[]
    disconnect?: StaffAttendanceWhereUniqueInput | StaffAttendanceWhereUniqueInput[]
    delete?: StaffAttendanceWhereUniqueInput | StaffAttendanceWhereUniqueInput[]
    connect?: StaffAttendanceWhereUniqueInput | StaffAttendanceWhereUniqueInput[]
    update?: StaffAttendanceUpdateWithWhereUniqueWithoutSchoolInput | StaffAttendanceUpdateWithWhereUniqueWithoutSchoolInput[]
    updateMany?: StaffAttendanceUpdateManyWithWhereWithoutSchoolInput | StaffAttendanceUpdateManyWithWhereWithoutSchoolInput[]
    deleteMany?: StaffAttendanceScalarWhereInput | StaffAttendanceScalarWhereInput[]
  }

  export type StudentAttendanceUncheckedUpdateManyWithoutSchoolNestedInput = {
    create?: XOR<StudentAttendanceCreateWithoutSchoolInput, StudentAttendanceUncheckedCreateWithoutSchoolInput> | StudentAttendanceCreateWithoutSchoolInput[] | StudentAttendanceUncheckedCreateWithoutSchoolInput[]
    connectOrCreate?: StudentAttendanceCreateOrConnectWithoutSchoolInput | StudentAttendanceCreateOrConnectWithoutSchoolInput[]
    upsert?: StudentAttendanceUpsertWithWhereUniqueWithoutSchoolInput | StudentAttendanceUpsertWithWhereUniqueWithoutSchoolInput[]
    createMany?: StudentAttendanceCreateManySchoolInputEnvelope
    set?: StudentAttendanceWhereUniqueInput | StudentAttendanceWhereUniqueInput[]
    disconnect?: StudentAttendanceWhereUniqueInput | StudentAttendanceWhereUniqueInput[]
    delete?: StudentAttendanceWhereUniqueInput | StudentAttendanceWhereUniqueInput[]
    connect?: StudentAttendanceWhereUniqueInput | StudentAttendanceWhereUniqueInput[]
    update?: StudentAttendanceUpdateWithWhereUniqueWithoutSchoolInput | StudentAttendanceUpdateWithWhereUniqueWithoutSchoolInput[]
    updateMany?: StudentAttendanceUpdateManyWithWhereWithoutSchoolInput | StudentAttendanceUpdateManyWithWhereWithoutSchoolInput[]
    deleteMany?: StudentAttendanceScalarWhereInput | StudentAttendanceScalarWhereInput[]
  }

  export type AdminUncheckedUpdateManyWithoutSchoolNestedInput = {
    create?: XOR<AdminCreateWithoutSchoolInput, AdminUncheckedCreateWithoutSchoolInput> | AdminCreateWithoutSchoolInput[] | AdminUncheckedCreateWithoutSchoolInput[]
    connectOrCreate?: AdminCreateOrConnectWithoutSchoolInput | AdminCreateOrConnectWithoutSchoolInput[]
    upsert?: AdminUpsertWithWhereUniqueWithoutSchoolInput | AdminUpsertWithWhereUniqueWithoutSchoolInput[]
    createMany?: AdminCreateManySchoolInputEnvelope
    set?: AdminWhereUniqueInput | AdminWhereUniqueInput[]
    disconnect?: AdminWhereUniqueInput | AdminWhereUniqueInput[]
    delete?: AdminWhereUniqueInput | AdminWhereUniqueInput[]
    connect?: AdminWhereUniqueInput | AdminWhereUniqueInput[]
    update?: AdminUpdateWithWhereUniqueWithoutSchoolInput | AdminUpdateWithWhereUniqueWithoutSchoolInput[]
    updateMany?: AdminUpdateManyWithWhereWithoutSchoolInput | AdminUpdateManyWithWhereWithoutSchoolInput[]
    deleteMany?: AdminScalarWhereInput | AdminScalarWhereInput[]
  }

  export type MessagesUncheckedUpdateManyWithoutSchoolNestedInput = {
    create?: XOR<MessagesCreateWithoutSchoolInput, MessagesUncheckedCreateWithoutSchoolInput> | MessagesCreateWithoutSchoolInput[] | MessagesUncheckedCreateWithoutSchoolInput[]
    connectOrCreate?: MessagesCreateOrConnectWithoutSchoolInput | MessagesCreateOrConnectWithoutSchoolInput[]
    upsert?: MessagesUpsertWithWhereUniqueWithoutSchoolInput | MessagesUpsertWithWhereUniqueWithoutSchoolInput[]
    createMany?: MessagesCreateManySchoolInputEnvelope
    set?: MessagesWhereUniqueInput | MessagesWhereUniqueInput[]
    disconnect?: MessagesWhereUniqueInput | MessagesWhereUniqueInput[]
    delete?: MessagesWhereUniqueInput | MessagesWhereUniqueInput[]
    connect?: MessagesWhereUniqueInput | MessagesWhereUniqueInput[]
    update?: MessagesUpdateWithWhereUniqueWithoutSchoolInput | MessagesUpdateWithWhereUniqueWithoutSchoolInput[]
    updateMany?: MessagesUpdateManyWithWhereWithoutSchoolInput | MessagesUpdateManyWithWhereWithoutSchoolInput[]
    deleteMany?: MessagesScalarWhereInput | MessagesScalarWhereInput[]
  }

  export type SchoolCreateNestedOneWithoutClassesInput = {
    create?: XOR<SchoolCreateWithoutClassesInput, SchoolUncheckedCreateWithoutClassesInput>
    connectOrCreate?: SchoolCreateOrConnectWithoutClassesInput
    connect?: SchoolWhereUniqueInput
  }

  export type HolidaysCreateNestedManyWithoutClassesInput = {
    create?: XOR<HolidaysCreateWithoutClassesInput, HolidaysUncheckedCreateWithoutClassesInput> | HolidaysCreateWithoutClassesInput[] | HolidaysUncheckedCreateWithoutClassesInput[]
    connectOrCreate?: HolidaysCreateOrConnectWithoutClassesInput | HolidaysCreateOrConnectWithoutClassesInput[]
    connect?: HolidaysWhereUniqueInput | HolidaysWhereUniqueInput[]
  }

  export type StudentCreateNestedManyWithoutClassInput = {
    create?: XOR<StudentCreateWithoutClassInput, StudentUncheckedCreateWithoutClassInput> | StudentCreateWithoutClassInput[] | StudentUncheckedCreateWithoutClassInput[]
    connectOrCreate?: StudentCreateOrConnectWithoutClassInput | StudentCreateOrConnectWithoutClassInput[]
    createMany?: StudentCreateManyClassInputEnvelope
    connect?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
  }

  export type StudentAttendanceCreateNestedManyWithoutClassInput = {
    create?: XOR<StudentAttendanceCreateWithoutClassInput, StudentAttendanceUncheckedCreateWithoutClassInput> | StudentAttendanceCreateWithoutClassInput[] | StudentAttendanceUncheckedCreateWithoutClassInput[]
    connectOrCreate?: StudentAttendanceCreateOrConnectWithoutClassInput | StudentAttendanceCreateOrConnectWithoutClassInput[]
    createMany?: StudentAttendanceCreateManyClassInputEnvelope
    connect?: StudentAttendanceWhereUniqueInput | StudentAttendanceWhereUniqueInput[]
  }

  export type ClassTimetableCreateNestedManyWithoutClassesInput = {
    create?: XOR<ClassTimetableCreateWithoutClassesInput, ClassTimetableUncheckedCreateWithoutClassesInput> | ClassTimetableCreateWithoutClassesInput[] | ClassTimetableUncheckedCreateWithoutClassesInput[]
    connectOrCreate?: ClassTimetableCreateOrConnectWithoutClassesInput | ClassTimetableCreateOrConnectWithoutClassesInput[]
    createMany?: ClassTimetableCreateManyClassesInputEnvelope
    connect?: ClassTimetableWhereUniqueInput | ClassTimetableWhereUniqueInput[]
  }

  export type FeedbackCreateNestedManyWithoutClassInput = {
    create?: XOR<FeedbackCreateWithoutClassInput, FeedbackUncheckedCreateWithoutClassInput> | FeedbackCreateWithoutClassInput[] | FeedbackUncheckedCreateWithoutClassInput[]
    connectOrCreate?: FeedbackCreateOrConnectWithoutClassInput | FeedbackCreateOrConnectWithoutClassInput[]
    createMany?: FeedbackCreateManyClassInputEnvelope
    connect?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
  }

  export type HolidaysUncheckedCreateNestedManyWithoutClassesInput = {
    create?: XOR<HolidaysCreateWithoutClassesInput, HolidaysUncheckedCreateWithoutClassesInput> | HolidaysCreateWithoutClassesInput[] | HolidaysUncheckedCreateWithoutClassesInput[]
    connectOrCreate?: HolidaysCreateOrConnectWithoutClassesInput | HolidaysCreateOrConnectWithoutClassesInput[]
    connect?: HolidaysWhereUniqueInput | HolidaysWhereUniqueInput[]
  }

  export type StudentUncheckedCreateNestedManyWithoutClassInput = {
    create?: XOR<StudentCreateWithoutClassInput, StudentUncheckedCreateWithoutClassInput> | StudentCreateWithoutClassInput[] | StudentUncheckedCreateWithoutClassInput[]
    connectOrCreate?: StudentCreateOrConnectWithoutClassInput | StudentCreateOrConnectWithoutClassInput[]
    createMany?: StudentCreateManyClassInputEnvelope
    connect?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
  }

  export type StudentAttendanceUncheckedCreateNestedManyWithoutClassInput = {
    create?: XOR<StudentAttendanceCreateWithoutClassInput, StudentAttendanceUncheckedCreateWithoutClassInput> | StudentAttendanceCreateWithoutClassInput[] | StudentAttendanceUncheckedCreateWithoutClassInput[]
    connectOrCreate?: StudentAttendanceCreateOrConnectWithoutClassInput | StudentAttendanceCreateOrConnectWithoutClassInput[]
    createMany?: StudentAttendanceCreateManyClassInputEnvelope
    connect?: StudentAttendanceWhereUniqueInput | StudentAttendanceWhereUniqueInput[]
  }

  export type ClassTimetableUncheckedCreateNestedManyWithoutClassesInput = {
    create?: XOR<ClassTimetableCreateWithoutClassesInput, ClassTimetableUncheckedCreateWithoutClassesInput> | ClassTimetableCreateWithoutClassesInput[] | ClassTimetableUncheckedCreateWithoutClassesInput[]
    connectOrCreate?: ClassTimetableCreateOrConnectWithoutClassesInput | ClassTimetableCreateOrConnectWithoutClassesInput[]
    createMany?: ClassTimetableCreateManyClassesInputEnvelope
    connect?: ClassTimetableWhereUniqueInput | ClassTimetableWhereUniqueInput[]
  }

  export type FeedbackUncheckedCreateNestedManyWithoutClassInput = {
    create?: XOR<FeedbackCreateWithoutClassInput, FeedbackUncheckedCreateWithoutClassInput> | FeedbackCreateWithoutClassInput[] | FeedbackUncheckedCreateWithoutClassInput[]
    connectOrCreate?: FeedbackCreateOrConnectWithoutClassInput | FeedbackCreateOrConnectWithoutClassInput[]
    createMany?: FeedbackCreateManyClassInputEnvelope
    connect?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
  }

  export type SchoolUpdateOneRequiredWithoutClassesNestedInput = {
    create?: XOR<SchoolCreateWithoutClassesInput, SchoolUncheckedCreateWithoutClassesInput>
    connectOrCreate?: SchoolCreateOrConnectWithoutClassesInput
    upsert?: SchoolUpsertWithoutClassesInput
    connect?: SchoolWhereUniqueInput
    update?: XOR<XOR<SchoolUpdateToOneWithWhereWithoutClassesInput, SchoolUpdateWithoutClassesInput>, SchoolUncheckedUpdateWithoutClassesInput>
  }

  export type HolidaysUpdateManyWithoutClassesNestedInput = {
    create?: XOR<HolidaysCreateWithoutClassesInput, HolidaysUncheckedCreateWithoutClassesInput> | HolidaysCreateWithoutClassesInput[] | HolidaysUncheckedCreateWithoutClassesInput[]
    connectOrCreate?: HolidaysCreateOrConnectWithoutClassesInput | HolidaysCreateOrConnectWithoutClassesInput[]
    upsert?: HolidaysUpsertWithWhereUniqueWithoutClassesInput | HolidaysUpsertWithWhereUniqueWithoutClassesInput[]
    set?: HolidaysWhereUniqueInput | HolidaysWhereUniqueInput[]
    disconnect?: HolidaysWhereUniqueInput | HolidaysWhereUniqueInput[]
    delete?: HolidaysWhereUniqueInput | HolidaysWhereUniqueInput[]
    connect?: HolidaysWhereUniqueInput | HolidaysWhereUniqueInput[]
    update?: HolidaysUpdateWithWhereUniqueWithoutClassesInput | HolidaysUpdateWithWhereUniqueWithoutClassesInput[]
    updateMany?: HolidaysUpdateManyWithWhereWithoutClassesInput | HolidaysUpdateManyWithWhereWithoutClassesInput[]
    deleteMany?: HolidaysScalarWhereInput | HolidaysScalarWhereInput[]
  }

  export type StudentUpdateManyWithoutClassNestedInput = {
    create?: XOR<StudentCreateWithoutClassInput, StudentUncheckedCreateWithoutClassInput> | StudentCreateWithoutClassInput[] | StudentUncheckedCreateWithoutClassInput[]
    connectOrCreate?: StudentCreateOrConnectWithoutClassInput | StudentCreateOrConnectWithoutClassInput[]
    upsert?: StudentUpsertWithWhereUniqueWithoutClassInput | StudentUpsertWithWhereUniqueWithoutClassInput[]
    createMany?: StudentCreateManyClassInputEnvelope
    set?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    disconnect?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    delete?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    connect?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    update?: StudentUpdateWithWhereUniqueWithoutClassInput | StudentUpdateWithWhereUniqueWithoutClassInput[]
    updateMany?: StudentUpdateManyWithWhereWithoutClassInput | StudentUpdateManyWithWhereWithoutClassInput[]
    deleteMany?: StudentScalarWhereInput | StudentScalarWhereInput[]
  }

  export type StudentAttendanceUpdateManyWithoutClassNestedInput = {
    create?: XOR<StudentAttendanceCreateWithoutClassInput, StudentAttendanceUncheckedCreateWithoutClassInput> | StudentAttendanceCreateWithoutClassInput[] | StudentAttendanceUncheckedCreateWithoutClassInput[]
    connectOrCreate?: StudentAttendanceCreateOrConnectWithoutClassInput | StudentAttendanceCreateOrConnectWithoutClassInput[]
    upsert?: StudentAttendanceUpsertWithWhereUniqueWithoutClassInput | StudentAttendanceUpsertWithWhereUniqueWithoutClassInput[]
    createMany?: StudentAttendanceCreateManyClassInputEnvelope
    set?: StudentAttendanceWhereUniqueInput | StudentAttendanceWhereUniqueInput[]
    disconnect?: StudentAttendanceWhereUniqueInput | StudentAttendanceWhereUniqueInput[]
    delete?: StudentAttendanceWhereUniqueInput | StudentAttendanceWhereUniqueInput[]
    connect?: StudentAttendanceWhereUniqueInput | StudentAttendanceWhereUniqueInput[]
    update?: StudentAttendanceUpdateWithWhereUniqueWithoutClassInput | StudentAttendanceUpdateWithWhereUniqueWithoutClassInput[]
    updateMany?: StudentAttendanceUpdateManyWithWhereWithoutClassInput | StudentAttendanceUpdateManyWithWhereWithoutClassInput[]
    deleteMany?: StudentAttendanceScalarWhereInput | StudentAttendanceScalarWhereInput[]
  }

  export type ClassTimetableUpdateManyWithoutClassesNestedInput = {
    create?: XOR<ClassTimetableCreateWithoutClassesInput, ClassTimetableUncheckedCreateWithoutClassesInput> | ClassTimetableCreateWithoutClassesInput[] | ClassTimetableUncheckedCreateWithoutClassesInput[]
    connectOrCreate?: ClassTimetableCreateOrConnectWithoutClassesInput | ClassTimetableCreateOrConnectWithoutClassesInput[]
    upsert?: ClassTimetableUpsertWithWhereUniqueWithoutClassesInput | ClassTimetableUpsertWithWhereUniqueWithoutClassesInput[]
    createMany?: ClassTimetableCreateManyClassesInputEnvelope
    set?: ClassTimetableWhereUniqueInput | ClassTimetableWhereUniqueInput[]
    disconnect?: ClassTimetableWhereUniqueInput | ClassTimetableWhereUniqueInput[]
    delete?: ClassTimetableWhereUniqueInput | ClassTimetableWhereUniqueInput[]
    connect?: ClassTimetableWhereUniqueInput | ClassTimetableWhereUniqueInput[]
    update?: ClassTimetableUpdateWithWhereUniqueWithoutClassesInput | ClassTimetableUpdateWithWhereUniqueWithoutClassesInput[]
    updateMany?: ClassTimetableUpdateManyWithWhereWithoutClassesInput | ClassTimetableUpdateManyWithWhereWithoutClassesInput[]
    deleteMany?: ClassTimetableScalarWhereInput | ClassTimetableScalarWhereInput[]
  }

  export type FeedbackUpdateManyWithoutClassNestedInput = {
    create?: XOR<FeedbackCreateWithoutClassInput, FeedbackUncheckedCreateWithoutClassInput> | FeedbackCreateWithoutClassInput[] | FeedbackUncheckedCreateWithoutClassInput[]
    connectOrCreate?: FeedbackCreateOrConnectWithoutClassInput | FeedbackCreateOrConnectWithoutClassInput[]
    upsert?: FeedbackUpsertWithWhereUniqueWithoutClassInput | FeedbackUpsertWithWhereUniqueWithoutClassInput[]
    createMany?: FeedbackCreateManyClassInputEnvelope
    set?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    disconnect?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    delete?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    connect?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    update?: FeedbackUpdateWithWhereUniqueWithoutClassInput | FeedbackUpdateWithWhereUniqueWithoutClassInput[]
    updateMany?: FeedbackUpdateManyWithWhereWithoutClassInput | FeedbackUpdateManyWithWhereWithoutClassInput[]
    deleteMany?: FeedbackScalarWhereInput | FeedbackScalarWhereInput[]
  }

  export type HolidaysUncheckedUpdateManyWithoutClassesNestedInput = {
    create?: XOR<HolidaysCreateWithoutClassesInput, HolidaysUncheckedCreateWithoutClassesInput> | HolidaysCreateWithoutClassesInput[] | HolidaysUncheckedCreateWithoutClassesInput[]
    connectOrCreate?: HolidaysCreateOrConnectWithoutClassesInput | HolidaysCreateOrConnectWithoutClassesInput[]
    upsert?: HolidaysUpsertWithWhereUniqueWithoutClassesInput | HolidaysUpsertWithWhereUniqueWithoutClassesInput[]
    set?: HolidaysWhereUniqueInput | HolidaysWhereUniqueInput[]
    disconnect?: HolidaysWhereUniqueInput | HolidaysWhereUniqueInput[]
    delete?: HolidaysWhereUniqueInput | HolidaysWhereUniqueInput[]
    connect?: HolidaysWhereUniqueInput | HolidaysWhereUniqueInput[]
    update?: HolidaysUpdateWithWhereUniqueWithoutClassesInput | HolidaysUpdateWithWhereUniqueWithoutClassesInput[]
    updateMany?: HolidaysUpdateManyWithWhereWithoutClassesInput | HolidaysUpdateManyWithWhereWithoutClassesInput[]
    deleteMany?: HolidaysScalarWhereInput | HolidaysScalarWhereInput[]
  }

  export type StudentUncheckedUpdateManyWithoutClassNestedInput = {
    create?: XOR<StudentCreateWithoutClassInput, StudentUncheckedCreateWithoutClassInput> | StudentCreateWithoutClassInput[] | StudentUncheckedCreateWithoutClassInput[]
    connectOrCreate?: StudentCreateOrConnectWithoutClassInput | StudentCreateOrConnectWithoutClassInput[]
    upsert?: StudentUpsertWithWhereUniqueWithoutClassInput | StudentUpsertWithWhereUniqueWithoutClassInput[]
    createMany?: StudentCreateManyClassInputEnvelope
    set?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    disconnect?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    delete?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    connect?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    update?: StudentUpdateWithWhereUniqueWithoutClassInput | StudentUpdateWithWhereUniqueWithoutClassInput[]
    updateMany?: StudentUpdateManyWithWhereWithoutClassInput | StudentUpdateManyWithWhereWithoutClassInput[]
    deleteMany?: StudentScalarWhereInput | StudentScalarWhereInput[]
  }

  export type StudentAttendanceUncheckedUpdateManyWithoutClassNestedInput = {
    create?: XOR<StudentAttendanceCreateWithoutClassInput, StudentAttendanceUncheckedCreateWithoutClassInput> | StudentAttendanceCreateWithoutClassInput[] | StudentAttendanceUncheckedCreateWithoutClassInput[]
    connectOrCreate?: StudentAttendanceCreateOrConnectWithoutClassInput | StudentAttendanceCreateOrConnectWithoutClassInput[]
    upsert?: StudentAttendanceUpsertWithWhereUniqueWithoutClassInput | StudentAttendanceUpsertWithWhereUniqueWithoutClassInput[]
    createMany?: StudentAttendanceCreateManyClassInputEnvelope
    set?: StudentAttendanceWhereUniqueInput | StudentAttendanceWhereUniqueInput[]
    disconnect?: StudentAttendanceWhereUniqueInput | StudentAttendanceWhereUniqueInput[]
    delete?: StudentAttendanceWhereUniqueInput | StudentAttendanceWhereUniqueInput[]
    connect?: StudentAttendanceWhereUniqueInput | StudentAttendanceWhereUniqueInput[]
    update?: StudentAttendanceUpdateWithWhereUniqueWithoutClassInput | StudentAttendanceUpdateWithWhereUniqueWithoutClassInput[]
    updateMany?: StudentAttendanceUpdateManyWithWhereWithoutClassInput | StudentAttendanceUpdateManyWithWhereWithoutClassInput[]
    deleteMany?: StudentAttendanceScalarWhereInput | StudentAttendanceScalarWhereInput[]
  }

  export type ClassTimetableUncheckedUpdateManyWithoutClassesNestedInput = {
    create?: XOR<ClassTimetableCreateWithoutClassesInput, ClassTimetableUncheckedCreateWithoutClassesInput> | ClassTimetableCreateWithoutClassesInput[] | ClassTimetableUncheckedCreateWithoutClassesInput[]
    connectOrCreate?: ClassTimetableCreateOrConnectWithoutClassesInput | ClassTimetableCreateOrConnectWithoutClassesInput[]
    upsert?: ClassTimetableUpsertWithWhereUniqueWithoutClassesInput | ClassTimetableUpsertWithWhereUniqueWithoutClassesInput[]
    createMany?: ClassTimetableCreateManyClassesInputEnvelope
    set?: ClassTimetableWhereUniqueInput | ClassTimetableWhereUniqueInput[]
    disconnect?: ClassTimetableWhereUniqueInput | ClassTimetableWhereUniqueInput[]
    delete?: ClassTimetableWhereUniqueInput | ClassTimetableWhereUniqueInput[]
    connect?: ClassTimetableWhereUniqueInput | ClassTimetableWhereUniqueInput[]
    update?: ClassTimetableUpdateWithWhereUniqueWithoutClassesInput | ClassTimetableUpdateWithWhereUniqueWithoutClassesInput[]
    updateMany?: ClassTimetableUpdateManyWithWhereWithoutClassesInput | ClassTimetableUpdateManyWithWhereWithoutClassesInput[]
    deleteMany?: ClassTimetableScalarWhereInput | ClassTimetableScalarWhereInput[]
  }

  export type FeedbackUncheckedUpdateManyWithoutClassNestedInput = {
    create?: XOR<FeedbackCreateWithoutClassInput, FeedbackUncheckedCreateWithoutClassInput> | FeedbackCreateWithoutClassInput[] | FeedbackUncheckedCreateWithoutClassInput[]
    connectOrCreate?: FeedbackCreateOrConnectWithoutClassInput | FeedbackCreateOrConnectWithoutClassInput[]
    upsert?: FeedbackUpsertWithWhereUniqueWithoutClassInput | FeedbackUpsertWithWhereUniqueWithoutClassInput[]
    createMany?: FeedbackCreateManyClassInputEnvelope
    set?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    disconnect?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    delete?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    connect?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    update?: FeedbackUpdateWithWhereUniqueWithoutClassInput | FeedbackUpdateWithWhereUniqueWithoutClassInput[]
    updateMany?: FeedbackUpdateManyWithWhereWithoutClassInput | FeedbackUpdateManyWithWhereWithoutClassInput[]
    deleteMany?: FeedbackScalarWhereInput | FeedbackScalarWhereInput[]
  }

  export type SchoolCreateNestedOneWithoutHolidaysInput = {
    create?: XOR<SchoolCreateWithoutHolidaysInput, SchoolUncheckedCreateWithoutHolidaysInput>
    connectOrCreate?: SchoolCreateOrConnectWithoutHolidaysInput
    connect?: SchoolWhereUniqueInput
  }

  export type ClassesCreateNestedManyWithoutHolidaysInput = {
    create?: XOR<ClassesCreateWithoutHolidaysInput, ClassesUncheckedCreateWithoutHolidaysInput> | ClassesCreateWithoutHolidaysInput[] | ClassesUncheckedCreateWithoutHolidaysInput[]
    connectOrCreate?: ClassesCreateOrConnectWithoutHolidaysInput | ClassesCreateOrConnectWithoutHolidaysInput[]
    connect?: ClassesWhereUniqueInput | ClassesWhereUniqueInput[]
  }

  export type ClassesUncheckedCreateNestedManyWithoutHolidaysInput = {
    create?: XOR<ClassesCreateWithoutHolidaysInput, ClassesUncheckedCreateWithoutHolidaysInput> | ClassesCreateWithoutHolidaysInput[] | ClassesUncheckedCreateWithoutHolidaysInput[]
    connectOrCreate?: ClassesCreateOrConnectWithoutHolidaysInput | ClassesCreateOrConnectWithoutHolidaysInput[]
    connect?: ClassesWhereUniqueInput | ClassesWhereUniqueInput[]
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type SchoolUpdateOneWithoutHolidaysNestedInput = {
    create?: XOR<SchoolCreateWithoutHolidaysInput, SchoolUncheckedCreateWithoutHolidaysInput>
    connectOrCreate?: SchoolCreateOrConnectWithoutHolidaysInput
    upsert?: SchoolUpsertWithoutHolidaysInput
    disconnect?: SchoolWhereInput | boolean
    delete?: SchoolWhereInput | boolean
    connect?: SchoolWhereUniqueInput
    update?: XOR<XOR<SchoolUpdateToOneWithWhereWithoutHolidaysInput, SchoolUpdateWithoutHolidaysInput>, SchoolUncheckedUpdateWithoutHolidaysInput>
  }

  export type ClassesUpdateManyWithoutHolidaysNestedInput = {
    create?: XOR<ClassesCreateWithoutHolidaysInput, ClassesUncheckedCreateWithoutHolidaysInput> | ClassesCreateWithoutHolidaysInput[] | ClassesUncheckedCreateWithoutHolidaysInput[]
    connectOrCreate?: ClassesCreateOrConnectWithoutHolidaysInput | ClassesCreateOrConnectWithoutHolidaysInput[]
    upsert?: ClassesUpsertWithWhereUniqueWithoutHolidaysInput | ClassesUpsertWithWhereUniqueWithoutHolidaysInput[]
    set?: ClassesWhereUniqueInput | ClassesWhereUniqueInput[]
    disconnect?: ClassesWhereUniqueInput | ClassesWhereUniqueInput[]
    delete?: ClassesWhereUniqueInput | ClassesWhereUniqueInput[]
    connect?: ClassesWhereUniqueInput | ClassesWhereUniqueInput[]
    update?: ClassesUpdateWithWhereUniqueWithoutHolidaysInput | ClassesUpdateWithWhereUniqueWithoutHolidaysInput[]
    updateMany?: ClassesUpdateManyWithWhereWithoutHolidaysInput | ClassesUpdateManyWithWhereWithoutHolidaysInput[]
    deleteMany?: ClassesScalarWhereInput | ClassesScalarWhereInput[]
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type ClassesUncheckedUpdateManyWithoutHolidaysNestedInput = {
    create?: XOR<ClassesCreateWithoutHolidaysInput, ClassesUncheckedCreateWithoutHolidaysInput> | ClassesCreateWithoutHolidaysInput[] | ClassesUncheckedCreateWithoutHolidaysInput[]
    connectOrCreate?: ClassesCreateOrConnectWithoutHolidaysInput | ClassesCreateOrConnectWithoutHolidaysInput[]
    upsert?: ClassesUpsertWithWhereUniqueWithoutHolidaysInput | ClassesUpsertWithWhereUniqueWithoutHolidaysInput[]
    set?: ClassesWhereUniqueInput | ClassesWhereUniqueInput[]
    disconnect?: ClassesWhereUniqueInput | ClassesWhereUniqueInput[]
    delete?: ClassesWhereUniqueInput | ClassesWhereUniqueInput[]
    connect?: ClassesWhereUniqueInput | ClassesWhereUniqueInput[]
    update?: ClassesUpdateWithWhereUniqueWithoutHolidaysInput | ClassesUpdateWithWhereUniqueWithoutHolidaysInput[]
    updateMany?: ClassesUpdateManyWithWhereWithoutHolidaysInput | ClassesUpdateManyWithWhereWithoutHolidaysInput[]
    deleteMany?: ClassesScalarWhereInput | ClassesScalarWhereInput[]
  }

  export type SchoolCreateNestedOneWithoutStaffInput = {
    create?: XOR<SchoolCreateWithoutStaffInput, SchoolUncheckedCreateWithoutStaffInput>
    connectOrCreate?: SchoolCreateOrConnectWithoutStaffInput
    connect?: SchoolWhereUniqueInput
  }

  export type Attendance_userCreateNestedOneWithoutStaffInput = {
    create?: XOR<Attendance_userCreateWithoutStaffInput, Attendance_userUncheckedCreateWithoutStaffInput>
    connectOrCreate?: Attendance_userCreateOrConnectWithoutStaffInput
    connect?: Attendance_userWhereUniqueInput
  }

  export type StaffAttendanceCreateNestedManyWithoutStaffInput = {
    create?: XOR<StaffAttendanceCreateWithoutStaffInput, StaffAttendanceUncheckedCreateWithoutStaffInput> | StaffAttendanceCreateWithoutStaffInput[] | StaffAttendanceUncheckedCreateWithoutStaffInput[]
    connectOrCreate?: StaffAttendanceCreateOrConnectWithoutStaffInput | StaffAttendanceCreateOrConnectWithoutStaffInput[]
    createMany?: StaffAttendanceCreateManyStaffInputEnvelope
    connect?: StaffAttendanceWhereUniqueInput | StaffAttendanceWhereUniqueInput[]
  }

  export type StaffAttendanceUncheckedCreateNestedManyWithoutStaffInput = {
    create?: XOR<StaffAttendanceCreateWithoutStaffInput, StaffAttendanceUncheckedCreateWithoutStaffInput> | StaffAttendanceCreateWithoutStaffInput[] | StaffAttendanceUncheckedCreateWithoutStaffInput[]
    connectOrCreate?: StaffAttendanceCreateOrConnectWithoutStaffInput | StaffAttendanceCreateOrConnectWithoutStaffInput[]
    createMany?: StaffAttendanceCreateManyStaffInputEnvelope
    connect?: StaffAttendanceWhereUniqueInput | StaffAttendanceWhereUniqueInput[]
  }

  export type NullableEnumGenderFieldUpdateOperationsInput = {
    set?: $Enums.Gender | null
  }

  export type SchoolUpdateOneRequiredWithoutStaffNestedInput = {
    create?: XOR<SchoolCreateWithoutStaffInput, SchoolUncheckedCreateWithoutStaffInput>
    connectOrCreate?: SchoolCreateOrConnectWithoutStaffInput
    upsert?: SchoolUpsertWithoutStaffInput
    connect?: SchoolWhereUniqueInput
    update?: XOR<XOR<SchoolUpdateToOneWithWhereWithoutStaffInput, SchoolUpdateWithoutStaffInput>, SchoolUncheckedUpdateWithoutStaffInput>
  }

  export type Attendance_userUpdateOneRequiredWithoutStaffNestedInput = {
    create?: XOR<Attendance_userCreateWithoutStaffInput, Attendance_userUncheckedCreateWithoutStaffInput>
    connectOrCreate?: Attendance_userCreateOrConnectWithoutStaffInput
    upsert?: Attendance_userUpsertWithoutStaffInput
    connect?: Attendance_userWhereUniqueInput
    update?: XOR<XOR<Attendance_userUpdateToOneWithWhereWithoutStaffInput, Attendance_userUpdateWithoutStaffInput>, Attendance_userUncheckedUpdateWithoutStaffInput>
  }

  export type StaffAttendanceUpdateManyWithoutStaffNestedInput = {
    create?: XOR<StaffAttendanceCreateWithoutStaffInput, StaffAttendanceUncheckedCreateWithoutStaffInput> | StaffAttendanceCreateWithoutStaffInput[] | StaffAttendanceUncheckedCreateWithoutStaffInput[]
    connectOrCreate?: StaffAttendanceCreateOrConnectWithoutStaffInput | StaffAttendanceCreateOrConnectWithoutStaffInput[]
    upsert?: StaffAttendanceUpsertWithWhereUniqueWithoutStaffInput | StaffAttendanceUpsertWithWhereUniqueWithoutStaffInput[]
    createMany?: StaffAttendanceCreateManyStaffInputEnvelope
    set?: StaffAttendanceWhereUniqueInput | StaffAttendanceWhereUniqueInput[]
    disconnect?: StaffAttendanceWhereUniqueInput | StaffAttendanceWhereUniqueInput[]
    delete?: StaffAttendanceWhereUniqueInput | StaffAttendanceWhereUniqueInput[]
    connect?: StaffAttendanceWhereUniqueInput | StaffAttendanceWhereUniqueInput[]
    update?: StaffAttendanceUpdateWithWhereUniqueWithoutStaffInput | StaffAttendanceUpdateWithWhereUniqueWithoutStaffInput[]
    updateMany?: StaffAttendanceUpdateManyWithWhereWithoutStaffInput | StaffAttendanceUpdateManyWithWhereWithoutStaffInput[]
    deleteMany?: StaffAttendanceScalarWhereInput | StaffAttendanceScalarWhereInput[]
  }

  export type StaffAttendanceUncheckedUpdateManyWithoutStaffNestedInput = {
    create?: XOR<StaffAttendanceCreateWithoutStaffInput, StaffAttendanceUncheckedCreateWithoutStaffInput> | StaffAttendanceCreateWithoutStaffInput[] | StaffAttendanceUncheckedCreateWithoutStaffInput[]
    connectOrCreate?: StaffAttendanceCreateOrConnectWithoutStaffInput | StaffAttendanceCreateOrConnectWithoutStaffInput[]
    upsert?: StaffAttendanceUpsertWithWhereUniqueWithoutStaffInput | StaffAttendanceUpsertWithWhereUniqueWithoutStaffInput[]
    createMany?: StaffAttendanceCreateManyStaffInputEnvelope
    set?: StaffAttendanceWhereUniqueInput | StaffAttendanceWhereUniqueInput[]
    disconnect?: StaffAttendanceWhereUniqueInput | StaffAttendanceWhereUniqueInput[]
    delete?: StaffAttendanceWhereUniqueInput | StaffAttendanceWhereUniqueInput[]
    connect?: StaffAttendanceWhereUniqueInput | StaffAttendanceWhereUniqueInput[]
    update?: StaffAttendanceUpdateWithWhereUniqueWithoutStaffInput | StaffAttendanceUpdateWithWhereUniqueWithoutStaffInput[]
    updateMany?: StaffAttendanceUpdateManyWithWhereWithoutStaffInput | StaffAttendanceUpdateManyWithWhereWithoutStaffInput[]
    deleteMany?: StaffAttendanceScalarWhereInput | StaffAttendanceScalarWhereInput[]
  }

  export type SchoolCreateNestedOneWithoutStaffAttendancesInput = {
    create?: XOR<SchoolCreateWithoutStaffAttendancesInput, SchoolUncheckedCreateWithoutStaffAttendancesInput>
    connectOrCreate?: SchoolCreateOrConnectWithoutStaffAttendancesInput
    connect?: SchoolWhereUniqueInput
  }

  export type StaffCreateNestedOneWithoutAttendancesInput = {
    create?: XOR<StaffCreateWithoutAttendancesInput, StaffUncheckedCreateWithoutAttendancesInput>
    connectOrCreate?: StaffCreateOrConnectWithoutAttendancesInput
    connect?: StaffWhereUniqueInput
  }

  export type SchoolUpdateOneWithoutStaffAttendancesNestedInput = {
    create?: XOR<SchoolCreateWithoutStaffAttendancesInput, SchoolUncheckedCreateWithoutStaffAttendancesInput>
    connectOrCreate?: SchoolCreateOrConnectWithoutStaffAttendancesInput
    upsert?: SchoolUpsertWithoutStaffAttendancesInput
    disconnect?: SchoolWhereInput | boolean
    delete?: SchoolWhereInput | boolean
    connect?: SchoolWhereUniqueInput
    update?: XOR<XOR<SchoolUpdateToOneWithWhereWithoutStaffAttendancesInput, SchoolUpdateWithoutStaffAttendancesInput>, SchoolUncheckedUpdateWithoutStaffAttendancesInput>
  }

  export type StaffUpdateOneRequiredWithoutAttendancesNestedInput = {
    create?: XOR<StaffCreateWithoutAttendancesInput, StaffUncheckedCreateWithoutAttendancesInput>
    connectOrCreate?: StaffCreateOrConnectWithoutAttendancesInput
    upsert?: StaffUpsertWithoutAttendancesInput
    connect?: StaffWhereUniqueInput
    update?: XOR<XOR<StaffUpdateToOneWithWhereWithoutAttendancesInput, StaffUpdateWithoutAttendancesInput>, StaffUncheckedUpdateWithoutAttendancesInput>
  }

  export type ClassesCreateNestedOneWithoutStudentsInput = {
    create?: XOR<ClassesCreateWithoutStudentsInput, ClassesUncheckedCreateWithoutStudentsInput>
    connectOrCreate?: ClassesCreateOrConnectWithoutStudentsInput
    connect?: ClassesWhereUniqueInput
  }

  export type SchoolCreateNestedOneWithoutStudentsInput = {
    create?: XOR<SchoolCreateWithoutStudentsInput, SchoolUncheckedCreateWithoutStudentsInput>
    connectOrCreate?: SchoolCreateOrConnectWithoutStudentsInput
    connect?: SchoolWhereUniqueInput
  }

  export type Attendance_userCreateNestedOneWithoutStudentsInput = {
    create?: XOR<Attendance_userCreateWithoutStudentsInput, Attendance_userUncheckedCreateWithoutStudentsInput>
    connectOrCreate?: Attendance_userCreateOrConnectWithoutStudentsInput
    connect?: Attendance_userWhereUniqueInput
  }

  export type StudentAttendanceCreateNestedManyWithoutStudentInput = {
    create?: XOR<StudentAttendanceCreateWithoutStudentInput, StudentAttendanceUncheckedCreateWithoutStudentInput> | StudentAttendanceCreateWithoutStudentInput[] | StudentAttendanceUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: StudentAttendanceCreateOrConnectWithoutStudentInput | StudentAttendanceCreateOrConnectWithoutStudentInput[]
    createMany?: StudentAttendanceCreateManyStudentInputEnvelope
    connect?: StudentAttendanceWhereUniqueInput | StudentAttendanceWhereUniqueInput[]
  }

  export type StudentAttendanceUncheckedCreateNestedManyWithoutStudentInput = {
    create?: XOR<StudentAttendanceCreateWithoutStudentInput, StudentAttendanceUncheckedCreateWithoutStudentInput> | StudentAttendanceCreateWithoutStudentInput[] | StudentAttendanceUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: StudentAttendanceCreateOrConnectWithoutStudentInput | StudentAttendanceCreateOrConnectWithoutStudentInput[]
    createMany?: StudentAttendanceCreateManyStudentInputEnvelope
    connect?: StudentAttendanceWhereUniqueInput | StudentAttendanceWhereUniqueInput[]
  }

  export type NullableBytesFieldUpdateOperationsInput = {
    set?: Uint8Array | null
  }

  export type ClassesUpdateOneRequiredWithoutStudentsNestedInput = {
    create?: XOR<ClassesCreateWithoutStudentsInput, ClassesUncheckedCreateWithoutStudentsInput>
    connectOrCreate?: ClassesCreateOrConnectWithoutStudentsInput
    upsert?: ClassesUpsertWithoutStudentsInput
    connect?: ClassesWhereUniqueInput
    update?: XOR<XOR<ClassesUpdateToOneWithWhereWithoutStudentsInput, ClassesUpdateWithoutStudentsInput>, ClassesUncheckedUpdateWithoutStudentsInput>
  }

  export type SchoolUpdateOneRequiredWithoutStudentsNestedInput = {
    create?: XOR<SchoolCreateWithoutStudentsInput, SchoolUncheckedCreateWithoutStudentsInput>
    connectOrCreate?: SchoolCreateOrConnectWithoutStudentsInput
    upsert?: SchoolUpsertWithoutStudentsInput
    connect?: SchoolWhereUniqueInput
    update?: XOR<XOR<SchoolUpdateToOneWithWhereWithoutStudentsInput, SchoolUpdateWithoutStudentsInput>, SchoolUncheckedUpdateWithoutStudentsInput>
  }

  export type Attendance_userUpdateOneRequiredWithoutStudentsNestedInput = {
    create?: XOR<Attendance_userCreateWithoutStudentsInput, Attendance_userUncheckedCreateWithoutStudentsInput>
    connectOrCreate?: Attendance_userCreateOrConnectWithoutStudentsInput
    upsert?: Attendance_userUpsertWithoutStudentsInput
    connect?: Attendance_userWhereUniqueInput
    update?: XOR<XOR<Attendance_userUpdateToOneWithWhereWithoutStudentsInput, Attendance_userUpdateWithoutStudentsInput>, Attendance_userUncheckedUpdateWithoutStudentsInput>
  }

  export type StudentAttendanceUpdateManyWithoutStudentNestedInput = {
    create?: XOR<StudentAttendanceCreateWithoutStudentInput, StudentAttendanceUncheckedCreateWithoutStudentInput> | StudentAttendanceCreateWithoutStudentInput[] | StudentAttendanceUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: StudentAttendanceCreateOrConnectWithoutStudentInput | StudentAttendanceCreateOrConnectWithoutStudentInput[]
    upsert?: StudentAttendanceUpsertWithWhereUniqueWithoutStudentInput | StudentAttendanceUpsertWithWhereUniqueWithoutStudentInput[]
    createMany?: StudentAttendanceCreateManyStudentInputEnvelope
    set?: StudentAttendanceWhereUniqueInput | StudentAttendanceWhereUniqueInput[]
    disconnect?: StudentAttendanceWhereUniqueInput | StudentAttendanceWhereUniqueInput[]
    delete?: StudentAttendanceWhereUniqueInput | StudentAttendanceWhereUniqueInput[]
    connect?: StudentAttendanceWhereUniqueInput | StudentAttendanceWhereUniqueInput[]
    update?: StudentAttendanceUpdateWithWhereUniqueWithoutStudentInput | StudentAttendanceUpdateWithWhereUniqueWithoutStudentInput[]
    updateMany?: StudentAttendanceUpdateManyWithWhereWithoutStudentInput | StudentAttendanceUpdateManyWithWhereWithoutStudentInput[]
    deleteMany?: StudentAttendanceScalarWhereInput | StudentAttendanceScalarWhereInput[]
  }

  export type StudentAttendanceUncheckedUpdateManyWithoutStudentNestedInput = {
    create?: XOR<StudentAttendanceCreateWithoutStudentInput, StudentAttendanceUncheckedCreateWithoutStudentInput> | StudentAttendanceCreateWithoutStudentInput[] | StudentAttendanceUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: StudentAttendanceCreateOrConnectWithoutStudentInput | StudentAttendanceCreateOrConnectWithoutStudentInput[]
    upsert?: StudentAttendanceUpsertWithWhereUniqueWithoutStudentInput | StudentAttendanceUpsertWithWhereUniqueWithoutStudentInput[]
    createMany?: StudentAttendanceCreateManyStudentInputEnvelope
    set?: StudentAttendanceWhereUniqueInput | StudentAttendanceWhereUniqueInput[]
    disconnect?: StudentAttendanceWhereUniqueInput | StudentAttendanceWhereUniqueInput[]
    delete?: StudentAttendanceWhereUniqueInput | StudentAttendanceWhereUniqueInput[]
    connect?: StudentAttendanceWhereUniqueInput | StudentAttendanceWhereUniqueInput[]
    update?: StudentAttendanceUpdateWithWhereUniqueWithoutStudentInput | StudentAttendanceUpdateWithWhereUniqueWithoutStudentInput[]
    updateMany?: StudentAttendanceUpdateManyWithWhereWithoutStudentInput | StudentAttendanceUpdateManyWithWhereWithoutStudentInput[]
    deleteMany?: StudentAttendanceScalarWhereInput | StudentAttendanceScalarWhereInput[]
  }

  export type ClassesCreateNestedOneWithoutStudentAttendanceInput = {
    create?: XOR<ClassesCreateWithoutStudentAttendanceInput, ClassesUncheckedCreateWithoutStudentAttendanceInput>
    connectOrCreate?: ClassesCreateOrConnectWithoutStudentAttendanceInput
    connect?: ClassesWhereUniqueInput
  }

  export type StudentCreateNestedOneWithoutAttendanceInput = {
    create?: XOR<StudentCreateWithoutAttendanceInput, StudentUncheckedCreateWithoutAttendanceInput>
    connectOrCreate?: StudentCreateOrConnectWithoutAttendanceInput
    connect?: StudentWhereUniqueInput
  }

  export type SchoolCreateNestedOneWithoutStudentAttendancesInput = {
    create?: XOR<SchoolCreateWithoutStudentAttendancesInput, SchoolUncheckedCreateWithoutStudentAttendancesInput>
    connectOrCreate?: SchoolCreateOrConnectWithoutStudentAttendancesInput
    connect?: SchoolWhereUniqueInput
  }

  export type ClassesUpdateOneRequiredWithoutStudentAttendanceNestedInput = {
    create?: XOR<ClassesCreateWithoutStudentAttendanceInput, ClassesUncheckedCreateWithoutStudentAttendanceInput>
    connectOrCreate?: ClassesCreateOrConnectWithoutStudentAttendanceInput
    upsert?: ClassesUpsertWithoutStudentAttendanceInput
    connect?: ClassesWhereUniqueInput
    update?: XOR<XOR<ClassesUpdateToOneWithWhereWithoutStudentAttendanceInput, ClassesUpdateWithoutStudentAttendanceInput>, ClassesUncheckedUpdateWithoutStudentAttendanceInput>
  }

  export type StudentUpdateOneRequiredWithoutAttendanceNestedInput = {
    create?: XOR<StudentCreateWithoutAttendanceInput, StudentUncheckedCreateWithoutAttendanceInput>
    connectOrCreate?: StudentCreateOrConnectWithoutAttendanceInput
    upsert?: StudentUpsertWithoutAttendanceInput
    connect?: StudentWhereUniqueInput
    update?: XOR<XOR<StudentUpdateToOneWithWhereWithoutAttendanceInput, StudentUpdateWithoutAttendanceInput>, StudentUncheckedUpdateWithoutAttendanceInput>
  }

  export type SchoolUpdateOneRequiredWithoutStudentAttendancesNestedInput = {
    create?: XOR<SchoolCreateWithoutStudentAttendancesInput, SchoolUncheckedCreateWithoutStudentAttendancesInput>
    connectOrCreate?: SchoolCreateOrConnectWithoutStudentAttendancesInput
    upsert?: SchoolUpsertWithoutStudentAttendancesInput
    connect?: SchoolWhereUniqueInput
    update?: XOR<XOR<SchoolUpdateToOneWithWhereWithoutStudentAttendancesInput, SchoolUpdateWithoutStudentAttendancesInput>, SchoolUncheckedUpdateWithoutStudentAttendancesInput>
  }

  export type SchoolCreateNestedOneWithoutClassTimetablesInput = {
    create?: XOR<SchoolCreateWithoutClassTimetablesInput, SchoolUncheckedCreateWithoutClassTimetablesInput>
    connectOrCreate?: SchoolCreateOrConnectWithoutClassTimetablesInput
    connect?: SchoolWhereUniqueInput
  }

  export type ClassesCreateNestedOneWithoutClassTimetablesInput = {
    create?: XOR<ClassesCreateWithoutClassTimetablesInput, ClassesUncheckedCreateWithoutClassTimetablesInput>
    connectOrCreate?: ClassesCreateOrConnectWithoutClassTimetablesInput
    connect?: ClassesWhereUniqueInput
  }

  export type EnumDayOfWeekFieldUpdateOperationsInput = {
    set?: $Enums.DayOfWeek
  }

  export type SchoolUpdateOneWithoutClassTimetablesNestedInput = {
    create?: XOR<SchoolCreateWithoutClassTimetablesInput, SchoolUncheckedCreateWithoutClassTimetablesInput>
    connectOrCreate?: SchoolCreateOrConnectWithoutClassTimetablesInput
    upsert?: SchoolUpsertWithoutClassTimetablesInput
    disconnect?: SchoolWhereInput | boolean
    delete?: SchoolWhereInput | boolean
    connect?: SchoolWhereUniqueInput
    update?: XOR<XOR<SchoolUpdateToOneWithWhereWithoutClassTimetablesInput, SchoolUpdateWithoutClassTimetablesInput>, SchoolUncheckedUpdateWithoutClassTimetablesInput>
  }

  export type ClassesUpdateOneWithoutClassTimetablesNestedInput = {
    create?: XOR<ClassesCreateWithoutClassTimetablesInput, ClassesUncheckedCreateWithoutClassTimetablesInput>
    connectOrCreate?: ClassesCreateOrConnectWithoutClassTimetablesInput
    upsert?: ClassesUpsertWithoutClassTimetablesInput
    disconnect?: ClassesWhereInput | boolean
    delete?: ClassesWhereInput | boolean
    connect?: ClassesWhereUniqueInput
    update?: XOR<XOR<ClassesUpdateToOneWithWhereWithoutClassTimetablesInput, ClassesUpdateWithoutClassTimetablesInput>, ClassesUncheckedUpdateWithoutClassTimetablesInput>
  }

  export type SchoolCreateNestedOneWithoutFeedbacksInput = {
    create?: XOR<SchoolCreateWithoutFeedbacksInput, SchoolUncheckedCreateWithoutFeedbacksInput>
    connectOrCreate?: SchoolCreateOrConnectWithoutFeedbacksInput
    connect?: SchoolWhereUniqueInput
  }

  export type ClassesCreateNestedOneWithoutFeedbacksInput = {
    create?: XOR<ClassesCreateWithoutFeedbacksInput, ClassesUncheckedCreateWithoutFeedbacksInput>
    connectOrCreate?: ClassesCreateOrConnectWithoutFeedbacksInput
    connect?: ClassesWhereUniqueInput
  }

  export type SchoolUpdateOneRequiredWithoutFeedbacksNestedInput = {
    create?: XOR<SchoolCreateWithoutFeedbacksInput, SchoolUncheckedCreateWithoutFeedbacksInput>
    connectOrCreate?: SchoolCreateOrConnectWithoutFeedbacksInput
    upsert?: SchoolUpsertWithoutFeedbacksInput
    connect?: SchoolWhereUniqueInput
    update?: XOR<XOR<SchoolUpdateToOneWithWhereWithoutFeedbacksInput, SchoolUpdateWithoutFeedbacksInput>, SchoolUncheckedUpdateWithoutFeedbacksInput>
  }

  export type ClassesUpdateOneRequiredWithoutFeedbacksNestedInput = {
    create?: XOR<ClassesCreateWithoutFeedbacksInput, ClassesUncheckedCreateWithoutFeedbacksInput>
    connectOrCreate?: ClassesCreateOrConnectWithoutFeedbacksInput
    upsert?: ClassesUpsertWithoutFeedbacksInput
    connect?: ClassesWhereUniqueInput
    update?: XOR<XOR<ClassesUpdateToOneWithWhereWithoutFeedbacksInput, ClassesUpdateWithoutFeedbacksInput>, ClassesUncheckedUpdateWithoutFeedbacksInput>
  }

  export type SchoolCreateNestedOneWithoutAdminsInput = {
    create?: XOR<SchoolCreateWithoutAdminsInput, SchoolUncheckedCreateWithoutAdminsInput>
    connectOrCreate?: SchoolCreateOrConnectWithoutAdminsInput
    connect?: SchoolWhereUniqueInput
  }

  export type Attendance_userCreateNestedOneWithoutAdminInput = {
    create?: XOR<Attendance_userCreateWithoutAdminInput, Attendance_userUncheckedCreateWithoutAdminInput>
    connectOrCreate?: Attendance_userCreateOrConnectWithoutAdminInput
    connect?: Attendance_userWhereUniqueInput
  }

  export type SchoolUpdateOneRequiredWithoutAdminsNestedInput = {
    create?: XOR<SchoolCreateWithoutAdminsInput, SchoolUncheckedCreateWithoutAdminsInput>
    connectOrCreate?: SchoolCreateOrConnectWithoutAdminsInput
    upsert?: SchoolUpsertWithoutAdminsInput
    connect?: SchoolWhereUniqueInput
    update?: XOR<XOR<SchoolUpdateToOneWithWhereWithoutAdminsInput, SchoolUpdateWithoutAdminsInput>, SchoolUncheckedUpdateWithoutAdminsInput>
  }

  export type Attendance_userUpdateOneRequiredWithoutAdminNestedInput = {
    create?: XOR<Attendance_userCreateWithoutAdminInput, Attendance_userUncheckedCreateWithoutAdminInput>
    connectOrCreate?: Attendance_userCreateOrConnectWithoutAdminInput
    upsert?: Attendance_userUpsertWithoutAdminInput
    connect?: Attendance_userWhereUniqueInput
    update?: XOR<XOR<Attendance_userUpdateToOneWithWhereWithoutAdminInput, Attendance_userUpdateWithoutAdminInput>, Attendance_userUncheckedUpdateWithoutAdminInput>
  }

  export type SchoolCreateNestedOneWithoutMessagesInput = {
    create?: XOR<SchoolCreateWithoutMessagesInput, SchoolUncheckedCreateWithoutMessagesInput>
    connectOrCreate?: SchoolCreateOrConnectWithoutMessagesInput
    connect?: SchoolWhereUniqueInput
  }

  export type SchoolUpdateOneRequiredWithoutMessagesNestedInput = {
    create?: XOR<SchoolCreateWithoutMessagesInput, SchoolUncheckedCreateWithoutMessagesInput>
    connectOrCreate?: SchoolCreateOrConnectWithoutMessagesInput
    upsert?: SchoolUpsertWithoutMessagesInput
    connect?: SchoolWhereUniqueInput
    update?: XOR<XOR<SchoolUpdateToOneWithWhereWithoutMessagesInput, SchoolUpdateWithoutMessagesInput>, SchoolUncheckedUpdateWithoutMessagesInput>
  }

  export type EnumRoleFieldUpdateOperationsInput = {
    set?: $Enums.Role
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedBytesFilter<$PrismaModel = never> = {
    equals?: Uint8Array | BytesFieldRefInput<$PrismaModel>
    in?: Uint8Array[]
    notIn?: Uint8Array[]
    not?: NestedBytesFilter<$PrismaModel> | Uint8Array
  }

  export type NestedBytesWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Uint8Array | BytesFieldRefInput<$PrismaModel>
    in?: Uint8Array[]
    notIn?: Uint8Array[]
    not?: NestedBytesWithAggregatesFilter<$PrismaModel> | Uint8Array
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBytesFilter<$PrismaModel>
    _max?: NestedBytesFilter<$PrismaModel>
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }
  export type NestedJsonFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<NestedJsonFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue
    lte?: InputJsonValue
    gt?: InputJsonValue
    gte?: InputJsonValue
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedEnumGenderNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.Gender | EnumGenderFieldRefInput<$PrismaModel> | null
    in?: $Enums.Gender[] | null
    notIn?: $Enums.Gender[] | null
    not?: NestedEnumGenderNullableFilter<$PrismaModel> | $Enums.Gender | null
  }

  export type NestedEnumGenderNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Gender | EnumGenderFieldRefInput<$PrismaModel> | null
    in?: $Enums.Gender[] | null
    notIn?: $Enums.Gender[] | null
    not?: NestedEnumGenderNullableWithAggregatesFilter<$PrismaModel> | $Enums.Gender | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumGenderNullableFilter<$PrismaModel>
    _max?: NestedEnumGenderNullableFilter<$PrismaModel>
  }

  export type NestedBytesNullableFilter<$PrismaModel = never> = {
    equals?: Uint8Array | BytesFieldRefInput<$PrismaModel> | null
    in?: Uint8Array[] | null
    notIn?: Uint8Array[] | null
    not?: NestedBytesNullableFilter<$PrismaModel> | Uint8Array | null
  }

  export type NestedBytesNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Uint8Array | BytesFieldRefInput<$PrismaModel> | null
    in?: Uint8Array[] | null
    notIn?: Uint8Array[] | null
    not?: NestedBytesNullableWithAggregatesFilter<$PrismaModel> | Uint8Array | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedBytesNullableFilter<$PrismaModel>
    _max?: NestedBytesNullableFilter<$PrismaModel>
  }

  export type NestedEnumDayOfWeekFilter<$PrismaModel = never> = {
    equals?: $Enums.DayOfWeek | EnumDayOfWeekFieldRefInput<$PrismaModel>
    in?: $Enums.DayOfWeek[]
    notIn?: $Enums.DayOfWeek[]
    not?: NestedEnumDayOfWeekFilter<$PrismaModel> | $Enums.DayOfWeek
  }

  export type NestedEnumDayOfWeekWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.DayOfWeek | EnumDayOfWeekFieldRefInput<$PrismaModel>
    in?: $Enums.DayOfWeek[]
    notIn?: $Enums.DayOfWeek[]
    not?: NestedEnumDayOfWeekWithAggregatesFilter<$PrismaModel> | $Enums.DayOfWeek
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumDayOfWeekFilter<$PrismaModel>
    _max?: NestedEnumDayOfWeekFilter<$PrismaModel>
  }

  export type NestedEnumRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[]
    notIn?: $Enums.Role[]
    not?: NestedEnumRoleFilter<$PrismaModel> | $Enums.Role
  }

  export type NestedEnumRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[]
    notIn?: $Enums.Role[]
    not?: NestedEnumRoleWithAggregatesFilter<$PrismaModel> | $Enums.Role
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoleFilter<$PrismaModel>
    _max?: NestedEnumRoleFilter<$PrismaModel>
  }

  export type SchoolCreateWithoutUsersInput = {
    name: string
    address: string
    photo: Uint8Array
    staff?: StaffCreateNestedManyWithoutSchoolInput
    classes?: ClassesCreateNestedManyWithoutSchoolInput
    holidays?: HolidaysCreateNestedManyWithoutSchoolInput
    students?: StudentCreateNestedManyWithoutSchoolInput
    feedbacks?: FeedbackCreateNestedManyWithoutSchoolInput
    classTimetables?: ClassTimetableCreateNestedManyWithoutSchoolInput
    staffAttendances?: StaffAttendanceCreateNestedManyWithoutSchoolInput
    studentAttendances?: StudentAttendanceCreateNestedManyWithoutSchoolInput
    admins?: AdminCreateNestedManyWithoutSchoolInput
    Messages?: MessagesCreateNestedManyWithoutSchoolInput
  }

  export type SchoolUncheckedCreateWithoutUsersInput = {
    id?: number
    name: string
    address: string
    photo: Uint8Array
    staff?: StaffUncheckedCreateNestedManyWithoutSchoolInput
    classes?: ClassesUncheckedCreateNestedManyWithoutSchoolInput
    holidays?: HolidaysUncheckedCreateNestedManyWithoutSchoolInput
    students?: StudentUncheckedCreateNestedManyWithoutSchoolInput
    feedbacks?: FeedbackUncheckedCreateNestedManyWithoutSchoolInput
    classTimetables?: ClassTimetableUncheckedCreateNestedManyWithoutSchoolInput
    staffAttendances?: StaffAttendanceUncheckedCreateNestedManyWithoutSchoolInput
    studentAttendances?: StudentAttendanceUncheckedCreateNestedManyWithoutSchoolInput
    admins?: AdminUncheckedCreateNestedManyWithoutSchoolInput
    Messages?: MessagesUncheckedCreateNestedManyWithoutSchoolInput
  }

  export type SchoolCreateOrConnectWithoutUsersInput = {
    where: SchoolWhereUniqueInput
    create: XOR<SchoolCreateWithoutUsersInput, SchoolUncheckedCreateWithoutUsersInput>
  }

  export type StaffCreateWithoutUserInput = {
    designation: string
    name?: string | null
    email: string
    gender?: $Enums.Gender | null
    mobile: string
    password: string
    school: SchoolCreateNestedOneWithoutStaffInput
    attendances?: StaffAttendanceCreateNestedManyWithoutStaffInput
  }

  export type StaffUncheckedCreateWithoutUserInput = {
    id?: number
    designation: string
    name?: string | null
    email: string
    gender?: $Enums.Gender | null
    mobile: string
    school_id: number
    password: string
    attendances?: StaffAttendanceUncheckedCreateNestedManyWithoutStaffInput
  }

  export type StaffCreateOrConnectWithoutUserInput = {
    where: StaffWhereUniqueInput
    create: XOR<StaffCreateWithoutUserInput, StaffUncheckedCreateWithoutUserInput>
  }

  export type StudentCreateWithoutUserInput = {
    name?: string | null
    gender?: $Enums.Gender | null
    email: string
    mobile: string
    photo?: Uint8Array | null
    password: string
    class: ClassesCreateNestedOneWithoutStudentsInput
    school: SchoolCreateNestedOneWithoutStudentsInput
    attendance?: StudentAttendanceCreateNestedManyWithoutStudentInput
  }

  export type StudentUncheckedCreateWithoutUserInput = {
    id?: number
    name?: string | null
    gender?: $Enums.Gender | null
    email: string
    mobile: string
    class_id: number
    school_id: number
    photo?: Uint8Array | null
    password: string
    attendance?: StudentAttendanceUncheckedCreateNestedManyWithoutStudentInput
  }

  export type StudentCreateOrConnectWithoutUserInput = {
    where: StudentWhereUniqueInput
    create: XOR<StudentCreateWithoutUserInput, StudentUncheckedCreateWithoutUserInput>
  }

  export type StudentCreateManyUserInputEnvelope = {
    data: StudentCreateManyUserInput | StudentCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type AdminCreateWithoutUserInput = {
    name?: string | null
    designation: string
    gender?: string
    mobile: string
    email?: string
    photo?: Uint8Array | null
    school: SchoolCreateNestedOneWithoutAdminsInput
  }

  export type AdminUncheckedCreateWithoutUserInput = {
    id?: number
    name?: string | null
    designation: string
    gender?: string
    mobile: string
    email?: string
    photo?: Uint8Array | null
    school_id: number
  }

  export type AdminCreateOrConnectWithoutUserInput = {
    where: AdminWhereUniqueInput
    create: XOR<AdminCreateWithoutUserInput, AdminUncheckedCreateWithoutUserInput>
  }

  export type SchoolUpsertWithoutUsersInput = {
    update: XOR<SchoolUpdateWithoutUsersInput, SchoolUncheckedUpdateWithoutUsersInput>
    create: XOR<SchoolCreateWithoutUsersInput, SchoolUncheckedCreateWithoutUsersInput>
    where?: SchoolWhereInput
  }

  export type SchoolUpdateToOneWithWhereWithoutUsersInput = {
    where?: SchoolWhereInput
    data: XOR<SchoolUpdateWithoutUsersInput, SchoolUncheckedUpdateWithoutUsersInput>
  }

  export type SchoolUpdateWithoutUsersInput = {
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    photo?: BytesFieldUpdateOperationsInput | Uint8Array
    staff?: StaffUpdateManyWithoutSchoolNestedInput
    classes?: ClassesUpdateManyWithoutSchoolNestedInput
    holidays?: HolidaysUpdateManyWithoutSchoolNestedInput
    students?: StudentUpdateManyWithoutSchoolNestedInput
    feedbacks?: FeedbackUpdateManyWithoutSchoolNestedInput
    classTimetables?: ClassTimetableUpdateManyWithoutSchoolNestedInput
    staffAttendances?: StaffAttendanceUpdateManyWithoutSchoolNestedInput
    studentAttendances?: StudentAttendanceUpdateManyWithoutSchoolNestedInput
    admins?: AdminUpdateManyWithoutSchoolNestedInput
    Messages?: MessagesUpdateManyWithoutSchoolNestedInput
  }

  export type SchoolUncheckedUpdateWithoutUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    photo?: BytesFieldUpdateOperationsInput | Uint8Array
    staff?: StaffUncheckedUpdateManyWithoutSchoolNestedInput
    classes?: ClassesUncheckedUpdateManyWithoutSchoolNestedInput
    holidays?: HolidaysUncheckedUpdateManyWithoutSchoolNestedInput
    students?: StudentUncheckedUpdateManyWithoutSchoolNestedInput
    feedbacks?: FeedbackUncheckedUpdateManyWithoutSchoolNestedInput
    classTimetables?: ClassTimetableUncheckedUpdateManyWithoutSchoolNestedInput
    staffAttendances?: StaffAttendanceUncheckedUpdateManyWithoutSchoolNestedInput
    studentAttendances?: StudentAttendanceUncheckedUpdateManyWithoutSchoolNestedInput
    admins?: AdminUncheckedUpdateManyWithoutSchoolNestedInput
    Messages?: MessagesUncheckedUpdateManyWithoutSchoolNestedInput
  }

  export type StaffUpsertWithoutUserInput = {
    update: XOR<StaffUpdateWithoutUserInput, StaffUncheckedUpdateWithoutUserInput>
    create: XOR<StaffCreateWithoutUserInput, StaffUncheckedCreateWithoutUserInput>
    where?: StaffWhereInput
  }

  export type StaffUpdateToOneWithWhereWithoutUserInput = {
    where?: StaffWhereInput
    data: XOR<StaffUpdateWithoutUserInput, StaffUncheckedUpdateWithoutUserInput>
  }

  export type StaffUpdateWithoutUserInput = {
    designation?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    gender?: NullableEnumGenderFieldUpdateOperationsInput | $Enums.Gender | null
    mobile?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    school?: SchoolUpdateOneRequiredWithoutStaffNestedInput
    attendances?: StaffAttendanceUpdateManyWithoutStaffNestedInput
  }

  export type StaffUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    designation?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    gender?: NullableEnumGenderFieldUpdateOperationsInput | $Enums.Gender | null
    mobile?: StringFieldUpdateOperationsInput | string
    school_id?: IntFieldUpdateOperationsInput | number
    password?: StringFieldUpdateOperationsInput | string
    attendances?: StaffAttendanceUncheckedUpdateManyWithoutStaffNestedInput
  }

  export type StudentUpsertWithWhereUniqueWithoutUserInput = {
    where: StudentWhereUniqueInput
    update: XOR<StudentUpdateWithoutUserInput, StudentUncheckedUpdateWithoutUserInput>
    create: XOR<StudentCreateWithoutUserInput, StudentUncheckedCreateWithoutUserInput>
  }

  export type StudentUpdateWithWhereUniqueWithoutUserInput = {
    where: StudentWhereUniqueInput
    data: XOR<StudentUpdateWithoutUserInput, StudentUncheckedUpdateWithoutUserInput>
  }

  export type StudentUpdateManyWithWhereWithoutUserInput = {
    where: StudentScalarWhereInput
    data: XOR<StudentUpdateManyMutationInput, StudentUncheckedUpdateManyWithoutUserInput>
  }

  export type StudentScalarWhereInput = {
    AND?: StudentScalarWhereInput | StudentScalarWhereInput[]
    OR?: StudentScalarWhereInput[]
    NOT?: StudentScalarWhereInput | StudentScalarWhereInput[]
    id?: IntFilter<"Student"> | number
    username?: StringFilter<"Student"> | string
    name?: StringNullableFilter<"Student"> | string | null
    gender?: EnumGenderNullableFilter<"Student"> | $Enums.Gender | null
    email?: StringFilter<"Student"> | string
    mobile?: StringFilter<"Student"> | string
    class_id?: IntFilter<"Student"> | number
    school_id?: IntFilter<"Student"> | number
    photo?: BytesNullableFilter<"Student"> | Uint8Array | null
    password?: StringFilter<"Student"> | string
  }

  export type AdminUpsertWithoutUserInput = {
    update: XOR<AdminUpdateWithoutUserInput, AdminUncheckedUpdateWithoutUserInput>
    create: XOR<AdminCreateWithoutUserInput, AdminUncheckedCreateWithoutUserInput>
    where?: AdminWhereInput
  }

  export type AdminUpdateToOneWithWhereWithoutUserInput = {
    where?: AdminWhereInput
    data: XOR<AdminUpdateWithoutUserInput, AdminUncheckedUpdateWithoutUserInput>
  }

  export type AdminUpdateWithoutUserInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    designation?: StringFieldUpdateOperationsInput | string
    gender?: StringFieldUpdateOperationsInput | string
    mobile?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    photo?: NullableBytesFieldUpdateOperationsInput | Uint8Array | null
    school?: SchoolUpdateOneRequiredWithoutAdminsNestedInput
  }

  export type AdminUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    designation?: StringFieldUpdateOperationsInput | string
    gender?: StringFieldUpdateOperationsInput | string
    mobile?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    photo?: NullableBytesFieldUpdateOperationsInput | Uint8Array | null
    school_id?: IntFieldUpdateOperationsInput | number
  }

  export type Attendance_userCreateWithoutSchoolInput = {
    username: string
    password: string
    role: string
    staff?: StaffCreateNestedOneWithoutUserInput
    students?: StudentCreateNestedManyWithoutUserInput
    admin?: AdminCreateNestedOneWithoutUserInput
  }

  export type Attendance_userUncheckedCreateWithoutSchoolInput = {
    id?: number
    username: string
    password: string
    role: string
    staff?: StaffUncheckedCreateNestedOneWithoutUserInput
    students?: StudentUncheckedCreateNestedManyWithoutUserInput
    admin?: AdminUncheckedCreateNestedOneWithoutUserInput
  }

  export type Attendance_userCreateOrConnectWithoutSchoolInput = {
    where: Attendance_userWhereUniqueInput
    create: XOR<Attendance_userCreateWithoutSchoolInput, Attendance_userUncheckedCreateWithoutSchoolInput>
  }

  export type Attendance_userCreateManySchoolInputEnvelope = {
    data: Attendance_userCreateManySchoolInput | Attendance_userCreateManySchoolInput[]
    skipDuplicates?: boolean
  }

  export type StaffCreateWithoutSchoolInput = {
    designation: string
    name?: string | null
    email: string
    gender?: $Enums.Gender | null
    mobile: string
    password: string
    user: Attendance_userCreateNestedOneWithoutStaffInput
    attendances?: StaffAttendanceCreateNestedManyWithoutStaffInput
  }

  export type StaffUncheckedCreateWithoutSchoolInput = {
    id?: number
    username: string
    designation: string
    name?: string | null
    email: string
    gender?: $Enums.Gender | null
    mobile: string
    password: string
    attendances?: StaffAttendanceUncheckedCreateNestedManyWithoutStaffInput
  }

  export type StaffCreateOrConnectWithoutSchoolInput = {
    where: StaffWhereUniqueInput
    create: XOR<StaffCreateWithoutSchoolInput, StaffUncheckedCreateWithoutSchoolInput>
  }

  export type StaffCreateManySchoolInputEnvelope = {
    data: StaffCreateManySchoolInput | StaffCreateManySchoolInput[]
    skipDuplicates?: boolean
  }

  export type ClassesCreateWithoutSchoolInput = {
    class: string
    section: string
    holidays?: HolidaysCreateNestedManyWithoutClassesInput
    students?: StudentCreateNestedManyWithoutClassInput
    studentAttendance?: StudentAttendanceCreateNestedManyWithoutClassInput
    classTimetables?: ClassTimetableCreateNestedManyWithoutClassesInput
    feedbacks?: FeedbackCreateNestedManyWithoutClassInput
  }

  export type ClassesUncheckedCreateWithoutSchoolInput = {
    id?: number
    class: string
    section: string
    holidays?: HolidaysUncheckedCreateNestedManyWithoutClassesInput
    students?: StudentUncheckedCreateNestedManyWithoutClassInput
    studentAttendance?: StudentAttendanceUncheckedCreateNestedManyWithoutClassInput
    classTimetables?: ClassTimetableUncheckedCreateNestedManyWithoutClassesInput
    feedbacks?: FeedbackUncheckedCreateNestedManyWithoutClassInput
  }

  export type ClassesCreateOrConnectWithoutSchoolInput = {
    where: ClassesWhereUniqueInput
    create: XOR<ClassesCreateWithoutSchoolInput, ClassesUncheckedCreateWithoutSchoolInput>
  }

  export type ClassesCreateManySchoolInputEnvelope = {
    data: ClassesCreateManySchoolInput | ClassesCreateManySchoolInput[]
    skipDuplicates?: boolean
  }

  export type HolidaysCreateWithoutSchoolInput = {
    date: Date | string
    reason: string
    class_ids: JsonNullValueInput | InputJsonValue
    fn?: string | null
    an: string
    classes?: ClassesCreateNestedManyWithoutHolidaysInput
  }

  export type HolidaysUncheckedCreateWithoutSchoolInput = {
    id?: number
    date: Date | string
    reason: string
    class_ids: JsonNullValueInput | InputJsonValue
    fn?: string | null
    an: string
    classes?: ClassesUncheckedCreateNestedManyWithoutHolidaysInput
  }

  export type HolidaysCreateOrConnectWithoutSchoolInput = {
    where: HolidaysWhereUniqueInput
    create: XOR<HolidaysCreateWithoutSchoolInput, HolidaysUncheckedCreateWithoutSchoolInput>
  }

  export type HolidaysCreateManySchoolInputEnvelope = {
    data: HolidaysCreateManySchoolInput | HolidaysCreateManySchoolInput[]
    skipDuplicates?: boolean
  }

  export type StudentCreateWithoutSchoolInput = {
    name?: string | null
    gender?: $Enums.Gender | null
    email: string
    mobile: string
    photo?: Uint8Array | null
    password: string
    class: ClassesCreateNestedOneWithoutStudentsInput
    user: Attendance_userCreateNestedOneWithoutStudentsInput
    attendance?: StudentAttendanceCreateNestedManyWithoutStudentInput
  }

  export type StudentUncheckedCreateWithoutSchoolInput = {
    id?: number
    username: string
    name?: string | null
    gender?: $Enums.Gender | null
    email: string
    mobile: string
    class_id: number
    photo?: Uint8Array | null
    password: string
    attendance?: StudentAttendanceUncheckedCreateNestedManyWithoutStudentInput
  }

  export type StudentCreateOrConnectWithoutSchoolInput = {
    where: StudentWhereUniqueInput
    create: XOR<StudentCreateWithoutSchoolInput, StudentUncheckedCreateWithoutSchoolInput>
  }

  export type StudentCreateManySchoolInputEnvelope = {
    data: StudentCreateManySchoolInput | StudentCreateManySchoolInput[]
    skipDuplicates?: boolean
  }

  export type FeedbackCreateWithoutSchoolInput = {
    name: string
    email: string
    feedback: string
    created_at?: Date | string
    class: ClassesCreateNestedOneWithoutFeedbacksInput
  }

  export type FeedbackUncheckedCreateWithoutSchoolInput = {
    id?: number
    name: string
    email: string
    feedback: string
    class_id: number
    created_at?: Date | string
  }

  export type FeedbackCreateOrConnectWithoutSchoolInput = {
    where: FeedbackWhereUniqueInput
    create: XOR<FeedbackCreateWithoutSchoolInput, FeedbackUncheckedCreateWithoutSchoolInput>
  }

  export type FeedbackCreateManySchoolInputEnvelope = {
    data: FeedbackCreateManySchoolInput | FeedbackCreateManySchoolInput[]
    skipDuplicates?: boolean
  }

  export type ClassTimetableCreateWithoutSchoolInput = {
    dayOfWeek: $Enums.DayOfWeek
    periodNumber: number
    subject: string
    Classes?: ClassesCreateNestedOneWithoutClassTimetablesInput
  }

  export type ClassTimetableUncheckedCreateWithoutSchoolInput = {
    id?: number
    classesId?: number | null
    dayOfWeek: $Enums.DayOfWeek
    periodNumber: number
    subject: string
  }

  export type ClassTimetableCreateOrConnectWithoutSchoolInput = {
    where: ClassTimetableWhereUniqueInput
    create: XOR<ClassTimetableCreateWithoutSchoolInput, ClassTimetableUncheckedCreateWithoutSchoolInput>
  }

  export type ClassTimetableCreateManySchoolInputEnvelope = {
    data: ClassTimetableCreateManySchoolInput | ClassTimetableCreateManySchoolInput[]
    skipDuplicates?: boolean
  }

  export type StaffAttendanceCreateWithoutSchoolInput = {
    date: Date | string
    fn_status?: string
    an_status?: string
    staff: StaffCreateNestedOneWithoutAttendancesInput
  }

  export type StaffAttendanceUncheckedCreateWithoutSchoolInput = {
    username: string
    date: Date | string
    fn_status?: string
    an_status?: string
  }

  export type StaffAttendanceCreateOrConnectWithoutSchoolInput = {
    where: StaffAttendanceWhereUniqueInput
    create: XOR<StaffAttendanceCreateWithoutSchoolInput, StaffAttendanceUncheckedCreateWithoutSchoolInput>
  }

  export type StaffAttendanceCreateManySchoolInputEnvelope = {
    data: StaffAttendanceCreateManySchoolInput | StaffAttendanceCreateManySchoolInput[]
    skipDuplicates?: boolean
  }

  export type StudentAttendanceCreateWithoutSchoolInput = {
    date: Date | string
    fn_status?: string
    an_status?: string
    class: ClassesCreateNestedOneWithoutStudentAttendanceInput
    student: StudentCreateNestedOneWithoutAttendanceInput
  }

  export type StudentAttendanceUncheckedCreateWithoutSchoolInput = {
    username: string
    date: Date | string
    fn_status?: string
    an_status?: string
    class_id: number
  }

  export type StudentAttendanceCreateOrConnectWithoutSchoolInput = {
    where: StudentAttendanceWhereUniqueInput
    create: XOR<StudentAttendanceCreateWithoutSchoolInput, StudentAttendanceUncheckedCreateWithoutSchoolInput>
  }

  export type StudentAttendanceCreateManySchoolInputEnvelope = {
    data: StudentAttendanceCreateManySchoolInput | StudentAttendanceCreateManySchoolInput[]
    skipDuplicates?: boolean
  }

  export type AdminCreateWithoutSchoolInput = {
    name?: string | null
    designation: string
    gender?: string
    mobile: string
    email?: string
    photo?: Uint8Array | null
    user: Attendance_userCreateNestedOneWithoutAdminInput
  }

  export type AdminUncheckedCreateWithoutSchoolInput = {
    id?: number
    name?: string | null
    designation: string
    gender?: string
    mobile: string
    email?: string
    photo?: Uint8Array | null
    username: string
  }

  export type AdminCreateOrConnectWithoutSchoolInput = {
    where: AdminWhereUniqueInput
    create: XOR<AdminCreateWithoutSchoolInput, AdminUncheckedCreateWithoutSchoolInput>
  }

  export type AdminCreateManySchoolInputEnvelope = {
    data: AdminCreateManySchoolInput | AdminCreateManySchoolInput[]
    skipDuplicates?: boolean
  }

  export type MessagesCreateWithoutSchoolInput = {
    messages: string
    date?: string | null
  }

  export type MessagesUncheckedCreateWithoutSchoolInput = {
    id?: number
    messages: string
    date?: string | null
  }

  export type MessagesCreateOrConnectWithoutSchoolInput = {
    where: MessagesWhereUniqueInput
    create: XOR<MessagesCreateWithoutSchoolInput, MessagesUncheckedCreateWithoutSchoolInput>
  }

  export type MessagesCreateManySchoolInputEnvelope = {
    data: MessagesCreateManySchoolInput | MessagesCreateManySchoolInput[]
    skipDuplicates?: boolean
  }

  export type Attendance_userUpsertWithWhereUniqueWithoutSchoolInput = {
    where: Attendance_userWhereUniqueInput
    update: XOR<Attendance_userUpdateWithoutSchoolInput, Attendance_userUncheckedUpdateWithoutSchoolInput>
    create: XOR<Attendance_userCreateWithoutSchoolInput, Attendance_userUncheckedCreateWithoutSchoolInput>
  }

  export type Attendance_userUpdateWithWhereUniqueWithoutSchoolInput = {
    where: Attendance_userWhereUniqueInput
    data: XOR<Attendance_userUpdateWithoutSchoolInput, Attendance_userUncheckedUpdateWithoutSchoolInput>
  }

  export type Attendance_userUpdateManyWithWhereWithoutSchoolInput = {
    where: Attendance_userScalarWhereInput
    data: XOR<Attendance_userUpdateManyMutationInput, Attendance_userUncheckedUpdateManyWithoutSchoolInput>
  }

  export type Attendance_userScalarWhereInput = {
    AND?: Attendance_userScalarWhereInput | Attendance_userScalarWhereInput[]
    OR?: Attendance_userScalarWhereInput[]
    NOT?: Attendance_userScalarWhereInput | Attendance_userScalarWhereInput[]
    id?: IntFilter<"Attendance_user"> | number
    username?: StringFilter<"Attendance_user"> | string
    password?: StringFilter<"Attendance_user"> | string
    role?: StringFilter<"Attendance_user"> | string
    school_id?: IntFilter<"Attendance_user"> | number
  }

  export type StaffUpsertWithWhereUniqueWithoutSchoolInput = {
    where: StaffWhereUniqueInput
    update: XOR<StaffUpdateWithoutSchoolInput, StaffUncheckedUpdateWithoutSchoolInput>
    create: XOR<StaffCreateWithoutSchoolInput, StaffUncheckedCreateWithoutSchoolInput>
  }

  export type StaffUpdateWithWhereUniqueWithoutSchoolInput = {
    where: StaffWhereUniqueInput
    data: XOR<StaffUpdateWithoutSchoolInput, StaffUncheckedUpdateWithoutSchoolInput>
  }

  export type StaffUpdateManyWithWhereWithoutSchoolInput = {
    where: StaffScalarWhereInput
    data: XOR<StaffUpdateManyMutationInput, StaffUncheckedUpdateManyWithoutSchoolInput>
  }

  export type StaffScalarWhereInput = {
    AND?: StaffScalarWhereInput | StaffScalarWhereInput[]
    OR?: StaffScalarWhereInput[]
    NOT?: StaffScalarWhereInput | StaffScalarWhereInput[]
    id?: IntFilter<"Staff"> | number
    username?: StringFilter<"Staff"> | string
    designation?: StringFilter<"Staff"> | string
    name?: StringNullableFilter<"Staff"> | string | null
    email?: StringFilter<"Staff"> | string
    gender?: EnumGenderNullableFilter<"Staff"> | $Enums.Gender | null
    mobile?: StringFilter<"Staff"> | string
    school_id?: IntFilter<"Staff"> | number
    password?: StringFilter<"Staff"> | string
  }

  export type ClassesUpsertWithWhereUniqueWithoutSchoolInput = {
    where: ClassesWhereUniqueInput
    update: XOR<ClassesUpdateWithoutSchoolInput, ClassesUncheckedUpdateWithoutSchoolInput>
    create: XOR<ClassesCreateWithoutSchoolInput, ClassesUncheckedCreateWithoutSchoolInput>
  }

  export type ClassesUpdateWithWhereUniqueWithoutSchoolInput = {
    where: ClassesWhereUniqueInput
    data: XOR<ClassesUpdateWithoutSchoolInput, ClassesUncheckedUpdateWithoutSchoolInput>
  }

  export type ClassesUpdateManyWithWhereWithoutSchoolInput = {
    where: ClassesScalarWhereInput
    data: XOR<ClassesUpdateManyMutationInput, ClassesUncheckedUpdateManyWithoutSchoolInput>
  }

  export type ClassesScalarWhereInput = {
    AND?: ClassesScalarWhereInput | ClassesScalarWhereInput[]
    OR?: ClassesScalarWhereInput[]
    NOT?: ClassesScalarWhereInput | ClassesScalarWhereInput[]
    id?: IntFilter<"Classes"> | number
    class?: StringFilter<"Classes"> | string
    section?: StringFilter<"Classes"> | string
    school_id?: IntFilter<"Classes"> | number
  }

  export type HolidaysUpsertWithWhereUniqueWithoutSchoolInput = {
    where: HolidaysWhereUniqueInput
    update: XOR<HolidaysUpdateWithoutSchoolInput, HolidaysUncheckedUpdateWithoutSchoolInput>
    create: XOR<HolidaysCreateWithoutSchoolInput, HolidaysUncheckedCreateWithoutSchoolInput>
  }

  export type HolidaysUpdateWithWhereUniqueWithoutSchoolInput = {
    where: HolidaysWhereUniqueInput
    data: XOR<HolidaysUpdateWithoutSchoolInput, HolidaysUncheckedUpdateWithoutSchoolInput>
  }

  export type HolidaysUpdateManyWithWhereWithoutSchoolInput = {
    where: HolidaysScalarWhereInput
    data: XOR<HolidaysUpdateManyMutationInput, HolidaysUncheckedUpdateManyWithoutSchoolInput>
  }

  export type HolidaysScalarWhereInput = {
    AND?: HolidaysScalarWhereInput | HolidaysScalarWhereInput[]
    OR?: HolidaysScalarWhereInput[]
    NOT?: HolidaysScalarWhereInput | HolidaysScalarWhereInput[]
    id?: IntFilter<"Holidays"> | number
    date?: DateTimeFilter<"Holidays"> | Date | string
    reason?: StringFilter<"Holidays"> | string
    school_id?: IntNullableFilter<"Holidays"> | number | null
    class_ids?: JsonFilter<"Holidays">
    fn?: StringNullableFilter<"Holidays"> | string | null
    an?: StringFilter<"Holidays"> | string
  }

  export type StudentUpsertWithWhereUniqueWithoutSchoolInput = {
    where: StudentWhereUniqueInput
    update: XOR<StudentUpdateWithoutSchoolInput, StudentUncheckedUpdateWithoutSchoolInput>
    create: XOR<StudentCreateWithoutSchoolInput, StudentUncheckedCreateWithoutSchoolInput>
  }

  export type StudentUpdateWithWhereUniqueWithoutSchoolInput = {
    where: StudentWhereUniqueInput
    data: XOR<StudentUpdateWithoutSchoolInput, StudentUncheckedUpdateWithoutSchoolInput>
  }

  export type StudentUpdateManyWithWhereWithoutSchoolInput = {
    where: StudentScalarWhereInput
    data: XOR<StudentUpdateManyMutationInput, StudentUncheckedUpdateManyWithoutSchoolInput>
  }

  export type FeedbackUpsertWithWhereUniqueWithoutSchoolInput = {
    where: FeedbackWhereUniqueInput
    update: XOR<FeedbackUpdateWithoutSchoolInput, FeedbackUncheckedUpdateWithoutSchoolInput>
    create: XOR<FeedbackCreateWithoutSchoolInput, FeedbackUncheckedCreateWithoutSchoolInput>
  }

  export type FeedbackUpdateWithWhereUniqueWithoutSchoolInput = {
    where: FeedbackWhereUniqueInput
    data: XOR<FeedbackUpdateWithoutSchoolInput, FeedbackUncheckedUpdateWithoutSchoolInput>
  }

  export type FeedbackUpdateManyWithWhereWithoutSchoolInput = {
    where: FeedbackScalarWhereInput
    data: XOR<FeedbackUpdateManyMutationInput, FeedbackUncheckedUpdateManyWithoutSchoolInput>
  }

  export type FeedbackScalarWhereInput = {
    AND?: FeedbackScalarWhereInput | FeedbackScalarWhereInput[]
    OR?: FeedbackScalarWhereInput[]
    NOT?: FeedbackScalarWhereInput | FeedbackScalarWhereInput[]
    id?: IntFilter<"Feedback"> | number
    name?: StringFilter<"Feedback"> | string
    email?: StringFilter<"Feedback"> | string
    feedback?: StringFilter<"Feedback"> | string
    school_id?: IntFilter<"Feedback"> | number
    class_id?: IntFilter<"Feedback"> | number
    created_at?: DateTimeFilter<"Feedback"> | Date | string
  }

  export type ClassTimetableUpsertWithWhereUniqueWithoutSchoolInput = {
    where: ClassTimetableWhereUniqueInput
    update: XOR<ClassTimetableUpdateWithoutSchoolInput, ClassTimetableUncheckedUpdateWithoutSchoolInput>
    create: XOR<ClassTimetableCreateWithoutSchoolInput, ClassTimetableUncheckedCreateWithoutSchoolInput>
  }

  export type ClassTimetableUpdateWithWhereUniqueWithoutSchoolInput = {
    where: ClassTimetableWhereUniqueInput
    data: XOR<ClassTimetableUpdateWithoutSchoolInput, ClassTimetableUncheckedUpdateWithoutSchoolInput>
  }

  export type ClassTimetableUpdateManyWithWhereWithoutSchoolInput = {
    where: ClassTimetableScalarWhereInput
    data: XOR<ClassTimetableUpdateManyMutationInput, ClassTimetableUncheckedUpdateManyWithoutSchoolInput>
  }

  export type ClassTimetableScalarWhereInput = {
    AND?: ClassTimetableScalarWhereInput | ClassTimetableScalarWhereInput[]
    OR?: ClassTimetableScalarWhereInput[]
    NOT?: ClassTimetableScalarWhereInput | ClassTimetableScalarWhereInput[]
    id?: IntFilter<"ClassTimetable"> | number
    schoolId?: IntNullableFilter<"ClassTimetable"> | number | null
    classesId?: IntNullableFilter<"ClassTimetable"> | number | null
    dayOfWeek?: EnumDayOfWeekFilter<"ClassTimetable"> | $Enums.DayOfWeek
    periodNumber?: IntFilter<"ClassTimetable"> | number
    subject?: StringFilter<"ClassTimetable"> | string
  }

  export type StaffAttendanceUpsertWithWhereUniqueWithoutSchoolInput = {
    where: StaffAttendanceWhereUniqueInput
    update: XOR<StaffAttendanceUpdateWithoutSchoolInput, StaffAttendanceUncheckedUpdateWithoutSchoolInput>
    create: XOR<StaffAttendanceCreateWithoutSchoolInput, StaffAttendanceUncheckedCreateWithoutSchoolInput>
  }

  export type StaffAttendanceUpdateWithWhereUniqueWithoutSchoolInput = {
    where: StaffAttendanceWhereUniqueInput
    data: XOR<StaffAttendanceUpdateWithoutSchoolInput, StaffAttendanceUncheckedUpdateWithoutSchoolInput>
  }

  export type StaffAttendanceUpdateManyWithWhereWithoutSchoolInput = {
    where: StaffAttendanceScalarWhereInput
    data: XOR<StaffAttendanceUpdateManyMutationInput, StaffAttendanceUncheckedUpdateManyWithoutSchoolInput>
  }

  export type StaffAttendanceScalarWhereInput = {
    AND?: StaffAttendanceScalarWhereInput | StaffAttendanceScalarWhereInput[]
    OR?: StaffAttendanceScalarWhereInput[]
    NOT?: StaffAttendanceScalarWhereInput | StaffAttendanceScalarWhereInput[]
    username?: StringFilter<"StaffAttendance"> | string
    date?: DateTimeFilter<"StaffAttendance"> | Date | string
    fn_status?: StringFilter<"StaffAttendance"> | string
    an_status?: StringFilter<"StaffAttendance"> | string
    school_id?: IntNullableFilter<"StaffAttendance"> | number | null
  }

  export type StudentAttendanceUpsertWithWhereUniqueWithoutSchoolInput = {
    where: StudentAttendanceWhereUniqueInput
    update: XOR<StudentAttendanceUpdateWithoutSchoolInput, StudentAttendanceUncheckedUpdateWithoutSchoolInput>
    create: XOR<StudentAttendanceCreateWithoutSchoolInput, StudentAttendanceUncheckedCreateWithoutSchoolInput>
  }

  export type StudentAttendanceUpdateWithWhereUniqueWithoutSchoolInput = {
    where: StudentAttendanceWhereUniqueInput
    data: XOR<StudentAttendanceUpdateWithoutSchoolInput, StudentAttendanceUncheckedUpdateWithoutSchoolInput>
  }

  export type StudentAttendanceUpdateManyWithWhereWithoutSchoolInput = {
    where: StudentAttendanceScalarWhereInput
    data: XOR<StudentAttendanceUpdateManyMutationInput, StudentAttendanceUncheckedUpdateManyWithoutSchoolInput>
  }

  export type StudentAttendanceScalarWhereInput = {
    AND?: StudentAttendanceScalarWhereInput | StudentAttendanceScalarWhereInput[]
    OR?: StudentAttendanceScalarWhereInput[]
    NOT?: StudentAttendanceScalarWhereInput | StudentAttendanceScalarWhereInput[]
    username?: StringFilter<"StudentAttendance"> | string
    date?: DateTimeFilter<"StudentAttendance"> | Date | string
    fn_status?: StringFilter<"StudentAttendance"> | string
    an_status?: StringFilter<"StudentAttendance"> | string
    school_id?: IntFilter<"StudentAttendance"> | number
    class_id?: IntFilter<"StudentAttendance"> | number
  }

  export type AdminUpsertWithWhereUniqueWithoutSchoolInput = {
    where: AdminWhereUniqueInput
    update: XOR<AdminUpdateWithoutSchoolInput, AdminUncheckedUpdateWithoutSchoolInput>
    create: XOR<AdminCreateWithoutSchoolInput, AdminUncheckedCreateWithoutSchoolInput>
  }

  export type AdminUpdateWithWhereUniqueWithoutSchoolInput = {
    where: AdminWhereUniqueInput
    data: XOR<AdminUpdateWithoutSchoolInput, AdminUncheckedUpdateWithoutSchoolInput>
  }

  export type AdminUpdateManyWithWhereWithoutSchoolInput = {
    where: AdminScalarWhereInput
    data: XOR<AdminUpdateManyMutationInput, AdminUncheckedUpdateManyWithoutSchoolInput>
  }

  export type AdminScalarWhereInput = {
    AND?: AdminScalarWhereInput | AdminScalarWhereInput[]
    OR?: AdminScalarWhereInput[]
    NOT?: AdminScalarWhereInput | AdminScalarWhereInput[]
    id?: IntFilter<"Admin"> | number
    name?: StringNullableFilter<"Admin"> | string | null
    designation?: StringFilter<"Admin"> | string
    gender?: StringFilter<"Admin"> | string
    mobile?: StringFilter<"Admin"> | string
    email?: StringFilter<"Admin"> | string
    photo?: BytesNullableFilter<"Admin"> | Uint8Array | null
    username?: StringFilter<"Admin"> | string
    school_id?: IntFilter<"Admin"> | number
  }

  export type MessagesUpsertWithWhereUniqueWithoutSchoolInput = {
    where: MessagesWhereUniqueInput
    update: XOR<MessagesUpdateWithoutSchoolInput, MessagesUncheckedUpdateWithoutSchoolInput>
    create: XOR<MessagesCreateWithoutSchoolInput, MessagesUncheckedCreateWithoutSchoolInput>
  }

  export type MessagesUpdateWithWhereUniqueWithoutSchoolInput = {
    where: MessagesWhereUniqueInput
    data: XOR<MessagesUpdateWithoutSchoolInput, MessagesUncheckedUpdateWithoutSchoolInput>
  }

  export type MessagesUpdateManyWithWhereWithoutSchoolInput = {
    where: MessagesScalarWhereInput
    data: XOR<MessagesUpdateManyMutationInput, MessagesUncheckedUpdateManyWithoutSchoolInput>
  }

  export type MessagesScalarWhereInput = {
    AND?: MessagesScalarWhereInput | MessagesScalarWhereInput[]
    OR?: MessagesScalarWhereInput[]
    NOT?: MessagesScalarWhereInput | MessagesScalarWhereInput[]
    id?: IntFilter<"Messages"> | number
    messages?: StringFilter<"Messages"> | string
    date?: StringNullableFilter<"Messages"> | string | null
    school_id?: IntFilter<"Messages"> | number
  }

  export type SchoolCreateWithoutClassesInput = {
    name: string
    address: string
    photo: Uint8Array
    users?: Attendance_userCreateNestedManyWithoutSchoolInput
    staff?: StaffCreateNestedManyWithoutSchoolInput
    holidays?: HolidaysCreateNestedManyWithoutSchoolInput
    students?: StudentCreateNestedManyWithoutSchoolInput
    feedbacks?: FeedbackCreateNestedManyWithoutSchoolInput
    classTimetables?: ClassTimetableCreateNestedManyWithoutSchoolInput
    staffAttendances?: StaffAttendanceCreateNestedManyWithoutSchoolInput
    studentAttendances?: StudentAttendanceCreateNestedManyWithoutSchoolInput
    admins?: AdminCreateNestedManyWithoutSchoolInput
    Messages?: MessagesCreateNestedManyWithoutSchoolInput
  }

  export type SchoolUncheckedCreateWithoutClassesInput = {
    id?: number
    name: string
    address: string
    photo: Uint8Array
    users?: Attendance_userUncheckedCreateNestedManyWithoutSchoolInput
    staff?: StaffUncheckedCreateNestedManyWithoutSchoolInput
    holidays?: HolidaysUncheckedCreateNestedManyWithoutSchoolInput
    students?: StudentUncheckedCreateNestedManyWithoutSchoolInput
    feedbacks?: FeedbackUncheckedCreateNestedManyWithoutSchoolInput
    classTimetables?: ClassTimetableUncheckedCreateNestedManyWithoutSchoolInput
    staffAttendances?: StaffAttendanceUncheckedCreateNestedManyWithoutSchoolInput
    studentAttendances?: StudentAttendanceUncheckedCreateNestedManyWithoutSchoolInput
    admins?: AdminUncheckedCreateNestedManyWithoutSchoolInput
    Messages?: MessagesUncheckedCreateNestedManyWithoutSchoolInput
  }

  export type SchoolCreateOrConnectWithoutClassesInput = {
    where: SchoolWhereUniqueInput
    create: XOR<SchoolCreateWithoutClassesInput, SchoolUncheckedCreateWithoutClassesInput>
  }

  export type HolidaysCreateWithoutClassesInput = {
    date: Date | string
    reason: string
    class_ids: JsonNullValueInput | InputJsonValue
    fn?: string | null
    an: string
    school?: SchoolCreateNestedOneWithoutHolidaysInput
  }

  export type HolidaysUncheckedCreateWithoutClassesInput = {
    id?: number
    date: Date | string
    reason: string
    school_id?: number | null
    class_ids: JsonNullValueInput | InputJsonValue
    fn?: string | null
    an: string
  }

  export type HolidaysCreateOrConnectWithoutClassesInput = {
    where: HolidaysWhereUniqueInput
    create: XOR<HolidaysCreateWithoutClassesInput, HolidaysUncheckedCreateWithoutClassesInput>
  }

  export type StudentCreateWithoutClassInput = {
    name?: string | null
    gender?: $Enums.Gender | null
    email: string
    mobile: string
    photo?: Uint8Array | null
    password: string
    school: SchoolCreateNestedOneWithoutStudentsInput
    user: Attendance_userCreateNestedOneWithoutStudentsInput
    attendance?: StudentAttendanceCreateNestedManyWithoutStudentInput
  }

  export type StudentUncheckedCreateWithoutClassInput = {
    id?: number
    username: string
    name?: string | null
    gender?: $Enums.Gender | null
    email: string
    mobile: string
    school_id: number
    photo?: Uint8Array | null
    password: string
    attendance?: StudentAttendanceUncheckedCreateNestedManyWithoutStudentInput
  }

  export type StudentCreateOrConnectWithoutClassInput = {
    where: StudentWhereUniqueInput
    create: XOR<StudentCreateWithoutClassInput, StudentUncheckedCreateWithoutClassInput>
  }

  export type StudentCreateManyClassInputEnvelope = {
    data: StudentCreateManyClassInput | StudentCreateManyClassInput[]
    skipDuplicates?: boolean
  }

  export type StudentAttendanceCreateWithoutClassInput = {
    date: Date | string
    fn_status?: string
    an_status?: string
    student: StudentCreateNestedOneWithoutAttendanceInput
    school: SchoolCreateNestedOneWithoutStudentAttendancesInput
  }

  export type StudentAttendanceUncheckedCreateWithoutClassInput = {
    username: string
    date: Date | string
    fn_status?: string
    an_status?: string
    school_id: number
  }

  export type StudentAttendanceCreateOrConnectWithoutClassInput = {
    where: StudentAttendanceWhereUniqueInput
    create: XOR<StudentAttendanceCreateWithoutClassInput, StudentAttendanceUncheckedCreateWithoutClassInput>
  }

  export type StudentAttendanceCreateManyClassInputEnvelope = {
    data: StudentAttendanceCreateManyClassInput | StudentAttendanceCreateManyClassInput[]
    skipDuplicates?: boolean
  }

  export type ClassTimetableCreateWithoutClassesInput = {
    dayOfWeek: $Enums.DayOfWeek
    periodNumber: number
    subject: string
    School?: SchoolCreateNestedOneWithoutClassTimetablesInput
  }

  export type ClassTimetableUncheckedCreateWithoutClassesInput = {
    id?: number
    schoolId?: number | null
    dayOfWeek: $Enums.DayOfWeek
    periodNumber: number
    subject: string
  }

  export type ClassTimetableCreateOrConnectWithoutClassesInput = {
    where: ClassTimetableWhereUniqueInput
    create: XOR<ClassTimetableCreateWithoutClassesInput, ClassTimetableUncheckedCreateWithoutClassesInput>
  }

  export type ClassTimetableCreateManyClassesInputEnvelope = {
    data: ClassTimetableCreateManyClassesInput | ClassTimetableCreateManyClassesInput[]
    skipDuplicates?: boolean
  }

  export type FeedbackCreateWithoutClassInput = {
    name: string
    email: string
    feedback: string
    created_at?: Date | string
    school: SchoolCreateNestedOneWithoutFeedbacksInput
  }

  export type FeedbackUncheckedCreateWithoutClassInput = {
    id?: number
    name: string
    email: string
    feedback: string
    school_id: number
    created_at?: Date | string
  }

  export type FeedbackCreateOrConnectWithoutClassInput = {
    where: FeedbackWhereUniqueInput
    create: XOR<FeedbackCreateWithoutClassInput, FeedbackUncheckedCreateWithoutClassInput>
  }

  export type FeedbackCreateManyClassInputEnvelope = {
    data: FeedbackCreateManyClassInput | FeedbackCreateManyClassInput[]
    skipDuplicates?: boolean
  }

  export type SchoolUpsertWithoutClassesInput = {
    update: XOR<SchoolUpdateWithoutClassesInput, SchoolUncheckedUpdateWithoutClassesInput>
    create: XOR<SchoolCreateWithoutClassesInput, SchoolUncheckedCreateWithoutClassesInput>
    where?: SchoolWhereInput
  }

  export type SchoolUpdateToOneWithWhereWithoutClassesInput = {
    where?: SchoolWhereInput
    data: XOR<SchoolUpdateWithoutClassesInput, SchoolUncheckedUpdateWithoutClassesInput>
  }

  export type SchoolUpdateWithoutClassesInput = {
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    photo?: BytesFieldUpdateOperationsInput | Uint8Array
    users?: Attendance_userUpdateManyWithoutSchoolNestedInput
    staff?: StaffUpdateManyWithoutSchoolNestedInput
    holidays?: HolidaysUpdateManyWithoutSchoolNestedInput
    students?: StudentUpdateManyWithoutSchoolNestedInput
    feedbacks?: FeedbackUpdateManyWithoutSchoolNestedInput
    classTimetables?: ClassTimetableUpdateManyWithoutSchoolNestedInput
    staffAttendances?: StaffAttendanceUpdateManyWithoutSchoolNestedInput
    studentAttendances?: StudentAttendanceUpdateManyWithoutSchoolNestedInput
    admins?: AdminUpdateManyWithoutSchoolNestedInput
    Messages?: MessagesUpdateManyWithoutSchoolNestedInput
  }

  export type SchoolUncheckedUpdateWithoutClassesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    photo?: BytesFieldUpdateOperationsInput | Uint8Array
    users?: Attendance_userUncheckedUpdateManyWithoutSchoolNestedInput
    staff?: StaffUncheckedUpdateManyWithoutSchoolNestedInput
    holidays?: HolidaysUncheckedUpdateManyWithoutSchoolNestedInput
    students?: StudentUncheckedUpdateManyWithoutSchoolNestedInput
    feedbacks?: FeedbackUncheckedUpdateManyWithoutSchoolNestedInput
    classTimetables?: ClassTimetableUncheckedUpdateManyWithoutSchoolNestedInput
    staffAttendances?: StaffAttendanceUncheckedUpdateManyWithoutSchoolNestedInput
    studentAttendances?: StudentAttendanceUncheckedUpdateManyWithoutSchoolNestedInput
    admins?: AdminUncheckedUpdateManyWithoutSchoolNestedInput
    Messages?: MessagesUncheckedUpdateManyWithoutSchoolNestedInput
  }

  export type HolidaysUpsertWithWhereUniqueWithoutClassesInput = {
    where: HolidaysWhereUniqueInput
    update: XOR<HolidaysUpdateWithoutClassesInput, HolidaysUncheckedUpdateWithoutClassesInput>
    create: XOR<HolidaysCreateWithoutClassesInput, HolidaysUncheckedCreateWithoutClassesInput>
  }

  export type HolidaysUpdateWithWhereUniqueWithoutClassesInput = {
    where: HolidaysWhereUniqueInput
    data: XOR<HolidaysUpdateWithoutClassesInput, HolidaysUncheckedUpdateWithoutClassesInput>
  }

  export type HolidaysUpdateManyWithWhereWithoutClassesInput = {
    where: HolidaysScalarWhereInput
    data: XOR<HolidaysUpdateManyMutationInput, HolidaysUncheckedUpdateManyWithoutClassesInput>
  }

  export type StudentUpsertWithWhereUniqueWithoutClassInput = {
    where: StudentWhereUniqueInput
    update: XOR<StudentUpdateWithoutClassInput, StudentUncheckedUpdateWithoutClassInput>
    create: XOR<StudentCreateWithoutClassInput, StudentUncheckedCreateWithoutClassInput>
  }

  export type StudentUpdateWithWhereUniqueWithoutClassInput = {
    where: StudentWhereUniqueInput
    data: XOR<StudentUpdateWithoutClassInput, StudentUncheckedUpdateWithoutClassInput>
  }

  export type StudentUpdateManyWithWhereWithoutClassInput = {
    where: StudentScalarWhereInput
    data: XOR<StudentUpdateManyMutationInput, StudentUncheckedUpdateManyWithoutClassInput>
  }

  export type StudentAttendanceUpsertWithWhereUniqueWithoutClassInput = {
    where: StudentAttendanceWhereUniqueInput
    update: XOR<StudentAttendanceUpdateWithoutClassInput, StudentAttendanceUncheckedUpdateWithoutClassInput>
    create: XOR<StudentAttendanceCreateWithoutClassInput, StudentAttendanceUncheckedCreateWithoutClassInput>
  }

  export type StudentAttendanceUpdateWithWhereUniqueWithoutClassInput = {
    where: StudentAttendanceWhereUniqueInput
    data: XOR<StudentAttendanceUpdateWithoutClassInput, StudentAttendanceUncheckedUpdateWithoutClassInput>
  }

  export type StudentAttendanceUpdateManyWithWhereWithoutClassInput = {
    where: StudentAttendanceScalarWhereInput
    data: XOR<StudentAttendanceUpdateManyMutationInput, StudentAttendanceUncheckedUpdateManyWithoutClassInput>
  }

  export type ClassTimetableUpsertWithWhereUniqueWithoutClassesInput = {
    where: ClassTimetableWhereUniqueInput
    update: XOR<ClassTimetableUpdateWithoutClassesInput, ClassTimetableUncheckedUpdateWithoutClassesInput>
    create: XOR<ClassTimetableCreateWithoutClassesInput, ClassTimetableUncheckedCreateWithoutClassesInput>
  }

  export type ClassTimetableUpdateWithWhereUniqueWithoutClassesInput = {
    where: ClassTimetableWhereUniqueInput
    data: XOR<ClassTimetableUpdateWithoutClassesInput, ClassTimetableUncheckedUpdateWithoutClassesInput>
  }

  export type ClassTimetableUpdateManyWithWhereWithoutClassesInput = {
    where: ClassTimetableScalarWhereInput
    data: XOR<ClassTimetableUpdateManyMutationInput, ClassTimetableUncheckedUpdateManyWithoutClassesInput>
  }

  export type FeedbackUpsertWithWhereUniqueWithoutClassInput = {
    where: FeedbackWhereUniqueInput
    update: XOR<FeedbackUpdateWithoutClassInput, FeedbackUncheckedUpdateWithoutClassInput>
    create: XOR<FeedbackCreateWithoutClassInput, FeedbackUncheckedCreateWithoutClassInput>
  }

  export type FeedbackUpdateWithWhereUniqueWithoutClassInput = {
    where: FeedbackWhereUniqueInput
    data: XOR<FeedbackUpdateWithoutClassInput, FeedbackUncheckedUpdateWithoutClassInput>
  }

  export type FeedbackUpdateManyWithWhereWithoutClassInput = {
    where: FeedbackScalarWhereInput
    data: XOR<FeedbackUpdateManyMutationInput, FeedbackUncheckedUpdateManyWithoutClassInput>
  }

  export type SchoolCreateWithoutHolidaysInput = {
    name: string
    address: string
    photo: Uint8Array
    users?: Attendance_userCreateNestedManyWithoutSchoolInput
    staff?: StaffCreateNestedManyWithoutSchoolInput
    classes?: ClassesCreateNestedManyWithoutSchoolInput
    students?: StudentCreateNestedManyWithoutSchoolInput
    feedbacks?: FeedbackCreateNestedManyWithoutSchoolInput
    classTimetables?: ClassTimetableCreateNestedManyWithoutSchoolInput
    staffAttendances?: StaffAttendanceCreateNestedManyWithoutSchoolInput
    studentAttendances?: StudentAttendanceCreateNestedManyWithoutSchoolInput
    admins?: AdminCreateNestedManyWithoutSchoolInput
    Messages?: MessagesCreateNestedManyWithoutSchoolInput
  }

  export type SchoolUncheckedCreateWithoutHolidaysInput = {
    id?: number
    name: string
    address: string
    photo: Uint8Array
    users?: Attendance_userUncheckedCreateNestedManyWithoutSchoolInput
    staff?: StaffUncheckedCreateNestedManyWithoutSchoolInput
    classes?: ClassesUncheckedCreateNestedManyWithoutSchoolInput
    students?: StudentUncheckedCreateNestedManyWithoutSchoolInput
    feedbacks?: FeedbackUncheckedCreateNestedManyWithoutSchoolInput
    classTimetables?: ClassTimetableUncheckedCreateNestedManyWithoutSchoolInput
    staffAttendances?: StaffAttendanceUncheckedCreateNestedManyWithoutSchoolInput
    studentAttendances?: StudentAttendanceUncheckedCreateNestedManyWithoutSchoolInput
    admins?: AdminUncheckedCreateNestedManyWithoutSchoolInput
    Messages?: MessagesUncheckedCreateNestedManyWithoutSchoolInput
  }

  export type SchoolCreateOrConnectWithoutHolidaysInput = {
    where: SchoolWhereUniqueInput
    create: XOR<SchoolCreateWithoutHolidaysInput, SchoolUncheckedCreateWithoutHolidaysInput>
  }

  export type ClassesCreateWithoutHolidaysInput = {
    class: string
    section: string
    school: SchoolCreateNestedOneWithoutClassesInput
    students?: StudentCreateNestedManyWithoutClassInput
    studentAttendance?: StudentAttendanceCreateNestedManyWithoutClassInput
    classTimetables?: ClassTimetableCreateNestedManyWithoutClassesInput
    feedbacks?: FeedbackCreateNestedManyWithoutClassInput
  }

  export type ClassesUncheckedCreateWithoutHolidaysInput = {
    id?: number
    class: string
    section: string
    school_id: number
    students?: StudentUncheckedCreateNestedManyWithoutClassInput
    studentAttendance?: StudentAttendanceUncheckedCreateNestedManyWithoutClassInput
    classTimetables?: ClassTimetableUncheckedCreateNestedManyWithoutClassesInput
    feedbacks?: FeedbackUncheckedCreateNestedManyWithoutClassInput
  }

  export type ClassesCreateOrConnectWithoutHolidaysInput = {
    where: ClassesWhereUniqueInput
    create: XOR<ClassesCreateWithoutHolidaysInput, ClassesUncheckedCreateWithoutHolidaysInput>
  }

  export type SchoolUpsertWithoutHolidaysInput = {
    update: XOR<SchoolUpdateWithoutHolidaysInput, SchoolUncheckedUpdateWithoutHolidaysInput>
    create: XOR<SchoolCreateWithoutHolidaysInput, SchoolUncheckedCreateWithoutHolidaysInput>
    where?: SchoolWhereInput
  }

  export type SchoolUpdateToOneWithWhereWithoutHolidaysInput = {
    where?: SchoolWhereInput
    data: XOR<SchoolUpdateWithoutHolidaysInput, SchoolUncheckedUpdateWithoutHolidaysInput>
  }

  export type SchoolUpdateWithoutHolidaysInput = {
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    photo?: BytesFieldUpdateOperationsInput | Uint8Array
    users?: Attendance_userUpdateManyWithoutSchoolNestedInput
    staff?: StaffUpdateManyWithoutSchoolNestedInput
    classes?: ClassesUpdateManyWithoutSchoolNestedInput
    students?: StudentUpdateManyWithoutSchoolNestedInput
    feedbacks?: FeedbackUpdateManyWithoutSchoolNestedInput
    classTimetables?: ClassTimetableUpdateManyWithoutSchoolNestedInput
    staffAttendances?: StaffAttendanceUpdateManyWithoutSchoolNestedInput
    studentAttendances?: StudentAttendanceUpdateManyWithoutSchoolNestedInput
    admins?: AdminUpdateManyWithoutSchoolNestedInput
    Messages?: MessagesUpdateManyWithoutSchoolNestedInput
  }

  export type SchoolUncheckedUpdateWithoutHolidaysInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    photo?: BytesFieldUpdateOperationsInput | Uint8Array
    users?: Attendance_userUncheckedUpdateManyWithoutSchoolNestedInput
    staff?: StaffUncheckedUpdateManyWithoutSchoolNestedInput
    classes?: ClassesUncheckedUpdateManyWithoutSchoolNestedInput
    students?: StudentUncheckedUpdateManyWithoutSchoolNestedInput
    feedbacks?: FeedbackUncheckedUpdateManyWithoutSchoolNestedInput
    classTimetables?: ClassTimetableUncheckedUpdateManyWithoutSchoolNestedInput
    staffAttendances?: StaffAttendanceUncheckedUpdateManyWithoutSchoolNestedInput
    studentAttendances?: StudentAttendanceUncheckedUpdateManyWithoutSchoolNestedInput
    admins?: AdminUncheckedUpdateManyWithoutSchoolNestedInput
    Messages?: MessagesUncheckedUpdateManyWithoutSchoolNestedInput
  }

  export type ClassesUpsertWithWhereUniqueWithoutHolidaysInput = {
    where: ClassesWhereUniqueInput
    update: XOR<ClassesUpdateWithoutHolidaysInput, ClassesUncheckedUpdateWithoutHolidaysInput>
    create: XOR<ClassesCreateWithoutHolidaysInput, ClassesUncheckedCreateWithoutHolidaysInput>
  }

  export type ClassesUpdateWithWhereUniqueWithoutHolidaysInput = {
    where: ClassesWhereUniqueInput
    data: XOR<ClassesUpdateWithoutHolidaysInput, ClassesUncheckedUpdateWithoutHolidaysInput>
  }

  export type ClassesUpdateManyWithWhereWithoutHolidaysInput = {
    where: ClassesScalarWhereInput
    data: XOR<ClassesUpdateManyMutationInput, ClassesUncheckedUpdateManyWithoutHolidaysInput>
  }

  export type SchoolCreateWithoutStaffInput = {
    name: string
    address: string
    photo: Uint8Array
    users?: Attendance_userCreateNestedManyWithoutSchoolInput
    classes?: ClassesCreateNestedManyWithoutSchoolInput
    holidays?: HolidaysCreateNestedManyWithoutSchoolInput
    students?: StudentCreateNestedManyWithoutSchoolInput
    feedbacks?: FeedbackCreateNestedManyWithoutSchoolInput
    classTimetables?: ClassTimetableCreateNestedManyWithoutSchoolInput
    staffAttendances?: StaffAttendanceCreateNestedManyWithoutSchoolInput
    studentAttendances?: StudentAttendanceCreateNestedManyWithoutSchoolInput
    admins?: AdminCreateNestedManyWithoutSchoolInput
    Messages?: MessagesCreateNestedManyWithoutSchoolInput
  }

  export type SchoolUncheckedCreateWithoutStaffInput = {
    id?: number
    name: string
    address: string
    photo: Uint8Array
    users?: Attendance_userUncheckedCreateNestedManyWithoutSchoolInput
    classes?: ClassesUncheckedCreateNestedManyWithoutSchoolInput
    holidays?: HolidaysUncheckedCreateNestedManyWithoutSchoolInput
    students?: StudentUncheckedCreateNestedManyWithoutSchoolInput
    feedbacks?: FeedbackUncheckedCreateNestedManyWithoutSchoolInput
    classTimetables?: ClassTimetableUncheckedCreateNestedManyWithoutSchoolInput
    staffAttendances?: StaffAttendanceUncheckedCreateNestedManyWithoutSchoolInput
    studentAttendances?: StudentAttendanceUncheckedCreateNestedManyWithoutSchoolInput
    admins?: AdminUncheckedCreateNestedManyWithoutSchoolInput
    Messages?: MessagesUncheckedCreateNestedManyWithoutSchoolInput
  }

  export type SchoolCreateOrConnectWithoutStaffInput = {
    where: SchoolWhereUniqueInput
    create: XOR<SchoolCreateWithoutStaffInput, SchoolUncheckedCreateWithoutStaffInput>
  }

  export type Attendance_userCreateWithoutStaffInput = {
    username: string
    password: string
    role: string
    school: SchoolCreateNestedOneWithoutUsersInput
    students?: StudentCreateNestedManyWithoutUserInput
    admin?: AdminCreateNestedOneWithoutUserInput
  }

  export type Attendance_userUncheckedCreateWithoutStaffInput = {
    id?: number
    username: string
    password: string
    role: string
    school_id: number
    students?: StudentUncheckedCreateNestedManyWithoutUserInput
    admin?: AdminUncheckedCreateNestedOneWithoutUserInput
  }

  export type Attendance_userCreateOrConnectWithoutStaffInput = {
    where: Attendance_userWhereUniqueInput
    create: XOR<Attendance_userCreateWithoutStaffInput, Attendance_userUncheckedCreateWithoutStaffInput>
  }

  export type StaffAttendanceCreateWithoutStaffInput = {
    date: Date | string
    fn_status?: string
    an_status?: string
    school?: SchoolCreateNestedOneWithoutStaffAttendancesInput
  }

  export type StaffAttendanceUncheckedCreateWithoutStaffInput = {
    date: Date | string
    fn_status?: string
    an_status?: string
    school_id?: number | null
  }

  export type StaffAttendanceCreateOrConnectWithoutStaffInput = {
    where: StaffAttendanceWhereUniqueInput
    create: XOR<StaffAttendanceCreateWithoutStaffInput, StaffAttendanceUncheckedCreateWithoutStaffInput>
  }

  export type StaffAttendanceCreateManyStaffInputEnvelope = {
    data: StaffAttendanceCreateManyStaffInput | StaffAttendanceCreateManyStaffInput[]
    skipDuplicates?: boolean
  }

  export type SchoolUpsertWithoutStaffInput = {
    update: XOR<SchoolUpdateWithoutStaffInput, SchoolUncheckedUpdateWithoutStaffInput>
    create: XOR<SchoolCreateWithoutStaffInput, SchoolUncheckedCreateWithoutStaffInput>
    where?: SchoolWhereInput
  }

  export type SchoolUpdateToOneWithWhereWithoutStaffInput = {
    where?: SchoolWhereInput
    data: XOR<SchoolUpdateWithoutStaffInput, SchoolUncheckedUpdateWithoutStaffInput>
  }

  export type SchoolUpdateWithoutStaffInput = {
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    photo?: BytesFieldUpdateOperationsInput | Uint8Array
    users?: Attendance_userUpdateManyWithoutSchoolNestedInput
    classes?: ClassesUpdateManyWithoutSchoolNestedInput
    holidays?: HolidaysUpdateManyWithoutSchoolNestedInput
    students?: StudentUpdateManyWithoutSchoolNestedInput
    feedbacks?: FeedbackUpdateManyWithoutSchoolNestedInput
    classTimetables?: ClassTimetableUpdateManyWithoutSchoolNestedInput
    staffAttendances?: StaffAttendanceUpdateManyWithoutSchoolNestedInput
    studentAttendances?: StudentAttendanceUpdateManyWithoutSchoolNestedInput
    admins?: AdminUpdateManyWithoutSchoolNestedInput
    Messages?: MessagesUpdateManyWithoutSchoolNestedInput
  }

  export type SchoolUncheckedUpdateWithoutStaffInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    photo?: BytesFieldUpdateOperationsInput | Uint8Array
    users?: Attendance_userUncheckedUpdateManyWithoutSchoolNestedInput
    classes?: ClassesUncheckedUpdateManyWithoutSchoolNestedInput
    holidays?: HolidaysUncheckedUpdateManyWithoutSchoolNestedInput
    students?: StudentUncheckedUpdateManyWithoutSchoolNestedInput
    feedbacks?: FeedbackUncheckedUpdateManyWithoutSchoolNestedInput
    classTimetables?: ClassTimetableUncheckedUpdateManyWithoutSchoolNestedInput
    staffAttendances?: StaffAttendanceUncheckedUpdateManyWithoutSchoolNestedInput
    studentAttendances?: StudentAttendanceUncheckedUpdateManyWithoutSchoolNestedInput
    admins?: AdminUncheckedUpdateManyWithoutSchoolNestedInput
    Messages?: MessagesUncheckedUpdateManyWithoutSchoolNestedInput
  }

  export type Attendance_userUpsertWithoutStaffInput = {
    update: XOR<Attendance_userUpdateWithoutStaffInput, Attendance_userUncheckedUpdateWithoutStaffInput>
    create: XOR<Attendance_userCreateWithoutStaffInput, Attendance_userUncheckedCreateWithoutStaffInput>
    where?: Attendance_userWhereInput
  }

  export type Attendance_userUpdateToOneWithWhereWithoutStaffInput = {
    where?: Attendance_userWhereInput
    data: XOR<Attendance_userUpdateWithoutStaffInput, Attendance_userUncheckedUpdateWithoutStaffInput>
  }

  export type Attendance_userUpdateWithoutStaffInput = {
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    school?: SchoolUpdateOneRequiredWithoutUsersNestedInput
    students?: StudentUpdateManyWithoutUserNestedInput
    admin?: AdminUpdateOneWithoutUserNestedInput
  }

  export type Attendance_userUncheckedUpdateWithoutStaffInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    school_id?: IntFieldUpdateOperationsInput | number
    students?: StudentUncheckedUpdateManyWithoutUserNestedInput
    admin?: AdminUncheckedUpdateOneWithoutUserNestedInput
  }

  export type StaffAttendanceUpsertWithWhereUniqueWithoutStaffInput = {
    where: StaffAttendanceWhereUniqueInput
    update: XOR<StaffAttendanceUpdateWithoutStaffInput, StaffAttendanceUncheckedUpdateWithoutStaffInput>
    create: XOR<StaffAttendanceCreateWithoutStaffInput, StaffAttendanceUncheckedCreateWithoutStaffInput>
  }

  export type StaffAttendanceUpdateWithWhereUniqueWithoutStaffInput = {
    where: StaffAttendanceWhereUniqueInput
    data: XOR<StaffAttendanceUpdateWithoutStaffInput, StaffAttendanceUncheckedUpdateWithoutStaffInput>
  }

  export type StaffAttendanceUpdateManyWithWhereWithoutStaffInput = {
    where: StaffAttendanceScalarWhereInput
    data: XOR<StaffAttendanceUpdateManyMutationInput, StaffAttendanceUncheckedUpdateManyWithoutStaffInput>
  }

  export type SchoolCreateWithoutStaffAttendancesInput = {
    name: string
    address: string
    photo: Uint8Array
    users?: Attendance_userCreateNestedManyWithoutSchoolInput
    staff?: StaffCreateNestedManyWithoutSchoolInput
    classes?: ClassesCreateNestedManyWithoutSchoolInput
    holidays?: HolidaysCreateNestedManyWithoutSchoolInput
    students?: StudentCreateNestedManyWithoutSchoolInput
    feedbacks?: FeedbackCreateNestedManyWithoutSchoolInput
    classTimetables?: ClassTimetableCreateNestedManyWithoutSchoolInput
    studentAttendances?: StudentAttendanceCreateNestedManyWithoutSchoolInput
    admins?: AdminCreateNestedManyWithoutSchoolInput
    Messages?: MessagesCreateNestedManyWithoutSchoolInput
  }

  export type SchoolUncheckedCreateWithoutStaffAttendancesInput = {
    id?: number
    name: string
    address: string
    photo: Uint8Array
    users?: Attendance_userUncheckedCreateNestedManyWithoutSchoolInput
    staff?: StaffUncheckedCreateNestedManyWithoutSchoolInput
    classes?: ClassesUncheckedCreateNestedManyWithoutSchoolInput
    holidays?: HolidaysUncheckedCreateNestedManyWithoutSchoolInput
    students?: StudentUncheckedCreateNestedManyWithoutSchoolInput
    feedbacks?: FeedbackUncheckedCreateNestedManyWithoutSchoolInput
    classTimetables?: ClassTimetableUncheckedCreateNestedManyWithoutSchoolInput
    studentAttendances?: StudentAttendanceUncheckedCreateNestedManyWithoutSchoolInput
    admins?: AdminUncheckedCreateNestedManyWithoutSchoolInput
    Messages?: MessagesUncheckedCreateNestedManyWithoutSchoolInput
  }

  export type SchoolCreateOrConnectWithoutStaffAttendancesInput = {
    where: SchoolWhereUniqueInput
    create: XOR<SchoolCreateWithoutStaffAttendancesInput, SchoolUncheckedCreateWithoutStaffAttendancesInput>
  }

  export type StaffCreateWithoutAttendancesInput = {
    designation: string
    name?: string | null
    email: string
    gender?: $Enums.Gender | null
    mobile: string
    password: string
    school: SchoolCreateNestedOneWithoutStaffInput
    user: Attendance_userCreateNestedOneWithoutStaffInput
  }

  export type StaffUncheckedCreateWithoutAttendancesInput = {
    id?: number
    username: string
    designation: string
    name?: string | null
    email: string
    gender?: $Enums.Gender | null
    mobile: string
    school_id: number
    password: string
  }

  export type StaffCreateOrConnectWithoutAttendancesInput = {
    where: StaffWhereUniqueInput
    create: XOR<StaffCreateWithoutAttendancesInput, StaffUncheckedCreateWithoutAttendancesInput>
  }

  export type SchoolUpsertWithoutStaffAttendancesInput = {
    update: XOR<SchoolUpdateWithoutStaffAttendancesInput, SchoolUncheckedUpdateWithoutStaffAttendancesInput>
    create: XOR<SchoolCreateWithoutStaffAttendancesInput, SchoolUncheckedCreateWithoutStaffAttendancesInput>
    where?: SchoolWhereInput
  }

  export type SchoolUpdateToOneWithWhereWithoutStaffAttendancesInput = {
    where?: SchoolWhereInput
    data: XOR<SchoolUpdateWithoutStaffAttendancesInput, SchoolUncheckedUpdateWithoutStaffAttendancesInput>
  }

  export type SchoolUpdateWithoutStaffAttendancesInput = {
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    photo?: BytesFieldUpdateOperationsInput | Uint8Array
    users?: Attendance_userUpdateManyWithoutSchoolNestedInput
    staff?: StaffUpdateManyWithoutSchoolNestedInput
    classes?: ClassesUpdateManyWithoutSchoolNestedInput
    holidays?: HolidaysUpdateManyWithoutSchoolNestedInput
    students?: StudentUpdateManyWithoutSchoolNestedInput
    feedbacks?: FeedbackUpdateManyWithoutSchoolNestedInput
    classTimetables?: ClassTimetableUpdateManyWithoutSchoolNestedInput
    studentAttendances?: StudentAttendanceUpdateManyWithoutSchoolNestedInput
    admins?: AdminUpdateManyWithoutSchoolNestedInput
    Messages?: MessagesUpdateManyWithoutSchoolNestedInput
  }

  export type SchoolUncheckedUpdateWithoutStaffAttendancesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    photo?: BytesFieldUpdateOperationsInput | Uint8Array
    users?: Attendance_userUncheckedUpdateManyWithoutSchoolNestedInput
    staff?: StaffUncheckedUpdateManyWithoutSchoolNestedInput
    classes?: ClassesUncheckedUpdateManyWithoutSchoolNestedInput
    holidays?: HolidaysUncheckedUpdateManyWithoutSchoolNestedInput
    students?: StudentUncheckedUpdateManyWithoutSchoolNestedInput
    feedbacks?: FeedbackUncheckedUpdateManyWithoutSchoolNestedInput
    classTimetables?: ClassTimetableUncheckedUpdateManyWithoutSchoolNestedInput
    studentAttendances?: StudentAttendanceUncheckedUpdateManyWithoutSchoolNestedInput
    admins?: AdminUncheckedUpdateManyWithoutSchoolNestedInput
    Messages?: MessagesUncheckedUpdateManyWithoutSchoolNestedInput
  }

  export type StaffUpsertWithoutAttendancesInput = {
    update: XOR<StaffUpdateWithoutAttendancesInput, StaffUncheckedUpdateWithoutAttendancesInput>
    create: XOR<StaffCreateWithoutAttendancesInput, StaffUncheckedCreateWithoutAttendancesInput>
    where?: StaffWhereInput
  }

  export type StaffUpdateToOneWithWhereWithoutAttendancesInput = {
    where?: StaffWhereInput
    data: XOR<StaffUpdateWithoutAttendancesInput, StaffUncheckedUpdateWithoutAttendancesInput>
  }

  export type StaffUpdateWithoutAttendancesInput = {
    designation?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    gender?: NullableEnumGenderFieldUpdateOperationsInput | $Enums.Gender | null
    mobile?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    school?: SchoolUpdateOneRequiredWithoutStaffNestedInput
    user?: Attendance_userUpdateOneRequiredWithoutStaffNestedInput
  }

  export type StaffUncheckedUpdateWithoutAttendancesInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    designation?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    gender?: NullableEnumGenderFieldUpdateOperationsInput | $Enums.Gender | null
    mobile?: StringFieldUpdateOperationsInput | string
    school_id?: IntFieldUpdateOperationsInput | number
    password?: StringFieldUpdateOperationsInput | string
  }

  export type ClassesCreateWithoutStudentsInput = {
    class: string
    section: string
    school: SchoolCreateNestedOneWithoutClassesInput
    holidays?: HolidaysCreateNestedManyWithoutClassesInput
    studentAttendance?: StudentAttendanceCreateNestedManyWithoutClassInput
    classTimetables?: ClassTimetableCreateNestedManyWithoutClassesInput
    feedbacks?: FeedbackCreateNestedManyWithoutClassInput
  }

  export type ClassesUncheckedCreateWithoutStudentsInput = {
    id?: number
    class: string
    section: string
    school_id: number
    holidays?: HolidaysUncheckedCreateNestedManyWithoutClassesInput
    studentAttendance?: StudentAttendanceUncheckedCreateNestedManyWithoutClassInput
    classTimetables?: ClassTimetableUncheckedCreateNestedManyWithoutClassesInput
    feedbacks?: FeedbackUncheckedCreateNestedManyWithoutClassInput
  }

  export type ClassesCreateOrConnectWithoutStudentsInput = {
    where: ClassesWhereUniqueInput
    create: XOR<ClassesCreateWithoutStudentsInput, ClassesUncheckedCreateWithoutStudentsInput>
  }

  export type SchoolCreateWithoutStudentsInput = {
    name: string
    address: string
    photo: Uint8Array
    users?: Attendance_userCreateNestedManyWithoutSchoolInput
    staff?: StaffCreateNestedManyWithoutSchoolInput
    classes?: ClassesCreateNestedManyWithoutSchoolInput
    holidays?: HolidaysCreateNestedManyWithoutSchoolInput
    feedbacks?: FeedbackCreateNestedManyWithoutSchoolInput
    classTimetables?: ClassTimetableCreateNestedManyWithoutSchoolInput
    staffAttendances?: StaffAttendanceCreateNestedManyWithoutSchoolInput
    studentAttendances?: StudentAttendanceCreateNestedManyWithoutSchoolInput
    admins?: AdminCreateNestedManyWithoutSchoolInput
    Messages?: MessagesCreateNestedManyWithoutSchoolInput
  }

  export type SchoolUncheckedCreateWithoutStudentsInput = {
    id?: number
    name: string
    address: string
    photo: Uint8Array
    users?: Attendance_userUncheckedCreateNestedManyWithoutSchoolInput
    staff?: StaffUncheckedCreateNestedManyWithoutSchoolInput
    classes?: ClassesUncheckedCreateNestedManyWithoutSchoolInput
    holidays?: HolidaysUncheckedCreateNestedManyWithoutSchoolInput
    feedbacks?: FeedbackUncheckedCreateNestedManyWithoutSchoolInput
    classTimetables?: ClassTimetableUncheckedCreateNestedManyWithoutSchoolInput
    staffAttendances?: StaffAttendanceUncheckedCreateNestedManyWithoutSchoolInput
    studentAttendances?: StudentAttendanceUncheckedCreateNestedManyWithoutSchoolInput
    admins?: AdminUncheckedCreateNestedManyWithoutSchoolInput
    Messages?: MessagesUncheckedCreateNestedManyWithoutSchoolInput
  }

  export type SchoolCreateOrConnectWithoutStudentsInput = {
    where: SchoolWhereUniqueInput
    create: XOR<SchoolCreateWithoutStudentsInput, SchoolUncheckedCreateWithoutStudentsInput>
  }

  export type Attendance_userCreateWithoutStudentsInput = {
    username: string
    password: string
    role: string
    school: SchoolCreateNestedOneWithoutUsersInput
    staff?: StaffCreateNestedOneWithoutUserInput
    admin?: AdminCreateNestedOneWithoutUserInput
  }

  export type Attendance_userUncheckedCreateWithoutStudentsInput = {
    id?: number
    username: string
    password: string
    role: string
    school_id: number
    staff?: StaffUncheckedCreateNestedOneWithoutUserInput
    admin?: AdminUncheckedCreateNestedOneWithoutUserInput
  }

  export type Attendance_userCreateOrConnectWithoutStudentsInput = {
    where: Attendance_userWhereUniqueInput
    create: XOR<Attendance_userCreateWithoutStudentsInput, Attendance_userUncheckedCreateWithoutStudentsInput>
  }

  export type StudentAttendanceCreateWithoutStudentInput = {
    date: Date | string
    fn_status?: string
    an_status?: string
    class: ClassesCreateNestedOneWithoutStudentAttendanceInput
    school: SchoolCreateNestedOneWithoutStudentAttendancesInput
  }

  export type StudentAttendanceUncheckedCreateWithoutStudentInput = {
    date: Date | string
    fn_status?: string
    an_status?: string
    school_id: number
    class_id: number
  }

  export type StudentAttendanceCreateOrConnectWithoutStudentInput = {
    where: StudentAttendanceWhereUniqueInput
    create: XOR<StudentAttendanceCreateWithoutStudentInput, StudentAttendanceUncheckedCreateWithoutStudentInput>
  }

  export type StudentAttendanceCreateManyStudentInputEnvelope = {
    data: StudentAttendanceCreateManyStudentInput | StudentAttendanceCreateManyStudentInput[]
    skipDuplicates?: boolean
  }

  export type ClassesUpsertWithoutStudentsInput = {
    update: XOR<ClassesUpdateWithoutStudentsInput, ClassesUncheckedUpdateWithoutStudentsInput>
    create: XOR<ClassesCreateWithoutStudentsInput, ClassesUncheckedCreateWithoutStudentsInput>
    where?: ClassesWhereInput
  }

  export type ClassesUpdateToOneWithWhereWithoutStudentsInput = {
    where?: ClassesWhereInput
    data: XOR<ClassesUpdateWithoutStudentsInput, ClassesUncheckedUpdateWithoutStudentsInput>
  }

  export type ClassesUpdateWithoutStudentsInput = {
    class?: StringFieldUpdateOperationsInput | string
    section?: StringFieldUpdateOperationsInput | string
    school?: SchoolUpdateOneRequiredWithoutClassesNestedInput
    holidays?: HolidaysUpdateManyWithoutClassesNestedInput
    studentAttendance?: StudentAttendanceUpdateManyWithoutClassNestedInput
    classTimetables?: ClassTimetableUpdateManyWithoutClassesNestedInput
    feedbacks?: FeedbackUpdateManyWithoutClassNestedInput
  }

  export type ClassesUncheckedUpdateWithoutStudentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    class?: StringFieldUpdateOperationsInput | string
    section?: StringFieldUpdateOperationsInput | string
    school_id?: IntFieldUpdateOperationsInput | number
    holidays?: HolidaysUncheckedUpdateManyWithoutClassesNestedInput
    studentAttendance?: StudentAttendanceUncheckedUpdateManyWithoutClassNestedInput
    classTimetables?: ClassTimetableUncheckedUpdateManyWithoutClassesNestedInput
    feedbacks?: FeedbackUncheckedUpdateManyWithoutClassNestedInput
  }

  export type SchoolUpsertWithoutStudentsInput = {
    update: XOR<SchoolUpdateWithoutStudentsInput, SchoolUncheckedUpdateWithoutStudentsInput>
    create: XOR<SchoolCreateWithoutStudentsInput, SchoolUncheckedCreateWithoutStudentsInput>
    where?: SchoolWhereInput
  }

  export type SchoolUpdateToOneWithWhereWithoutStudentsInput = {
    where?: SchoolWhereInput
    data: XOR<SchoolUpdateWithoutStudentsInput, SchoolUncheckedUpdateWithoutStudentsInput>
  }

  export type SchoolUpdateWithoutStudentsInput = {
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    photo?: BytesFieldUpdateOperationsInput | Uint8Array
    users?: Attendance_userUpdateManyWithoutSchoolNestedInput
    staff?: StaffUpdateManyWithoutSchoolNestedInput
    classes?: ClassesUpdateManyWithoutSchoolNestedInput
    holidays?: HolidaysUpdateManyWithoutSchoolNestedInput
    feedbacks?: FeedbackUpdateManyWithoutSchoolNestedInput
    classTimetables?: ClassTimetableUpdateManyWithoutSchoolNestedInput
    staffAttendances?: StaffAttendanceUpdateManyWithoutSchoolNestedInput
    studentAttendances?: StudentAttendanceUpdateManyWithoutSchoolNestedInput
    admins?: AdminUpdateManyWithoutSchoolNestedInput
    Messages?: MessagesUpdateManyWithoutSchoolNestedInput
  }

  export type SchoolUncheckedUpdateWithoutStudentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    photo?: BytesFieldUpdateOperationsInput | Uint8Array
    users?: Attendance_userUncheckedUpdateManyWithoutSchoolNestedInput
    staff?: StaffUncheckedUpdateManyWithoutSchoolNestedInput
    classes?: ClassesUncheckedUpdateManyWithoutSchoolNestedInput
    holidays?: HolidaysUncheckedUpdateManyWithoutSchoolNestedInput
    feedbacks?: FeedbackUncheckedUpdateManyWithoutSchoolNestedInput
    classTimetables?: ClassTimetableUncheckedUpdateManyWithoutSchoolNestedInput
    staffAttendances?: StaffAttendanceUncheckedUpdateManyWithoutSchoolNestedInput
    studentAttendances?: StudentAttendanceUncheckedUpdateManyWithoutSchoolNestedInput
    admins?: AdminUncheckedUpdateManyWithoutSchoolNestedInput
    Messages?: MessagesUncheckedUpdateManyWithoutSchoolNestedInput
  }

  export type Attendance_userUpsertWithoutStudentsInput = {
    update: XOR<Attendance_userUpdateWithoutStudentsInput, Attendance_userUncheckedUpdateWithoutStudentsInput>
    create: XOR<Attendance_userCreateWithoutStudentsInput, Attendance_userUncheckedCreateWithoutStudentsInput>
    where?: Attendance_userWhereInput
  }

  export type Attendance_userUpdateToOneWithWhereWithoutStudentsInput = {
    where?: Attendance_userWhereInput
    data: XOR<Attendance_userUpdateWithoutStudentsInput, Attendance_userUncheckedUpdateWithoutStudentsInput>
  }

  export type Attendance_userUpdateWithoutStudentsInput = {
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    school?: SchoolUpdateOneRequiredWithoutUsersNestedInput
    staff?: StaffUpdateOneWithoutUserNestedInput
    admin?: AdminUpdateOneWithoutUserNestedInput
  }

  export type Attendance_userUncheckedUpdateWithoutStudentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    school_id?: IntFieldUpdateOperationsInput | number
    staff?: StaffUncheckedUpdateOneWithoutUserNestedInput
    admin?: AdminUncheckedUpdateOneWithoutUserNestedInput
  }

  export type StudentAttendanceUpsertWithWhereUniqueWithoutStudentInput = {
    where: StudentAttendanceWhereUniqueInput
    update: XOR<StudentAttendanceUpdateWithoutStudentInput, StudentAttendanceUncheckedUpdateWithoutStudentInput>
    create: XOR<StudentAttendanceCreateWithoutStudentInput, StudentAttendanceUncheckedCreateWithoutStudentInput>
  }

  export type StudentAttendanceUpdateWithWhereUniqueWithoutStudentInput = {
    where: StudentAttendanceWhereUniqueInput
    data: XOR<StudentAttendanceUpdateWithoutStudentInput, StudentAttendanceUncheckedUpdateWithoutStudentInput>
  }

  export type StudentAttendanceUpdateManyWithWhereWithoutStudentInput = {
    where: StudentAttendanceScalarWhereInput
    data: XOR<StudentAttendanceUpdateManyMutationInput, StudentAttendanceUncheckedUpdateManyWithoutStudentInput>
  }

  export type ClassesCreateWithoutStudentAttendanceInput = {
    class: string
    section: string
    school: SchoolCreateNestedOneWithoutClassesInput
    holidays?: HolidaysCreateNestedManyWithoutClassesInput
    students?: StudentCreateNestedManyWithoutClassInput
    classTimetables?: ClassTimetableCreateNestedManyWithoutClassesInput
    feedbacks?: FeedbackCreateNestedManyWithoutClassInput
  }

  export type ClassesUncheckedCreateWithoutStudentAttendanceInput = {
    id?: number
    class: string
    section: string
    school_id: number
    holidays?: HolidaysUncheckedCreateNestedManyWithoutClassesInput
    students?: StudentUncheckedCreateNestedManyWithoutClassInput
    classTimetables?: ClassTimetableUncheckedCreateNestedManyWithoutClassesInput
    feedbacks?: FeedbackUncheckedCreateNestedManyWithoutClassInput
  }

  export type ClassesCreateOrConnectWithoutStudentAttendanceInput = {
    where: ClassesWhereUniqueInput
    create: XOR<ClassesCreateWithoutStudentAttendanceInput, ClassesUncheckedCreateWithoutStudentAttendanceInput>
  }

  export type StudentCreateWithoutAttendanceInput = {
    name?: string | null
    gender?: $Enums.Gender | null
    email: string
    mobile: string
    photo?: Uint8Array | null
    password: string
    class: ClassesCreateNestedOneWithoutStudentsInput
    school: SchoolCreateNestedOneWithoutStudentsInput
    user: Attendance_userCreateNestedOneWithoutStudentsInput
  }

  export type StudentUncheckedCreateWithoutAttendanceInput = {
    id?: number
    username: string
    name?: string | null
    gender?: $Enums.Gender | null
    email: string
    mobile: string
    class_id: number
    school_id: number
    photo?: Uint8Array | null
    password: string
  }

  export type StudentCreateOrConnectWithoutAttendanceInput = {
    where: StudentWhereUniqueInput
    create: XOR<StudentCreateWithoutAttendanceInput, StudentUncheckedCreateWithoutAttendanceInput>
  }

  export type SchoolCreateWithoutStudentAttendancesInput = {
    name: string
    address: string
    photo: Uint8Array
    users?: Attendance_userCreateNestedManyWithoutSchoolInput
    staff?: StaffCreateNestedManyWithoutSchoolInput
    classes?: ClassesCreateNestedManyWithoutSchoolInput
    holidays?: HolidaysCreateNestedManyWithoutSchoolInput
    students?: StudentCreateNestedManyWithoutSchoolInput
    feedbacks?: FeedbackCreateNestedManyWithoutSchoolInput
    classTimetables?: ClassTimetableCreateNestedManyWithoutSchoolInput
    staffAttendances?: StaffAttendanceCreateNestedManyWithoutSchoolInput
    admins?: AdminCreateNestedManyWithoutSchoolInput
    Messages?: MessagesCreateNestedManyWithoutSchoolInput
  }

  export type SchoolUncheckedCreateWithoutStudentAttendancesInput = {
    id?: number
    name: string
    address: string
    photo: Uint8Array
    users?: Attendance_userUncheckedCreateNestedManyWithoutSchoolInput
    staff?: StaffUncheckedCreateNestedManyWithoutSchoolInput
    classes?: ClassesUncheckedCreateNestedManyWithoutSchoolInput
    holidays?: HolidaysUncheckedCreateNestedManyWithoutSchoolInput
    students?: StudentUncheckedCreateNestedManyWithoutSchoolInput
    feedbacks?: FeedbackUncheckedCreateNestedManyWithoutSchoolInput
    classTimetables?: ClassTimetableUncheckedCreateNestedManyWithoutSchoolInput
    staffAttendances?: StaffAttendanceUncheckedCreateNestedManyWithoutSchoolInput
    admins?: AdminUncheckedCreateNestedManyWithoutSchoolInput
    Messages?: MessagesUncheckedCreateNestedManyWithoutSchoolInput
  }

  export type SchoolCreateOrConnectWithoutStudentAttendancesInput = {
    where: SchoolWhereUniqueInput
    create: XOR<SchoolCreateWithoutStudentAttendancesInput, SchoolUncheckedCreateWithoutStudentAttendancesInput>
  }

  export type ClassesUpsertWithoutStudentAttendanceInput = {
    update: XOR<ClassesUpdateWithoutStudentAttendanceInput, ClassesUncheckedUpdateWithoutStudentAttendanceInput>
    create: XOR<ClassesCreateWithoutStudentAttendanceInput, ClassesUncheckedCreateWithoutStudentAttendanceInput>
    where?: ClassesWhereInput
  }

  export type ClassesUpdateToOneWithWhereWithoutStudentAttendanceInput = {
    where?: ClassesWhereInput
    data: XOR<ClassesUpdateWithoutStudentAttendanceInput, ClassesUncheckedUpdateWithoutStudentAttendanceInput>
  }

  export type ClassesUpdateWithoutStudentAttendanceInput = {
    class?: StringFieldUpdateOperationsInput | string
    section?: StringFieldUpdateOperationsInput | string
    school?: SchoolUpdateOneRequiredWithoutClassesNestedInput
    holidays?: HolidaysUpdateManyWithoutClassesNestedInput
    students?: StudentUpdateManyWithoutClassNestedInput
    classTimetables?: ClassTimetableUpdateManyWithoutClassesNestedInput
    feedbacks?: FeedbackUpdateManyWithoutClassNestedInput
  }

  export type ClassesUncheckedUpdateWithoutStudentAttendanceInput = {
    id?: IntFieldUpdateOperationsInput | number
    class?: StringFieldUpdateOperationsInput | string
    section?: StringFieldUpdateOperationsInput | string
    school_id?: IntFieldUpdateOperationsInput | number
    holidays?: HolidaysUncheckedUpdateManyWithoutClassesNestedInput
    students?: StudentUncheckedUpdateManyWithoutClassNestedInput
    classTimetables?: ClassTimetableUncheckedUpdateManyWithoutClassesNestedInput
    feedbacks?: FeedbackUncheckedUpdateManyWithoutClassNestedInput
  }

  export type StudentUpsertWithoutAttendanceInput = {
    update: XOR<StudentUpdateWithoutAttendanceInput, StudentUncheckedUpdateWithoutAttendanceInput>
    create: XOR<StudentCreateWithoutAttendanceInput, StudentUncheckedCreateWithoutAttendanceInput>
    where?: StudentWhereInput
  }

  export type StudentUpdateToOneWithWhereWithoutAttendanceInput = {
    where?: StudentWhereInput
    data: XOR<StudentUpdateWithoutAttendanceInput, StudentUncheckedUpdateWithoutAttendanceInput>
  }

  export type StudentUpdateWithoutAttendanceInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableEnumGenderFieldUpdateOperationsInput | $Enums.Gender | null
    email?: StringFieldUpdateOperationsInput | string
    mobile?: StringFieldUpdateOperationsInput | string
    photo?: NullableBytesFieldUpdateOperationsInput | Uint8Array | null
    password?: StringFieldUpdateOperationsInput | string
    class?: ClassesUpdateOneRequiredWithoutStudentsNestedInput
    school?: SchoolUpdateOneRequiredWithoutStudentsNestedInput
    user?: Attendance_userUpdateOneRequiredWithoutStudentsNestedInput
  }

  export type StudentUncheckedUpdateWithoutAttendanceInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableEnumGenderFieldUpdateOperationsInput | $Enums.Gender | null
    email?: StringFieldUpdateOperationsInput | string
    mobile?: StringFieldUpdateOperationsInput | string
    class_id?: IntFieldUpdateOperationsInput | number
    school_id?: IntFieldUpdateOperationsInput | number
    photo?: NullableBytesFieldUpdateOperationsInput | Uint8Array | null
    password?: StringFieldUpdateOperationsInput | string
  }

  export type SchoolUpsertWithoutStudentAttendancesInput = {
    update: XOR<SchoolUpdateWithoutStudentAttendancesInput, SchoolUncheckedUpdateWithoutStudentAttendancesInput>
    create: XOR<SchoolCreateWithoutStudentAttendancesInput, SchoolUncheckedCreateWithoutStudentAttendancesInput>
    where?: SchoolWhereInput
  }

  export type SchoolUpdateToOneWithWhereWithoutStudentAttendancesInput = {
    where?: SchoolWhereInput
    data: XOR<SchoolUpdateWithoutStudentAttendancesInput, SchoolUncheckedUpdateWithoutStudentAttendancesInput>
  }

  export type SchoolUpdateWithoutStudentAttendancesInput = {
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    photo?: BytesFieldUpdateOperationsInput | Uint8Array
    users?: Attendance_userUpdateManyWithoutSchoolNestedInput
    staff?: StaffUpdateManyWithoutSchoolNestedInput
    classes?: ClassesUpdateManyWithoutSchoolNestedInput
    holidays?: HolidaysUpdateManyWithoutSchoolNestedInput
    students?: StudentUpdateManyWithoutSchoolNestedInput
    feedbacks?: FeedbackUpdateManyWithoutSchoolNestedInput
    classTimetables?: ClassTimetableUpdateManyWithoutSchoolNestedInput
    staffAttendances?: StaffAttendanceUpdateManyWithoutSchoolNestedInput
    admins?: AdminUpdateManyWithoutSchoolNestedInput
    Messages?: MessagesUpdateManyWithoutSchoolNestedInput
  }

  export type SchoolUncheckedUpdateWithoutStudentAttendancesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    photo?: BytesFieldUpdateOperationsInput | Uint8Array
    users?: Attendance_userUncheckedUpdateManyWithoutSchoolNestedInput
    staff?: StaffUncheckedUpdateManyWithoutSchoolNestedInput
    classes?: ClassesUncheckedUpdateManyWithoutSchoolNestedInput
    holidays?: HolidaysUncheckedUpdateManyWithoutSchoolNestedInput
    students?: StudentUncheckedUpdateManyWithoutSchoolNestedInput
    feedbacks?: FeedbackUncheckedUpdateManyWithoutSchoolNestedInput
    classTimetables?: ClassTimetableUncheckedUpdateManyWithoutSchoolNestedInput
    staffAttendances?: StaffAttendanceUncheckedUpdateManyWithoutSchoolNestedInput
    admins?: AdminUncheckedUpdateManyWithoutSchoolNestedInput
    Messages?: MessagesUncheckedUpdateManyWithoutSchoolNestedInput
  }

  export type SchoolCreateWithoutClassTimetablesInput = {
    name: string
    address: string
    photo: Uint8Array
    users?: Attendance_userCreateNestedManyWithoutSchoolInput
    staff?: StaffCreateNestedManyWithoutSchoolInput
    classes?: ClassesCreateNestedManyWithoutSchoolInput
    holidays?: HolidaysCreateNestedManyWithoutSchoolInput
    students?: StudentCreateNestedManyWithoutSchoolInput
    feedbacks?: FeedbackCreateNestedManyWithoutSchoolInput
    staffAttendances?: StaffAttendanceCreateNestedManyWithoutSchoolInput
    studentAttendances?: StudentAttendanceCreateNestedManyWithoutSchoolInput
    admins?: AdminCreateNestedManyWithoutSchoolInput
    Messages?: MessagesCreateNestedManyWithoutSchoolInput
  }

  export type SchoolUncheckedCreateWithoutClassTimetablesInput = {
    id?: number
    name: string
    address: string
    photo: Uint8Array
    users?: Attendance_userUncheckedCreateNestedManyWithoutSchoolInput
    staff?: StaffUncheckedCreateNestedManyWithoutSchoolInput
    classes?: ClassesUncheckedCreateNestedManyWithoutSchoolInput
    holidays?: HolidaysUncheckedCreateNestedManyWithoutSchoolInput
    students?: StudentUncheckedCreateNestedManyWithoutSchoolInput
    feedbacks?: FeedbackUncheckedCreateNestedManyWithoutSchoolInput
    staffAttendances?: StaffAttendanceUncheckedCreateNestedManyWithoutSchoolInput
    studentAttendances?: StudentAttendanceUncheckedCreateNestedManyWithoutSchoolInput
    admins?: AdminUncheckedCreateNestedManyWithoutSchoolInput
    Messages?: MessagesUncheckedCreateNestedManyWithoutSchoolInput
  }

  export type SchoolCreateOrConnectWithoutClassTimetablesInput = {
    where: SchoolWhereUniqueInput
    create: XOR<SchoolCreateWithoutClassTimetablesInput, SchoolUncheckedCreateWithoutClassTimetablesInput>
  }

  export type ClassesCreateWithoutClassTimetablesInput = {
    class: string
    section: string
    school: SchoolCreateNestedOneWithoutClassesInput
    holidays?: HolidaysCreateNestedManyWithoutClassesInput
    students?: StudentCreateNestedManyWithoutClassInput
    studentAttendance?: StudentAttendanceCreateNestedManyWithoutClassInput
    feedbacks?: FeedbackCreateNestedManyWithoutClassInput
  }

  export type ClassesUncheckedCreateWithoutClassTimetablesInput = {
    id?: number
    class: string
    section: string
    school_id: number
    holidays?: HolidaysUncheckedCreateNestedManyWithoutClassesInput
    students?: StudentUncheckedCreateNestedManyWithoutClassInput
    studentAttendance?: StudentAttendanceUncheckedCreateNestedManyWithoutClassInput
    feedbacks?: FeedbackUncheckedCreateNestedManyWithoutClassInput
  }

  export type ClassesCreateOrConnectWithoutClassTimetablesInput = {
    where: ClassesWhereUniqueInput
    create: XOR<ClassesCreateWithoutClassTimetablesInput, ClassesUncheckedCreateWithoutClassTimetablesInput>
  }

  export type SchoolUpsertWithoutClassTimetablesInput = {
    update: XOR<SchoolUpdateWithoutClassTimetablesInput, SchoolUncheckedUpdateWithoutClassTimetablesInput>
    create: XOR<SchoolCreateWithoutClassTimetablesInput, SchoolUncheckedCreateWithoutClassTimetablesInput>
    where?: SchoolWhereInput
  }

  export type SchoolUpdateToOneWithWhereWithoutClassTimetablesInput = {
    where?: SchoolWhereInput
    data: XOR<SchoolUpdateWithoutClassTimetablesInput, SchoolUncheckedUpdateWithoutClassTimetablesInput>
  }

  export type SchoolUpdateWithoutClassTimetablesInput = {
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    photo?: BytesFieldUpdateOperationsInput | Uint8Array
    users?: Attendance_userUpdateManyWithoutSchoolNestedInput
    staff?: StaffUpdateManyWithoutSchoolNestedInput
    classes?: ClassesUpdateManyWithoutSchoolNestedInput
    holidays?: HolidaysUpdateManyWithoutSchoolNestedInput
    students?: StudentUpdateManyWithoutSchoolNestedInput
    feedbacks?: FeedbackUpdateManyWithoutSchoolNestedInput
    staffAttendances?: StaffAttendanceUpdateManyWithoutSchoolNestedInput
    studentAttendances?: StudentAttendanceUpdateManyWithoutSchoolNestedInput
    admins?: AdminUpdateManyWithoutSchoolNestedInput
    Messages?: MessagesUpdateManyWithoutSchoolNestedInput
  }

  export type SchoolUncheckedUpdateWithoutClassTimetablesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    photo?: BytesFieldUpdateOperationsInput | Uint8Array
    users?: Attendance_userUncheckedUpdateManyWithoutSchoolNestedInput
    staff?: StaffUncheckedUpdateManyWithoutSchoolNestedInput
    classes?: ClassesUncheckedUpdateManyWithoutSchoolNestedInput
    holidays?: HolidaysUncheckedUpdateManyWithoutSchoolNestedInput
    students?: StudentUncheckedUpdateManyWithoutSchoolNestedInput
    feedbacks?: FeedbackUncheckedUpdateManyWithoutSchoolNestedInput
    staffAttendances?: StaffAttendanceUncheckedUpdateManyWithoutSchoolNestedInput
    studentAttendances?: StudentAttendanceUncheckedUpdateManyWithoutSchoolNestedInput
    admins?: AdminUncheckedUpdateManyWithoutSchoolNestedInput
    Messages?: MessagesUncheckedUpdateManyWithoutSchoolNestedInput
  }

  export type ClassesUpsertWithoutClassTimetablesInput = {
    update: XOR<ClassesUpdateWithoutClassTimetablesInput, ClassesUncheckedUpdateWithoutClassTimetablesInput>
    create: XOR<ClassesCreateWithoutClassTimetablesInput, ClassesUncheckedCreateWithoutClassTimetablesInput>
    where?: ClassesWhereInput
  }

  export type ClassesUpdateToOneWithWhereWithoutClassTimetablesInput = {
    where?: ClassesWhereInput
    data: XOR<ClassesUpdateWithoutClassTimetablesInput, ClassesUncheckedUpdateWithoutClassTimetablesInput>
  }

  export type ClassesUpdateWithoutClassTimetablesInput = {
    class?: StringFieldUpdateOperationsInput | string
    section?: StringFieldUpdateOperationsInput | string
    school?: SchoolUpdateOneRequiredWithoutClassesNestedInput
    holidays?: HolidaysUpdateManyWithoutClassesNestedInput
    students?: StudentUpdateManyWithoutClassNestedInput
    studentAttendance?: StudentAttendanceUpdateManyWithoutClassNestedInput
    feedbacks?: FeedbackUpdateManyWithoutClassNestedInput
  }

  export type ClassesUncheckedUpdateWithoutClassTimetablesInput = {
    id?: IntFieldUpdateOperationsInput | number
    class?: StringFieldUpdateOperationsInput | string
    section?: StringFieldUpdateOperationsInput | string
    school_id?: IntFieldUpdateOperationsInput | number
    holidays?: HolidaysUncheckedUpdateManyWithoutClassesNestedInput
    students?: StudentUncheckedUpdateManyWithoutClassNestedInput
    studentAttendance?: StudentAttendanceUncheckedUpdateManyWithoutClassNestedInput
    feedbacks?: FeedbackUncheckedUpdateManyWithoutClassNestedInput
  }

  export type SchoolCreateWithoutFeedbacksInput = {
    name: string
    address: string
    photo: Uint8Array
    users?: Attendance_userCreateNestedManyWithoutSchoolInput
    staff?: StaffCreateNestedManyWithoutSchoolInput
    classes?: ClassesCreateNestedManyWithoutSchoolInput
    holidays?: HolidaysCreateNestedManyWithoutSchoolInput
    students?: StudentCreateNestedManyWithoutSchoolInput
    classTimetables?: ClassTimetableCreateNestedManyWithoutSchoolInput
    staffAttendances?: StaffAttendanceCreateNestedManyWithoutSchoolInput
    studentAttendances?: StudentAttendanceCreateNestedManyWithoutSchoolInput
    admins?: AdminCreateNestedManyWithoutSchoolInput
    Messages?: MessagesCreateNestedManyWithoutSchoolInput
  }

  export type SchoolUncheckedCreateWithoutFeedbacksInput = {
    id?: number
    name: string
    address: string
    photo: Uint8Array
    users?: Attendance_userUncheckedCreateNestedManyWithoutSchoolInput
    staff?: StaffUncheckedCreateNestedManyWithoutSchoolInput
    classes?: ClassesUncheckedCreateNestedManyWithoutSchoolInput
    holidays?: HolidaysUncheckedCreateNestedManyWithoutSchoolInput
    students?: StudentUncheckedCreateNestedManyWithoutSchoolInput
    classTimetables?: ClassTimetableUncheckedCreateNestedManyWithoutSchoolInput
    staffAttendances?: StaffAttendanceUncheckedCreateNestedManyWithoutSchoolInput
    studentAttendances?: StudentAttendanceUncheckedCreateNestedManyWithoutSchoolInput
    admins?: AdminUncheckedCreateNestedManyWithoutSchoolInput
    Messages?: MessagesUncheckedCreateNestedManyWithoutSchoolInput
  }

  export type SchoolCreateOrConnectWithoutFeedbacksInput = {
    where: SchoolWhereUniqueInput
    create: XOR<SchoolCreateWithoutFeedbacksInput, SchoolUncheckedCreateWithoutFeedbacksInput>
  }

  export type ClassesCreateWithoutFeedbacksInput = {
    class: string
    section: string
    school: SchoolCreateNestedOneWithoutClassesInput
    holidays?: HolidaysCreateNestedManyWithoutClassesInput
    students?: StudentCreateNestedManyWithoutClassInput
    studentAttendance?: StudentAttendanceCreateNestedManyWithoutClassInput
    classTimetables?: ClassTimetableCreateNestedManyWithoutClassesInput
  }

  export type ClassesUncheckedCreateWithoutFeedbacksInput = {
    id?: number
    class: string
    section: string
    school_id: number
    holidays?: HolidaysUncheckedCreateNestedManyWithoutClassesInput
    students?: StudentUncheckedCreateNestedManyWithoutClassInput
    studentAttendance?: StudentAttendanceUncheckedCreateNestedManyWithoutClassInput
    classTimetables?: ClassTimetableUncheckedCreateNestedManyWithoutClassesInput
  }

  export type ClassesCreateOrConnectWithoutFeedbacksInput = {
    where: ClassesWhereUniqueInput
    create: XOR<ClassesCreateWithoutFeedbacksInput, ClassesUncheckedCreateWithoutFeedbacksInput>
  }

  export type SchoolUpsertWithoutFeedbacksInput = {
    update: XOR<SchoolUpdateWithoutFeedbacksInput, SchoolUncheckedUpdateWithoutFeedbacksInput>
    create: XOR<SchoolCreateWithoutFeedbacksInput, SchoolUncheckedCreateWithoutFeedbacksInput>
    where?: SchoolWhereInput
  }

  export type SchoolUpdateToOneWithWhereWithoutFeedbacksInput = {
    where?: SchoolWhereInput
    data: XOR<SchoolUpdateWithoutFeedbacksInput, SchoolUncheckedUpdateWithoutFeedbacksInput>
  }

  export type SchoolUpdateWithoutFeedbacksInput = {
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    photo?: BytesFieldUpdateOperationsInput | Uint8Array
    users?: Attendance_userUpdateManyWithoutSchoolNestedInput
    staff?: StaffUpdateManyWithoutSchoolNestedInput
    classes?: ClassesUpdateManyWithoutSchoolNestedInput
    holidays?: HolidaysUpdateManyWithoutSchoolNestedInput
    students?: StudentUpdateManyWithoutSchoolNestedInput
    classTimetables?: ClassTimetableUpdateManyWithoutSchoolNestedInput
    staffAttendances?: StaffAttendanceUpdateManyWithoutSchoolNestedInput
    studentAttendances?: StudentAttendanceUpdateManyWithoutSchoolNestedInput
    admins?: AdminUpdateManyWithoutSchoolNestedInput
    Messages?: MessagesUpdateManyWithoutSchoolNestedInput
  }

  export type SchoolUncheckedUpdateWithoutFeedbacksInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    photo?: BytesFieldUpdateOperationsInput | Uint8Array
    users?: Attendance_userUncheckedUpdateManyWithoutSchoolNestedInput
    staff?: StaffUncheckedUpdateManyWithoutSchoolNestedInput
    classes?: ClassesUncheckedUpdateManyWithoutSchoolNestedInput
    holidays?: HolidaysUncheckedUpdateManyWithoutSchoolNestedInput
    students?: StudentUncheckedUpdateManyWithoutSchoolNestedInput
    classTimetables?: ClassTimetableUncheckedUpdateManyWithoutSchoolNestedInput
    staffAttendances?: StaffAttendanceUncheckedUpdateManyWithoutSchoolNestedInput
    studentAttendances?: StudentAttendanceUncheckedUpdateManyWithoutSchoolNestedInput
    admins?: AdminUncheckedUpdateManyWithoutSchoolNestedInput
    Messages?: MessagesUncheckedUpdateManyWithoutSchoolNestedInput
  }

  export type ClassesUpsertWithoutFeedbacksInput = {
    update: XOR<ClassesUpdateWithoutFeedbacksInput, ClassesUncheckedUpdateWithoutFeedbacksInput>
    create: XOR<ClassesCreateWithoutFeedbacksInput, ClassesUncheckedCreateWithoutFeedbacksInput>
    where?: ClassesWhereInput
  }

  export type ClassesUpdateToOneWithWhereWithoutFeedbacksInput = {
    where?: ClassesWhereInput
    data: XOR<ClassesUpdateWithoutFeedbacksInput, ClassesUncheckedUpdateWithoutFeedbacksInput>
  }

  export type ClassesUpdateWithoutFeedbacksInput = {
    class?: StringFieldUpdateOperationsInput | string
    section?: StringFieldUpdateOperationsInput | string
    school?: SchoolUpdateOneRequiredWithoutClassesNestedInput
    holidays?: HolidaysUpdateManyWithoutClassesNestedInput
    students?: StudentUpdateManyWithoutClassNestedInput
    studentAttendance?: StudentAttendanceUpdateManyWithoutClassNestedInput
    classTimetables?: ClassTimetableUpdateManyWithoutClassesNestedInput
  }

  export type ClassesUncheckedUpdateWithoutFeedbacksInput = {
    id?: IntFieldUpdateOperationsInput | number
    class?: StringFieldUpdateOperationsInput | string
    section?: StringFieldUpdateOperationsInput | string
    school_id?: IntFieldUpdateOperationsInput | number
    holidays?: HolidaysUncheckedUpdateManyWithoutClassesNestedInput
    students?: StudentUncheckedUpdateManyWithoutClassNestedInput
    studentAttendance?: StudentAttendanceUncheckedUpdateManyWithoutClassNestedInput
    classTimetables?: ClassTimetableUncheckedUpdateManyWithoutClassesNestedInput
  }

  export type SchoolCreateWithoutAdminsInput = {
    name: string
    address: string
    photo: Uint8Array
    users?: Attendance_userCreateNestedManyWithoutSchoolInput
    staff?: StaffCreateNestedManyWithoutSchoolInput
    classes?: ClassesCreateNestedManyWithoutSchoolInput
    holidays?: HolidaysCreateNestedManyWithoutSchoolInput
    students?: StudentCreateNestedManyWithoutSchoolInput
    feedbacks?: FeedbackCreateNestedManyWithoutSchoolInput
    classTimetables?: ClassTimetableCreateNestedManyWithoutSchoolInput
    staffAttendances?: StaffAttendanceCreateNestedManyWithoutSchoolInput
    studentAttendances?: StudentAttendanceCreateNestedManyWithoutSchoolInput
    Messages?: MessagesCreateNestedManyWithoutSchoolInput
  }

  export type SchoolUncheckedCreateWithoutAdminsInput = {
    id?: number
    name: string
    address: string
    photo: Uint8Array
    users?: Attendance_userUncheckedCreateNestedManyWithoutSchoolInput
    staff?: StaffUncheckedCreateNestedManyWithoutSchoolInput
    classes?: ClassesUncheckedCreateNestedManyWithoutSchoolInput
    holidays?: HolidaysUncheckedCreateNestedManyWithoutSchoolInput
    students?: StudentUncheckedCreateNestedManyWithoutSchoolInput
    feedbacks?: FeedbackUncheckedCreateNestedManyWithoutSchoolInput
    classTimetables?: ClassTimetableUncheckedCreateNestedManyWithoutSchoolInput
    staffAttendances?: StaffAttendanceUncheckedCreateNestedManyWithoutSchoolInput
    studentAttendances?: StudentAttendanceUncheckedCreateNestedManyWithoutSchoolInput
    Messages?: MessagesUncheckedCreateNestedManyWithoutSchoolInput
  }

  export type SchoolCreateOrConnectWithoutAdminsInput = {
    where: SchoolWhereUniqueInput
    create: XOR<SchoolCreateWithoutAdminsInput, SchoolUncheckedCreateWithoutAdminsInput>
  }

  export type Attendance_userCreateWithoutAdminInput = {
    username: string
    password: string
    role: string
    school: SchoolCreateNestedOneWithoutUsersInput
    staff?: StaffCreateNestedOneWithoutUserInput
    students?: StudentCreateNestedManyWithoutUserInput
  }

  export type Attendance_userUncheckedCreateWithoutAdminInput = {
    id?: number
    username: string
    password: string
    role: string
    school_id: number
    staff?: StaffUncheckedCreateNestedOneWithoutUserInput
    students?: StudentUncheckedCreateNestedManyWithoutUserInput
  }

  export type Attendance_userCreateOrConnectWithoutAdminInput = {
    where: Attendance_userWhereUniqueInput
    create: XOR<Attendance_userCreateWithoutAdminInput, Attendance_userUncheckedCreateWithoutAdminInput>
  }

  export type SchoolUpsertWithoutAdminsInput = {
    update: XOR<SchoolUpdateWithoutAdminsInput, SchoolUncheckedUpdateWithoutAdminsInput>
    create: XOR<SchoolCreateWithoutAdminsInput, SchoolUncheckedCreateWithoutAdminsInput>
    where?: SchoolWhereInput
  }

  export type SchoolUpdateToOneWithWhereWithoutAdminsInput = {
    where?: SchoolWhereInput
    data: XOR<SchoolUpdateWithoutAdminsInput, SchoolUncheckedUpdateWithoutAdminsInput>
  }

  export type SchoolUpdateWithoutAdminsInput = {
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    photo?: BytesFieldUpdateOperationsInput | Uint8Array
    users?: Attendance_userUpdateManyWithoutSchoolNestedInput
    staff?: StaffUpdateManyWithoutSchoolNestedInput
    classes?: ClassesUpdateManyWithoutSchoolNestedInput
    holidays?: HolidaysUpdateManyWithoutSchoolNestedInput
    students?: StudentUpdateManyWithoutSchoolNestedInput
    feedbacks?: FeedbackUpdateManyWithoutSchoolNestedInput
    classTimetables?: ClassTimetableUpdateManyWithoutSchoolNestedInput
    staffAttendances?: StaffAttendanceUpdateManyWithoutSchoolNestedInput
    studentAttendances?: StudentAttendanceUpdateManyWithoutSchoolNestedInput
    Messages?: MessagesUpdateManyWithoutSchoolNestedInput
  }

  export type SchoolUncheckedUpdateWithoutAdminsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    photo?: BytesFieldUpdateOperationsInput | Uint8Array
    users?: Attendance_userUncheckedUpdateManyWithoutSchoolNestedInput
    staff?: StaffUncheckedUpdateManyWithoutSchoolNestedInput
    classes?: ClassesUncheckedUpdateManyWithoutSchoolNestedInput
    holidays?: HolidaysUncheckedUpdateManyWithoutSchoolNestedInput
    students?: StudentUncheckedUpdateManyWithoutSchoolNestedInput
    feedbacks?: FeedbackUncheckedUpdateManyWithoutSchoolNestedInput
    classTimetables?: ClassTimetableUncheckedUpdateManyWithoutSchoolNestedInput
    staffAttendances?: StaffAttendanceUncheckedUpdateManyWithoutSchoolNestedInput
    studentAttendances?: StudentAttendanceUncheckedUpdateManyWithoutSchoolNestedInput
    Messages?: MessagesUncheckedUpdateManyWithoutSchoolNestedInput
  }

  export type Attendance_userUpsertWithoutAdminInput = {
    update: XOR<Attendance_userUpdateWithoutAdminInput, Attendance_userUncheckedUpdateWithoutAdminInput>
    create: XOR<Attendance_userCreateWithoutAdminInput, Attendance_userUncheckedCreateWithoutAdminInput>
    where?: Attendance_userWhereInput
  }

  export type Attendance_userUpdateToOneWithWhereWithoutAdminInput = {
    where?: Attendance_userWhereInput
    data: XOR<Attendance_userUpdateWithoutAdminInput, Attendance_userUncheckedUpdateWithoutAdminInput>
  }

  export type Attendance_userUpdateWithoutAdminInput = {
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    school?: SchoolUpdateOneRequiredWithoutUsersNestedInput
    staff?: StaffUpdateOneWithoutUserNestedInput
    students?: StudentUpdateManyWithoutUserNestedInput
  }

  export type Attendance_userUncheckedUpdateWithoutAdminInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    school_id?: IntFieldUpdateOperationsInput | number
    staff?: StaffUncheckedUpdateOneWithoutUserNestedInput
    students?: StudentUncheckedUpdateManyWithoutUserNestedInput
  }

  export type SchoolCreateWithoutMessagesInput = {
    name: string
    address: string
    photo: Uint8Array
    users?: Attendance_userCreateNestedManyWithoutSchoolInput
    staff?: StaffCreateNestedManyWithoutSchoolInput
    classes?: ClassesCreateNestedManyWithoutSchoolInput
    holidays?: HolidaysCreateNestedManyWithoutSchoolInput
    students?: StudentCreateNestedManyWithoutSchoolInput
    feedbacks?: FeedbackCreateNestedManyWithoutSchoolInput
    classTimetables?: ClassTimetableCreateNestedManyWithoutSchoolInput
    staffAttendances?: StaffAttendanceCreateNestedManyWithoutSchoolInput
    studentAttendances?: StudentAttendanceCreateNestedManyWithoutSchoolInput
    admins?: AdminCreateNestedManyWithoutSchoolInput
  }

  export type SchoolUncheckedCreateWithoutMessagesInput = {
    id?: number
    name: string
    address: string
    photo: Uint8Array
    users?: Attendance_userUncheckedCreateNestedManyWithoutSchoolInput
    staff?: StaffUncheckedCreateNestedManyWithoutSchoolInput
    classes?: ClassesUncheckedCreateNestedManyWithoutSchoolInput
    holidays?: HolidaysUncheckedCreateNestedManyWithoutSchoolInput
    students?: StudentUncheckedCreateNestedManyWithoutSchoolInput
    feedbacks?: FeedbackUncheckedCreateNestedManyWithoutSchoolInput
    classTimetables?: ClassTimetableUncheckedCreateNestedManyWithoutSchoolInput
    staffAttendances?: StaffAttendanceUncheckedCreateNestedManyWithoutSchoolInput
    studentAttendances?: StudentAttendanceUncheckedCreateNestedManyWithoutSchoolInput
    admins?: AdminUncheckedCreateNestedManyWithoutSchoolInput
  }

  export type SchoolCreateOrConnectWithoutMessagesInput = {
    where: SchoolWhereUniqueInput
    create: XOR<SchoolCreateWithoutMessagesInput, SchoolUncheckedCreateWithoutMessagesInput>
  }

  export type SchoolUpsertWithoutMessagesInput = {
    update: XOR<SchoolUpdateWithoutMessagesInput, SchoolUncheckedUpdateWithoutMessagesInput>
    create: XOR<SchoolCreateWithoutMessagesInput, SchoolUncheckedCreateWithoutMessagesInput>
    where?: SchoolWhereInput
  }

  export type SchoolUpdateToOneWithWhereWithoutMessagesInput = {
    where?: SchoolWhereInput
    data: XOR<SchoolUpdateWithoutMessagesInput, SchoolUncheckedUpdateWithoutMessagesInput>
  }

  export type SchoolUpdateWithoutMessagesInput = {
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    photo?: BytesFieldUpdateOperationsInput | Uint8Array
    users?: Attendance_userUpdateManyWithoutSchoolNestedInput
    staff?: StaffUpdateManyWithoutSchoolNestedInput
    classes?: ClassesUpdateManyWithoutSchoolNestedInput
    holidays?: HolidaysUpdateManyWithoutSchoolNestedInput
    students?: StudentUpdateManyWithoutSchoolNestedInput
    feedbacks?: FeedbackUpdateManyWithoutSchoolNestedInput
    classTimetables?: ClassTimetableUpdateManyWithoutSchoolNestedInput
    staffAttendances?: StaffAttendanceUpdateManyWithoutSchoolNestedInput
    studentAttendances?: StudentAttendanceUpdateManyWithoutSchoolNestedInput
    admins?: AdminUpdateManyWithoutSchoolNestedInput
  }

  export type SchoolUncheckedUpdateWithoutMessagesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    photo?: BytesFieldUpdateOperationsInput | Uint8Array
    users?: Attendance_userUncheckedUpdateManyWithoutSchoolNestedInput
    staff?: StaffUncheckedUpdateManyWithoutSchoolNestedInput
    classes?: ClassesUncheckedUpdateManyWithoutSchoolNestedInput
    holidays?: HolidaysUncheckedUpdateManyWithoutSchoolNestedInput
    students?: StudentUncheckedUpdateManyWithoutSchoolNestedInput
    feedbacks?: FeedbackUncheckedUpdateManyWithoutSchoolNestedInput
    classTimetables?: ClassTimetableUncheckedUpdateManyWithoutSchoolNestedInput
    staffAttendances?: StaffAttendanceUncheckedUpdateManyWithoutSchoolNestedInput
    studentAttendances?: StudentAttendanceUncheckedUpdateManyWithoutSchoolNestedInput
    admins?: AdminUncheckedUpdateManyWithoutSchoolNestedInput
  }

  export type StudentCreateManyUserInput = {
    id?: number
    name?: string | null
    gender?: $Enums.Gender | null
    email: string
    mobile: string
    class_id: number
    school_id: number
    photo?: Uint8Array | null
    password: string
  }

  export type StudentUpdateWithoutUserInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableEnumGenderFieldUpdateOperationsInput | $Enums.Gender | null
    email?: StringFieldUpdateOperationsInput | string
    mobile?: StringFieldUpdateOperationsInput | string
    photo?: NullableBytesFieldUpdateOperationsInput | Uint8Array | null
    password?: StringFieldUpdateOperationsInput | string
    class?: ClassesUpdateOneRequiredWithoutStudentsNestedInput
    school?: SchoolUpdateOneRequiredWithoutStudentsNestedInput
    attendance?: StudentAttendanceUpdateManyWithoutStudentNestedInput
  }

  export type StudentUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableEnumGenderFieldUpdateOperationsInput | $Enums.Gender | null
    email?: StringFieldUpdateOperationsInput | string
    mobile?: StringFieldUpdateOperationsInput | string
    class_id?: IntFieldUpdateOperationsInput | number
    school_id?: IntFieldUpdateOperationsInput | number
    photo?: NullableBytesFieldUpdateOperationsInput | Uint8Array | null
    password?: StringFieldUpdateOperationsInput | string
    attendance?: StudentAttendanceUncheckedUpdateManyWithoutStudentNestedInput
  }

  export type StudentUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableEnumGenderFieldUpdateOperationsInput | $Enums.Gender | null
    email?: StringFieldUpdateOperationsInput | string
    mobile?: StringFieldUpdateOperationsInput | string
    class_id?: IntFieldUpdateOperationsInput | number
    school_id?: IntFieldUpdateOperationsInput | number
    photo?: NullableBytesFieldUpdateOperationsInput | Uint8Array | null
    password?: StringFieldUpdateOperationsInput | string
  }

  export type Attendance_userCreateManySchoolInput = {
    id?: number
    username: string
    password: string
    role: string
  }

  export type StaffCreateManySchoolInput = {
    id?: number
    username: string
    designation: string
    name?: string | null
    email: string
    gender?: $Enums.Gender | null
    mobile: string
    password: string
  }

  export type ClassesCreateManySchoolInput = {
    id?: number
    class: string
    section: string
  }

  export type HolidaysCreateManySchoolInput = {
    id?: number
    date: Date | string
    reason: string
    class_ids: JsonNullValueInput | InputJsonValue
    fn?: string | null
    an: string
  }

  export type StudentCreateManySchoolInput = {
    id?: number
    username: string
    name?: string | null
    gender?: $Enums.Gender | null
    email: string
    mobile: string
    class_id: number
    photo?: Uint8Array | null
    password: string
  }

  export type FeedbackCreateManySchoolInput = {
    id?: number
    name: string
    email: string
    feedback: string
    class_id: number
    created_at?: Date | string
  }

  export type ClassTimetableCreateManySchoolInput = {
    id?: number
    classesId?: number | null
    dayOfWeek: $Enums.DayOfWeek
    periodNumber: number
    subject: string
  }

  export type StaffAttendanceCreateManySchoolInput = {
    username: string
    date: Date | string
    fn_status?: string
    an_status?: string
  }

  export type StudentAttendanceCreateManySchoolInput = {
    username: string
    date: Date | string
    fn_status?: string
    an_status?: string
    class_id: number
  }

  export type AdminCreateManySchoolInput = {
    id?: number
    name?: string | null
    designation: string
    gender?: string
    mobile: string
    email?: string
    photo?: Uint8Array | null
    username: string
  }

  export type MessagesCreateManySchoolInput = {
    id?: number
    messages: string
    date?: string | null
  }

  export type Attendance_userUpdateWithoutSchoolInput = {
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    staff?: StaffUpdateOneWithoutUserNestedInput
    students?: StudentUpdateManyWithoutUserNestedInput
    admin?: AdminUpdateOneWithoutUserNestedInput
  }

  export type Attendance_userUncheckedUpdateWithoutSchoolInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    staff?: StaffUncheckedUpdateOneWithoutUserNestedInput
    students?: StudentUncheckedUpdateManyWithoutUserNestedInput
    admin?: AdminUncheckedUpdateOneWithoutUserNestedInput
  }

  export type Attendance_userUncheckedUpdateManyWithoutSchoolInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
  }

  export type StaffUpdateWithoutSchoolInput = {
    designation?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    gender?: NullableEnumGenderFieldUpdateOperationsInput | $Enums.Gender | null
    mobile?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    user?: Attendance_userUpdateOneRequiredWithoutStaffNestedInput
    attendances?: StaffAttendanceUpdateManyWithoutStaffNestedInput
  }

  export type StaffUncheckedUpdateWithoutSchoolInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    designation?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    gender?: NullableEnumGenderFieldUpdateOperationsInput | $Enums.Gender | null
    mobile?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    attendances?: StaffAttendanceUncheckedUpdateManyWithoutStaffNestedInput
  }

  export type StaffUncheckedUpdateManyWithoutSchoolInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    designation?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    gender?: NullableEnumGenderFieldUpdateOperationsInput | $Enums.Gender | null
    mobile?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type ClassesUpdateWithoutSchoolInput = {
    class?: StringFieldUpdateOperationsInput | string
    section?: StringFieldUpdateOperationsInput | string
    holidays?: HolidaysUpdateManyWithoutClassesNestedInput
    students?: StudentUpdateManyWithoutClassNestedInput
    studentAttendance?: StudentAttendanceUpdateManyWithoutClassNestedInput
    classTimetables?: ClassTimetableUpdateManyWithoutClassesNestedInput
    feedbacks?: FeedbackUpdateManyWithoutClassNestedInput
  }

  export type ClassesUncheckedUpdateWithoutSchoolInput = {
    id?: IntFieldUpdateOperationsInput | number
    class?: StringFieldUpdateOperationsInput | string
    section?: StringFieldUpdateOperationsInput | string
    holidays?: HolidaysUncheckedUpdateManyWithoutClassesNestedInput
    students?: StudentUncheckedUpdateManyWithoutClassNestedInput
    studentAttendance?: StudentAttendanceUncheckedUpdateManyWithoutClassNestedInput
    classTimetables?: ClassTimetableUncheckedUpdateManyWithoutClassesNestedInput
    feedbacks?: FeedbackUncheckedUpdateManyWithoutClassNestedInput
  }

  export type ClassesUncheckedUpdateManyWithoutSchoolInput = {
    id?: IntFieldUpdateOperationsInput | number
    class?: StringFieldUpdateOperationsInput | string
    section?: StringFieldUpdateOperationsInput | string
  }

  export type HolidaysUpdateWithoutSchoolInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    reason?: StringFieldUpdateOperationsInput | string
    class_ids?: JsonNullValueInput | InputJsonValue
    fn?: NullableStringFieldUpdateOperationsInput | string | null
    an?: StringFieldUpdateOperationsInput | string
    classes?: ClassesUpdateManyWithoutHolidaysNestedInput
  }

  export type HolidaysUncheckedUpdateWithoutSchoolInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    reason?: StringFieldUpdateOperationsInput | string
    class_ids?: JsonNullValueInput | InputJsonValue
    fn?: NullableStringFieldUpdateOperationsInput | string | null
    an?: StringFieldUpdateOperationsInput | string
    classes?: ClassesUncheckedUpdateManyWithoutHolidaysNestedInput
  }

  export type HolidaysUncheckedUpdateManyWithoutSchoolInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    reason?: StringFieldUpdateOperationsInput | string
    class_ids?: JsonNullValueInput | InputJsonValue
    fn?: NullableStringFieldUpdateOperationsInput | string | null
    an?: StringFieldUpdateOperationsInput | string
  }

  export type StudentUpdateWithoutSchoolInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableEnumGenderFieldUpdateOperationsInput | $Enums.Gender | null
    email?: StringFieldUpdateOperationsInput | string
    mobile?: StringFieldUpdateOperationsInput | string
    photo?: NullableBytesFieldUpdateOperationsInput | Uint8Array | null
    password?: StringFieldUpdateOperationsInput | string
    class?: ClassesUpdateOneRequiredWithoutStudentsNestedInput
    user?: Attendance_userUpdateOneRequiredWithoutStudentsNestedInput
    attendance?: StudentAttendanceUpdateManyWithoutStudentNestedInput
  }

  export type StudentUncheckedUpdateWithoutSchoolInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableEnumGenderFieldUpdateOperationsInput | $Enums.Gender | null
    email?: StringFieldUpdateOperationsInput | string
    mobile?: StringFieldUpdateOperationsInput | string
    class_id?: IntFieldUpdateOperationsInput | number
    photo?: NullableBytesFieldUpdateOperationsInput | Uint8Array | null
    password?: StringFieldUpdateOperationsInput | string
    attendance?: StudentAttendanceUncheckedUpdateManyWithoutStudentNestedInput
  }

  export type StudentUncheckedUpdateManyWithoutSchoolInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableEnumGenderFieldUpdateOperationsInput | $Enums.Gender | null
    email?: StringFieldUpdateOperationsInput | string
    mobile?: StringFieldUpdateOperationsInput | string
    class_id?: IntFieldUpdateOperationsInput | number
    photo?: NullableBytesFieldUpdateOperationsInput | Uint8Array | null
    password?: StringFieldUpdateOperationsInput | string
  }

  export type FeedbackUpdateWithoutSchoolInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    feedback?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    class?: ClassesUpdateOneRequiredWithoutFeedbacksNestedInput
  }

  export type FeedbackUncheckedUpdateWithoutSchoolInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    feedback?: StringFieldUpdateOperationsInput | string
    class_id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FeedbackUncheckedUpdateManyWithoutSchoolInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    feedback?: StringFieldUpdateOperationsInput | string
    class_id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ClassTimetableUpdateWithoutSchoolInput = {
    dayOfWeek?: EnumDayOfWeekFieldUpdateOperationsInput | $Enums.DayOfWeek
    periodNumber?: IntFieldUpdateOperationsInput | number
    subject?: StringFieldUpdateOperationsInput | string
    Classes?: ClassesUpdateOneWithoutClassTimetablesNestedInput
  }

  export type ClassTimetableUncheckedUpdateWithoutSchoolInput = {
    id?: IntFieldUpdateOperationsInput | number
    classesId?: NullableIntFieldUpdateOperationsInput | number | null
    dayOfWeek?: EnumDayOfWeekFieldUpdateOperationsInput | $Enums.DayOfWeek
    periodNumber?: IntFieldUpdateOperationsInput | number
    subject?: StringFieldUpdateOperationsInput | string
  }

  export type ClassTimetableUncheckedUpdateManyWithoutSchoolInput = {
    id?: IntFieldUpdateOperationsInput | number
    classesId?: NullableIntFieldUpdateOperationsInput | number | null
    dayOfWeek?: EnumDayOfWeekFieldUpdateOperationsInput | $Enums.DayOfWeek
    periodNumber?: IntFieldUpdateOperationsInput | number
    subject?: StringFieldUpdateOperationsInput | string
  }

  export type StaffAttendanceUpdateWithoutSchoolInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    fn_status?: StringFieldUpdateOperationsInput | string
    an_status?: StringFieldUpdateOperationsInput | string
    staff?: StaffUpdateOneRequiredWithoutAttendancesNestedInput
  }

  export type StaffAttendanceUncheckedUpdateWithoutSchoolInput = {
    username?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    fn_status?: StringFieldUpdateOperationsInput | string
    an_status?: StringFieldUpdateOperationsInput | string
  }

  export type StaffAttendanceUncheckedUpdateManyWithoutSchoolInput = {
    username?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    fn_status?: StringFieldUpdateOperationsInput | string
    an_status?: StringFieldUpdateOperationsInput | string
  }

  export type StudentAttendanceUpdateWithoutSchoolInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    fn_status?: StringFieldUpdateOperationsInput | string
    an_status?: StringFieldUpdateOperationsInput | string
    class?: ClassesUpdateOneRequiredWithoutStudentAttendanceNestedInput
    student?: StudentUpdateOneRequiredWithoutAttendanceNestedInput
  }

  export type StudentAttendanceUncheckedUpdateWithoutSchoolInput = {
    username?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    fn_status?: StringFieldUpdateOperationsInput | string
    an_status?: StringFieldUpdateOperationsInput | string
    class_id?: IntFieldUpdateOperationsInput | number
  }

  export type StudentAttendanceUncheckedUpdateManyWithoutSchoolInput = {
    username?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    fn_status?: StringFieldUpdateOperationsInput | string
    an_status?: StringFieldUpdateOperationsInput | string
    class_id?: IntFieldUpdateOperationsInput | number
  }

  export type AdminUpdateWithoutSchoolInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    designation?: StringFieldUpdateOperationsInput | string
    gender?: StringFieldUpdateOperationsInput | string
    mobile?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    photo?: NullableBytesFieldUpdateOperationsInput | Uint8Array | null
    user?: Attendance_userUpdateOneRequiredWithoutAdminNestedInput
  }

  export type AdminUncheckedUpdateWithoutSchoolInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    designation?: StringFieldUpdateOperationsInput | string
    gender?: StringFieldUpdateOperationsInput | string
    mobile?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    photo?: NullableBytesFieldUpdateOperationsInput | Uint8Array | null
    username?: StringFieldUpdateOperationsInput | string
  }

  export type AdminUncheckedUpdateManyWithoutSchoolInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    designation?: StringFieldUpdateOperationsInput | string
    gender?: StringFieldUpdateOperationsInput | string
    mobile?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    photo?: NullableBytesFieldUpdateOperationsInput | Uint8Array | null
    username?: StringFieldUpdateOperationsInput | string
  }

  export type MessagesUpdateWithoutSchoolInput = {
    messages?: StringFieldUpdateOperationsInput | string
    date?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type MessagesUncheckedUpdateWithoutSchoolInput = {
    id?: IntFieldUpdateOperationsInput | number
    messages?: StringFieldUpdateOperationsInput | string
    date?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type MessagesUncheckedUpdateManyWithoutSchoolInput = {
    id?: IntFieldUpdateOperationsInput | number
    messages?: StringFieldUpdateOperationsInput | string
    date?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type StudentCreateManyClassInput = {
    id?: number
    username: string
    name?: string | null
    gender?: $Enums.Gender | null
    email: string
    mobile: string
    school_id: number
    photo?: Uint8Array | null
    password: string
  }

  export type StudentAttendanceCreateManyClassInput = {
    username: string
    date: Date | string
    fn_status?: string
    an_status?: string
    school_id: number
  }

  export type ClassTimetableCreateManyClassesInput = {
    id?: number
    schoolId?: number | null
    dayOfWeek: $Enums.DayOfWeek
    periodNumber: number
    subject: string
  }

  export type FeedbackCreateManyClassInput = {
    id?: number
    name: string
    email: string
    feedback: string
    school_id: number
    created_at?: Date | string
  }

  export type HolidaysUpdateWithoutClassesInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    reason?: StringFieldUpdateOperationsInput | string
    class_ids?: JsonNullValueInput | InputJsonValue
    fn?: NullableStringFieldUpdateOperationsInput | string | null
    an?: StringFieldUpdateOperationsInput | string
    school?: SchoolUpdateOneWithoutHolidaysNestedInput
  }

  export type HolidaysUncheckedUpdateWithoutClassesInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    reason?: StringFieldUpdateOperationsInput | string
    school_id?: NullableIntFieldUpdateOperationsInput | number | null
    class_ids?: JsonNullValueInput | InputJsonValue
    fn?: NullableStringFieldUpdateOperationsInput | string | null
    an?: StringFieldUpdateOperationsInput | string
  }

  export type HolidaysUncheckedUpdateManyWithoutClassesInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    reason?: StringFieldUpdateOperationsInput | string
    school_id?: NullableIntFieldUpdateOperationsInput | number | null
    class_ids?: JsonNullValueInput | InputJsonValue
    fn?: NullableStringFieldUpdateOperationsInput | string | null
    an?: StringFieldUpdateOperationsInput | string
  }

  export type StudentUpdateWithoutClassInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableEnumGenderFieldUpdateOperationsInput | $Enums.Gender | null
    email?: StringFieldUpdateOperationsInput | string
    mobile?: StringFieldUpdateOperationsInput | string
    photo?: NullableBytesFieldUpdateOperationsInput | Uint8Array | null
    password?: StringFieldUpdateOperationsInput | string
    school?: SchoolUpdateOneRequiredWithoutStudentsNestedInput
    user?: Attendance_userUpdateOneRequiredWithoutStudentsNestedInput
    attendance?: StudentAttendanceUpdateManyWithoutStudentNestedInput
  }

  export type StudentUncheckedUpdateWithoutClassInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableEnumGenderFieldUpdateOperationsInput | $Enums.Gender | null
    email?: StringFieldUpdateOperationsInput | string
    mobile?: StringFieldUpdateOperationsInput | string
    school_id?: IntFieldUpdateOperationsInput | number
    photo?: NullableBytesFieldUpdateOperationsInput | Uint8Array | null
    password?: StringFieldUpdateOperationsInput | string
    attendance?: StudentAttendanceUncheckedUpdateManyWithoutStudentNestedInput
  }

  export type StudentUncheckedUpdateManyWithoutClassInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableEnumGenderFieldUpdateOperationsInput | $Enums.Gender | null
    email?: StringFieldUpdateOperationsInput | string
    mobile?: StringFieldUpdateOperationsInput | string
    school_id?: IntFieldUpdateOperationsInput | number
    photo?: NullableBytesFieldUpdateOperationsInput | Uint8Array | null
    password?: StringFieldUpdateOperationsInput | string
  }

  export type StudentAttendanceUpdateWithoutClassInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    fn_status?: StringFieldUpdateOperationsInput | string
    an_status?: StringFieldUpdateOperationsInput | string
    student?: StudentUpdateOneRequiredWithoutAttendanceNestedInput
    school?: SchoolUpdateOneRequiredWithoutStudentAttendancesNestedInput
  }

  export type StudentAttendanceUncheckedUpdateWithoutClassInput = {
    username?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    fn_status?: StringFieldUpdateOperationsInput | string
    an_status?: StringFieldUpdateOperationsInput | string
    school_id?: IntFieldUpdateOperationsInput | number
  }

  export type StudentAttendanceUncheckedUpdateManyWithoutClassInput = {
    username?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    fn_status?: StringFieldUpdateOperationsInput | string
    an_status?: StringFieldUpdateOperationsInput | string
    school_id?: IntFieldUpdateOperationsInput | number
  }

  export type ClassTimetableUpdateWithoutClassesInput = {
    dayOfWeek?: EnumDayOfWeekFieldUpdateOperationsInput | $Enums.DayOfWeek
    periodNumber?: IntFieldUpdateOperationsInput | number
    subject?: StringFieldUpdateOperationsInput | string
    School?: SchoolUpdateOneWithoutClassTimetablesNestedInput
  }

  export type ClassTimetableUncheckedUpdateWithoutClassesInput = {
    id?: IntFieldUpdateOperationsInput | number
    schoolId?: NullableIntFieldUpdateOperationsInput | number | null
    dayOfWeek?: EnumDayOfWeekFieldUpdateOperationsInput | $Enums.DayOfWeek
    periodNumber?: IntFieldUpdateOperationsInput | number
    subject?: StringFieldUpdateOperationsInput | string
  }

  export type ClassTimetableUncheckedUpdateManyWithoutClassesInput = {
    id?: IntFieldUpdateOperationsInput | number
    schoolId?: NullableIntFieldUpdateOperationsInput | number | null
    dayOfWeek?: EnumDayOfWeekFieldUpdateOperationsInput | $Enums.DayOfWeek
    periodNumber?: IntFieldUpdateOperationsInput | number
    subject?: StringFieldUpdateOperationsInput | string
  }

  export type FeedbackUpdateWithoutClassInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    feedback?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    school?: SchoolUpdateOneRequiredWithoutFeedbacksNestedInput
  }

  export type FeedbackUncheckedUpdateWithoutClassInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    feedback?: StringFieldUpdateOperationsInput | string
    school_id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FeedbackUncheckedUpdateManyWithoutClassInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    feedback?: StringFieldUpdateOperationsInput | string
    school_id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ClassesUpdateWithoutHolidaysInput = {
    class?: StringFieldUpdateOperationsInput | string
    section?: StringFieldUpdateOperationsInput | string
    school?: SchoolUpdateOneRequiredWithoutClassesNestedInput
    students?: StudentUpdateManyWithoutClassNestedInput
    studentAttendance?: StudentAttendanceUpdateManyWithoutClassNestedInput
    classTimetables?: ClassTimetableUpdateManyWithoutClassesNestedInput
    feedbacks?: FeedbackUpdateManyWithoutClassNestedInput
  }

  export type ClassesUncheckedUpdateWithoutHolidaysInput = {
    id?: IntFieldUpdateOperationsInput | number
    class?: StringFieldUpdateOperationsInput | string
    section?: StringFieldUpdateOperationsInput | string
    school_id?: IntFieldUpdateOperationsInput | number
    students?: StudentUncheckedUpdateManyWithoutClassNestedInput
    studentAttendance?: StudentAttendanceUncheckedUpdateManyWithoutClassNestedInput
    classTimetables?: ClassTimetableUncheckedUpdateManyWithoutClassesNestedInput
    feedbacks?: FeedbackUncheckedUpdateManyWithoutClassNestedInput
  }

  export type ClassesUncheckedUpdateManyWithoutHolidaysInput = {
    id?: IntFieldUpdateOperationsInput | number
    class?: StringFieldUpdateOperationsInput | string
    section?: StringFieldUpdateOperationsInput | string
    school_id?: IntFieldUpdateOperationsInput | number
  }

  export type StaffAttendanceCreateManyStaffInput = {
    date: Date | string
    fn_status?: string
    an_status?: string
    school_id?: number | null
  }

  export type StaffAttendanceUpdateWithoutStaffInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    fn_status?: StringFieldUpdateOperationsInput | string
    an_status?: StringFieldUpdateOperationsInput | string
    school?: SchoolUpdateOneWithoutStaffAttendancesNestedInput
  }

  export type StaffAttendanceUncheckedUpdateWithoutStaffInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    fn_status?: StringFieldUpdateOperationsInput | string
    an_status?: StringFieldUpdateOperationsInput | string
    school_id?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type StaffAttendanceUncheckedUpdateManyWithoutStaffInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    fn_status?: StringFieldUpdateOperationsInput | string
    an_status?: StringFieldUpdateOperationsInput | string
    school_id?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type StudentAttendanceCreateManyStudentInput = {
    date: Date | string
    fn_status?: string
    an_status?: string
    school_id: number
    class_id: number
  }

  export type StudentAttendanceUpdateWithoutStudentInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    fn_status?: StringFieldUpdateOperationsInput | string
    an_status?: StringFieldUpdateOperationsInput | string
    class?: ClassesUpdateOneRequiredWithoutStudentAttendanceNestedInput
    school?: SchoolUpdateOneRequiredWithoutStudentAttendancesNestedInput
  }

  export type StudentAttendanceUncheckedUpdateWithoutStudentInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    fn_status?: StringFieldUpdateOperationsInput | string
    an_status?: StringFieldUpdateOperationsInput | string
    school_id?: IntFieldUpdateOperationsInput | number
    class_id?: IntFieldUpdateOperationsInput | number
  }

  export type StudentAttendanceUncheckedUpdateManyWithoutStudentInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    fn_status?: StringFieldUpdateOperationsInput | string
    an_status?: StringFieldUpdateOperationsInput | string
    school_id?: IntFieldUpdateOperationsInput | number
    class_id?: IntFieldUpdateOperationsInput | number
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}